'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-9ec3029b.js');

const pnTooltipCss = "pn-tooltip{display:inline-block;font-size:1em}button.pn-tooltip{background:none;outline:none;border:none;position:relative;padding:0;border-radius:50%;-webkit-transition:background 0.15s cubic-bezier(0.5, 0.5, 0.2, 1), -webkit-box-shadow 0.15s cubic-bezier(0.5, 0.5, 0.2, 1);transition:background 0.15s cubic-bezier(0.5, 0.5, 0.2, 1), -webkit-box-shadow 0.15s cubic-bezier(0.5, 0.5, 0.2, 1);transition:box-shadow 0.15s cubic-bezier(0.5, 0.5, 0.2, 1), background 0.15s cubic-bezier(0.5, 0.5, 0.2, 1);transition:box-shadow 0.15s cubic-bezier(0.5, 0.5, 0.2, 1), background 0.15s cubic-bezier(0.5, 0.5, 0.2, 1), -webkit-box-shadow 0.15s cubic-bezier(0.5, 0.5, 0.2, 1);cursor:pointer;font-size:inherit}button.pn-tooltip:focus{-webkit-box-shadow:0 0 0 0.1rem #ffffff, 0 0 0 0.3rem #005d92;box-shadow:0 0 0 0.1rem #ffffff, 0 0 0 0.3rem #005d92;background:#e0f8ff}button.pn-tooltip:hover{background:#e0f8ff}button.pn-tooltip.tooltip-white:focus,button.pn-tooltip.tooltip-white:hover{background:#0d234b}button.pn-tooltip>.pn-tooltip-content{position:absolute;bottom:calc(100% + 0.75em);left:50%;background:#ffffff;padding:1em;border-radius:0.8rem;-webkit-box-shadow:0 1.2px 3.6px rgba(0, 0, 0, 0.1), 0 6.4px 14.4px rgba(0, 0, 0, 0.13);box-shadow:0 1.2px 3.6px rgba(0, 0, 0, 0.1), 0 6.4px 14.4px rgba(0, 0, 0, 0.13);z-index:1;max-width:min(95vw, 40em);-webkit-transition:-webkit-transform 0.15s cubic-bezier(0.5, 0.5, 0.2, 1);transition:-webkit-transform 0.15s cubic-bezier(0.5, 0.5, 0.2, 1);transition:transform 0.15s cubic-bezier(0.5, 0.5, 0.2, 1);transition:transform 0.15s cubic-bezier(0.5, 0.5, 0.2, 1), -webkit-transform 0.15s cubic-bezier(0.5, 0.5, 0.2, 1);-webkit-transition-delay:0s;transition-delay:0s;-webkit-transform:scale(0) translateX(-50%);transform:scale(0) translateX(-50%);-webkit-transform-origin:bottom left;transform-origin:bottom left;width:-webkit-max-content;width:-moz-max-content;width:max-content;color:#000}button.pn-tooltip>pn-icon{position:relative;pointer-events:none}button.pn-tooltip>pn-icon:before{content:\"\";width:0;height:0;border-left:0.75em solid transparent;border-right:0.75em solid transparent;border-top:0.75em solid #ffffff;-webkit-filter:drop-shadow(0 0.3rem 0.1rem rgba(0, 0, 0, 0.075));filter:drop-shadow(0 0.3rem 0.1rem rgba(0, 0, 0, 0.075));-webkit-transform:scale(0) translateX(-50%);transform:scale(0) translateX(-50%);bottom:102%;left:50%;position:absolute;z-index:2;-webkit-transition:-webkit-transform 0.15s linear;transition:-webkit-transform 0.15s linear;transition:transform 0.15s linear;transition:transform 0.15s linear, -webkit-transform 0.15s linear;-webkit-transition-delay:0.14s;transition-delay:0.14s;-webkit-transform-origin:bottom left;transform-origin:bottom left;pointer-events:none}button.pn-tooltip.pn-tooltip-downwards .pn-tooltip-content{bottom:unset;top:calc(100% + 0.75em);-webkit-transform-origin:top left;transform-origin:top left}button.pn-tooltip.pn-tooltip-downwards pn-icon:before{top:102%;-webkit-transform-origin:top left;transform-origin:top left;-webkit-filter:drop-shadow(0 -0.3rem 0.1rem rgba(0, 0, 0, 0.02));filter:drop-shadow(0 -0.3rem 0.1rem rgba(0, 0, 0, 0.02));border-top:none;border-bottom:0.75em solid #ffffff}button.pn-tooltip[data-open] .pn-tooltip-content{-webkit-transition-delay:0.1s;transition-delay:0.1s}button.pn-tooltip[data-open] pn-icon:before{-webkit-transform:scale(1) translateX(-50%);transform:scale(1) translateX(-50%);-webkit-transition-delay:0s;transition-delay:0s;pointer-events:auto}";

const PnTooltip = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.warning = false;
    this.color = 'blue700';
    this.downwards = false;
    this.open = false;
    this.deltaX = '0';
  }
  componentWillLoad() {
    const appearances = ['warning', 'white'];
    this.color = appearances.includes(this.color) ? this.color : 'blue700';
  }
  componentDidLoad() {
    this.initialize();
    this.eventHandler();
  }
  initialize() {
    this.pnTooltipContent = this.hostElement.querySelector('.pn-tooltip-content');
  }
  openHandler() {
    if (this.open) {
      this.checkPosition();
      return;
    }
    this.setTransform();
  }
  eventHandler() {
    const openEvents = ['mouseover', 'focus'];
    const closeEvents = ['mouseleave', 'blur'];
    const eventListeners = ['click', ...openEvents, ...closeEvents];
    eventListeners.forEach((e) => {
      this.hostElement.querySelector('.pn-tooltip').addEventListener(e, (event) => {
        // Should toggle?
        if (event.type === 'click') {
          this.toggle();
          return;
        }
        // Should open?
        if (openEvents.includes(event.type)) {
          if (event.type === 'mouseover' && this.timeout)
            clearTimeout(this.timeout);
          this.open = true;
          return;
        }
        // Should close?
        if (closeEvents.includes(event.type)) {
          if (event.type === 'mouseleave') {
            this.timeout = setTimeout(() => (this.open = false), 800);
          }
          else {
            this.open = false;
          }
        }
      });
    });
  }
  setTransform() {
    this.pnTooltipContent.style.transform = `scale(${Number(this.open)}) translateX(-50%) translateX(${this.deltaX}px)`;
  }
  checkPosition() {
    this.pnTooltipContent.style.transition = 'none';
    this.pnTooltipContent.style.transform = 'scale(1) translateX(-50%)';
    this.downwards = false;
    requestAnimationFrame(() => {
      const { x, y, right } = this.pnTooltipContent.getBoundingClientRect();
      const extraMargin = 8;
      this.deltaX = '0';
      this.downwards = y < 0;
      this.pnTooltipContent.style.transform = '';
      if (x < 0)
        this.deltaX = `${x * -1 + extraMargin}`;
      if (right > window.innerWidth)
        this.deltaX = `${window.innerWidth - right - extraMargin}`;
      requestAnimationFrame(() => {
        this.pnTooltipContent.style.transition = '';
        this.setTransform();
      });
    });
  }
  getSymbol() {
    return this.warning ? 'alert-info-circle' : 'alert-question-circle';
  }
  toggle() {
    this.open = !this.open;
  }
  getClassNames() {
    let classNames = 'pn-tooltip ';
    if (this.color === 'white')
      classNames += 'tooltip-white ';
    if (this.downwards)
      classNames += 'pn-tooltip-downwards ';
    return classNames;
  }
  render() {
    return (index.h("button", { class: this.getClassNames(), "data-open": this.open }, index.h("pn-icon", { symbol: this.getSymbol(), color: this.color }), index.h("div", { class: "pn-tooltip-content" }, index.h("slot", null))));
  }
  get hostElement() { return index.getElement(this); }
  static get watchers() { return {
    "open": ["openHandler"]
  }; }
};
PnTooltip.style = pnTooltipCss;

exports.pn_tooltip = PnTooltip;
