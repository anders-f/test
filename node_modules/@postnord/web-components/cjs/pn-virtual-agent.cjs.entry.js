'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-9ec3029b.js');

const pnVirtualAgentCss = "#CentionChatList .message .info{display:none}.pn-virtual-agent{position:fixed;bottom:1em;right:10vw;z-index:1}.pn-virtual-agent #CentionWidgetFooter{display:none}.pn-virtual-agent #CentionChatHeader{-webkit-box-shadow:rgba(0, 0, 0, 0.1) 0 0 0 1px;box-shadow:rgba(0, 0, 0, 0.1) 0 0 0 1px}.pn-virtual-agent #CentionChatQuestion{-webkit-box-shadow:rgba(0, 0, 0, 0.1) 0 0 0 1px inset;box-shadow:rgba(0, 0, 0, 0.1) 0 0 0 1px inset;height:24px;padding:5px 10px}";

const PnVirtualAgent = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /** The ID of the pracel you want to pass to the agent */
    this.parcelid = '';
    this.areaid = 23;
    this.show = true;
    this.instanceActive = false;
  }
  loadVirtualAgentScripts() {
    // @ts-ignore
    window.CentionBaseURL = 'https://chat-postnord.clearinteract.se'; //PROD
    // @ts-ignore
    // window.CentionBaseURL = "https://chat-postnordtest.clearinteract.se"; //TEST
    function addScript(url) {
      var newScript = document.createElement('script');
      document.head.appendChild(newScript);
      newScript.src = url;
    }
    addScript('https://code.jquery.com/jquery-1.12.0.min.js');
    addScript('https://chat-postnord.clearinteract.se/cention/chat/js/widget.js');
  }
  async checkStatus() {
    let statusChecker = await fetch(
    // `https://pncs-lb-service.pn-isp.com/api/can_handle?id=${this.parcelid}` // OLD
    `https://app.iva-pncs.prod.postnord.services/api/can_handle?id=${this.parcelid}` // NEW
    // `https://pn-test.ca-test-env.com/api/can_handle?id=${this.parcelid}` // TEST
    );
    this.status = await statusChecker.json();
    // console.log("status of can handle: ", this.status);
  }
  async initVirtualAgent() {
    if (document.getElementById('CentionChat')) {
      this.instanceActive = true;
      return;
    }
    this.instanceActive = true;
    this.checkStatus();
    let checkAgent = () => {
      let agentChecker = setInterval(() => {
        // console.log("checking agent");
        // @ts-ignore
        if (typeof CentionChat !== 'undefined') {
          clearInterval(agentChecker);
          const area = this.areaid;
          // @ts-ignore
          CentionChat('cention-chat-container', {
            translation: {
              '*Please allow cookie from {CENTION_BASE_URL} to make sure your chat continues if you browse to other pages during the chat.': '',
              'En kopia av konversationen kommer att skickas till {CLIENT_EMAIL}': '',
              'PostNord skriver...': '',
              'Agent(s) har bjudit in: {AGENT_NAMES}': '',
              'Agent(s) tog bort: {AGENT_NAMES}': '',
              'Chatten har avslutats.': '',
              'Återansluter, vänligen vänta ...': '',
              System: '',
              'Den uppladdade filen är för stor.': '',
              'Denna session har löpt ut.': '',
              'Ett fel har inträffat vid uppladdningen av filen.': '',
              'Ställ din fråga...': '',
              '{AGENT_NAME} har avslutat chatten.': '',
              '{AGENT_NAME} har lämnat chatten.': '',
              '{AGENT_NAME} har anslutit till chatten.': '',
              'Väntar på medarbetare': '',
              '{FROM_AGENT} har skickat vidare chatten till {TO_AGENT}': '',
              'Du har avslutat chatten.': '',
            },
            css: {
              // logo is shown at the top left hand side of the widget
              // if it starts with '<' then it is assumed to be font-awesome icon
              // otherwise it is treated as an image and will be put in <img src="{logo}">
              logo: "<i class='fa fa-comments'></i>",
              headerColor: '#00A0D6',
              headerBorderColor: '#00A0D6',
              headerTextColor: '#fff',
              mainColor: '#FFF',
              mainBorderColor: '#00A0D6',
              fontColor: '#000',
              buttonStartColor: '#00A0D6',
              buttonStartBorderColor: '#00A0D6',
              buttonStartTextColor: '#fff',
              buttonAwayColor: '#BEBEBE',
              buttonAwayTextColor: '#000000',
              buttonAwayBorderColor: '#BEBEBE',
              buttonAwayCustomClass: 'CentionAwayButton',
              buttonRetryTextColor: '#000',
              messageBackgroundColor: '',
              messageAwayTextColor: '#000',
              menuTextColor: '#25335E',
              footerTextColor: '#000',
              tickKerningOffset: '-6px',
              tickUnsentColor: 'lightgray',
              tickUnreadColor: 'lightgray',
              tickSentColor: 'green',
              tickReadColor: 'green',
            },
            text: {
              // The following attributes names are also used as their respective html element id, so
              // you can inspect the html element on the text that you would like to change in order
              // to find out the corresponding entry to be customized here.
              textTitle: 'Chatt',
              textTitleProactive: 'Behöver du lite hjälp?',
              textButtonStart: 'Börja chatta',
              // textButtonAway is the label for the link/button for away text which only visible when
              // buttonAwayEnable is set to 'true' and
              // a link added to buttonAwayLink config.
              // This is displayed under textMessageAway text.
              textButtonAway: 'Kontakta oss',
              textButtonRetry: 'Försök igen',
              textButtonProactiveStart: 'Chatta',
              textButtonProactiveLater: 'Kanske senare',
              textInputName: 'Namn',
              textInputEmail: 'Email',
              textInputQuestion: 'Fråga',
              textStatusConnecting: 'Ansluter...',
              textStatusQueue: 'Vänligen vänta, vi hjälper dig strax...',
              textStatusConnected: 'Du har anslutits till',
              textMessageCurrentQueue: 'Din nuvarande plats i kön är:',
              textMessageAgentBusy: 'Tyvärr är alla agenter upptagna för tillfället.',
              textMessageAway: 'Vi ber om ursäkt, antingen är chatten stängd eller så är alla agenter upptagna för tillfället.',
              textMessageEmailInvalid: 'Du måste ange en giltig mailadress',
              textMessageChatEnded: 'Chatten är avslutad.',
              textMessageProactive: 'Har du en fråga? Skriv här för att få hjälp.',
              textMenuSendFile: 'Skicka fil',
              textMenuNewChat: 'Ny chatt',
              textMenuFinishChat: 'Avsluta chatt',
              textMenuPrintChat: 'Skriv ut',
              textMenuSaveChat: 'Spara utdrag',
              textTickSent: '✓',
              textTickRead: '✓',
              // textEULA is the text displayed next to EULA checkbox if enabled through 'askEULA' settings
              textEULA: 'I consent to that information about this chat will be collected and stored in accordance with Data Protections laws and directives.',
            },
            ui: {
              buttonAwayEnable: false,
              // buttonAwayLink is the link to
              // where it redirected to when clicked
              buttonAwayLink: '#',
              //  Position is where to position the chat widget. Possible values are:
              // 	bottomLeft
              // 	bottomRight
              // 	centerLeft
              // 	centerRight
              position: 'bottomRight',
              bottomPosition: 0,
              rightPosition: 0,
              // Or:
              //rightPosition: 0, // rightPosition is x position of the widget from the right side of the page, in pixels
              extraFieldEnabled: false,
              extraFieldMandatory: false,
              extraFieldDisplayName: '',
              loadFontAwesome: true,
              proactiveEnable: false,
              proactiveDelayTime: 30,
              proactiveTimeAfterDecline: 45,
              proactiveRepeatedContact: 2,
              proactiveTimeout: 20,
              proactiveImmediateStart: false,
              askEULA: false,
              // hideChatWhenOffline is for not showing the chat widget
              // if or chat is not open and no agent available
              hideChatWhenOffline: true,
            },
            hooks: {
              onChatMaximize: function () {
                // This function is called when the chat is maximized
              },
              onChatMinimize: function () {
                // This function is called when the chat is minimized
              },
            },
            areaId: area, //Prod
            // areaId: 3 //Test
          });
        }
      }, 150);
      return;
    };
    if (this.status) {
      checkAgent();
      let tries = 0;
      let domChecker = setInterval(() => {
        let askQuestionBtn = document.getElementById('textButtonStart');
        if (!!askQuestionBtn) {
          let nameInput = document.getElementById('textInputName');
          nameInput.value = 'Du';
          let emailInput = document.getElementById('textInputEmail');
          emailInput.value = 'Guest@postnord.se';
          let questionInput = document.getElementById('textInputQuestion');
          questionInput.innerText = this.parcelid;
          askQuestionBtn.click();
          clearInterval(domChecker);
        }
        // console.log("Checking dom elements");
        tries++;
        if (tries > 15)
          clearInterval(domChecker);
      }, 250);
    }
    return;
  }
  componentWillLoad() {
    this.loadVirtualAgentScripts();
    this.checkStatus();
  }
  componentDidUpdate() {
    this.checkStatus();
  }
  render() {
    if (this.status && this.show) {
      return (index.h("div", { class: "pn-virtual-agent" }, index.h("div", { id: "cention-chat-container" }), index.h("pn-button-container", { appearance: "secondary", style: {
          display: this.instanceActive ? 'none' : 'block',
        } }, index.h("button", { onClick: () => this.initVirtualAgent() }, "Chatta om ditt paket"))));
    }
  }
};
PnVirtualAgent.style = pnVirtualAgentCss;

exports.pn_virtual_agent = PnVirtualAgent;
