'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-9ec3029b.js');

const contactUrls = {
  DK: {
    default: 'https://www.postnord.dk/en/help-and-support',
    da: 'https://www.postnord.dk/kundeservice',
  },
  FI: {
    default: 'https://www.postnord.fi/en/customer-service',
    fi: 'https://www.postnord.fi/asiakaspalvelu/ota-yhteytta',
  },
  NO: {
    default: 'https://www.postnord.no/en/contact-postnord',
    no: 'https://www.postnord.no/kundeservice',
  },
  SE: {
    default: 'https://www.postnord.se/en/help-and-support/contact-us',
    sv: 'https://www.postnord.se/kundservice',
  },
  customerService: 'https://portal.postnord.com/customerservice',
};
const cookieUrls = {
  DK: {
    default: 'https://www.postnord.dk/en/cookies',
    da: 'https://www.postnord.dk/cookies',
  },
  FI: {
    default: 'https://www.postnord.fi/en/privacy-policy/information-about-the-cookies',
    fi: 'https://www.postnord.fi/yksityisyydensuoja/tietoa-evasteista',
  },
  NO: {
    default: 'https://www.postnord.no/en/cookies',
    no: 'https://www.postnord.no/cookies',
  },
  SE: {
    default: 'https://www.postnord.se/en/cookies',
    sv: 'https://www.postnord.se/cookies',
  },
};
const domainUrls = {
  DK: {
    default: 'postnord.com',
    dk: 'postnord.dk',
  },
  FI: {
    default: 'postnord.com',
    fi: 'postnord.fi',
  },
  NO: {
    default: 'postnord.com',
    no: 'postnord.no',
  },
  SE: {
    default: 'postnord.com',
    se: 'postnord.se',
  },
};
const privacyUrls = {
  DK: {
    default: 'https://www.postnord.se/en/privacy-policy',
    da: 'https://www.postnord.dk/personlige-oplysninger',
  },
  FI: {
    default: 'https://www.postnord.se/en/privacy-policy',
    fi: 'https://www.postnord.fi/yksityisyydensuoja',
  },
  NO: {
    default: 'https://www.postnord.se/en/privacy-policy',
    no: 'https://www.postnord.no/personvernerklaering',
  },
  SE: {
    default: 'https://www.postnord.se/en/privacy-policy',
    sv: 'https://www.postnord.se/integritetspolicy',
  },
};
const termsandConditionsUrls = {
  DK: {
    default: 'https://www.postnord.dk/kundeservice/kundeservice-erhverv/forretningsbetingelser',
    da: 'https://www.postnord.dk/contentassets/4806069a7d6c44959c94b13417d78f22/kundeportalen.pdf',
  },
  FI: {
    default: 'https://www.postnord.fi/en/sending/terms',
    fi: 'https://www.postnord.fi/laheta/sopimusehdot',
  },
  // NO: {
  //   default: 'https://www.postnord.se/en/privacy-policy',
  //   no: 'https://www.postnord.no/personvernerklaering'
  // },
  SE: {
    default: 'https://www.postnord.se/siteassets/pdf/villkor/anvandarvillkor-postnord-konto.pdf',
  },
};

const translations = {
  COOKIES: {
    da: 'Cookies',
    en: 'Cookies',
    fi: 'Evästeet',
    no: 'Cookies',
    sv: 'Cookies',
  },
  DO_YOU_HAVE_ANY_QUESTIONS: {
    da: 'Har du nogen spørgsmål?',
    en: 'Do you have any questions?',
    fi: 'Onko sinulla kysyttävää?',
    no: '',
    sv: 'Undrar du över något?',
  },
  GET_IN_TOUCH: {
    da: 'Kontakt os',
    en: 'Get in touch',
    fi: 'Ota yhteyttä',
    no: '',
    sv: 'Kontakta oss',
  },
  MORE_INFO_ABOUT_POSTNORD_CAN_BE_FOUND_AT: {
    da: 'Mere information om PostNord findes på',
    en: 'More information about PostNord can be found at',
    fi: 'Lisää tietoa PostNordista löydät osoitteesta',
    no: '',
    sv: 'Mer information om PostNord hittar du på',
  },
  PRIVACY_POLICY: {
    da: 'Integritetspolitik',
    en: 'Privacy policy',
    fi: 'Yksityisyysasetukset',
    no: 'Privacy policy',
    sv: 'Integritetspolicy',
  },
  TERMS_AND_CONDITIONS: {
    da: 'Vilkår og betingelser',
    en: 'Terms and conditions',
    fi: 'Sopimusehdot',
    no: 'Betingelser og vilkår',
    sv: 'Villkor',
  },
};

const pnFooterCss = "pn-footer{color:#5e554a;padding-bottom:2em;display:block}pn-footer .pn-footer-row{padding:0.2em 0;font-size:0.9em;text-align:center}pn-footer .pn-footer-row p,pn-footer .pn-footer-row a{margin-right:0.2em;display:inline-block}pn-footer a{color:#005d92}pn-footer pn-icon{margin-left:0.2em}pn-footer #ot-sdk-btn{-webkit-box-direction:normal;-webkit-box-sizing:border-box;box-sizing:border-box;color:#005d92;display:inline-block;font-size:0.9em;margin-right:0.2em;text-align:center;text-decoration:none;visibility:inherit}";

const PnFooter = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.market = 'SE';
    this.language = 'en';
    this.isLoggedIn = false;
    this.isBusinessUser = false;
  }
  componentWillLoad() {
    const topbar = window.pnTopbar;
    if (topbar) {
      this.init();
    }
    else {
      window.addEventListener('topbarLoaded', () => {
        this.init();
      });
    }
  }
  init() {
    const topbar = window.pnTopbar;
    if (topbar) {
      this.market = topbar.market;
      this.language = topbar.language;
      this.isLoggedIn = topbar.isLoggedIn;
      this.isBusinessUser = topbar.isBusinessUser;
      topbar.onChangeMarket = (market) => {
        this.market = market;
      };
      topbar.onChangeLanguage = (language) => {
        this.language = language;
      };
    }
  }
  getTranslation(keyToMatch, languageToMatch) {
    // Loop through translations
    for (const [key, languages] of Object.entries(translations)) {
      if (key === keyToMatch.toUpperCase()) {
        const englishTranslation = translations[key].en;
        // Loop through languages
        for (const [language, translation] of Object.entries(languages)) {
          if (language === languageToMatch.toLowerCase()) {
            if (this.isEmpty(translation)) {
              return englishTranslation;
            }
            else {
              return translation;
            }
          }
        }
        // If no matching language, return the english translation as fallback
        return englishTranslation;
      }
    }
    return keyToMatch; // If no translation found, return the key as last fallback
  }
  getUrl(urls, marketToMatch, languageToMatch) {
    // Loop through markets
    for (const [market, languages] of Object.entries(urls)) {
      if (market === marketToMatch.toUpperCase()) {
        // Loop through languages
        for (const [language, url] of Object.entries(languages)) {
          if (language === languageToMatch.toLowerCase()) {
            return url;
          }
        }
        // Return the default URL as fallback
        const defaultMarketUrl = urls[market].default;
        return defaultMarketUrl;
      }
    }
    // As last fallback, return the english version from postnord.se
    const defaultUrl = urls.SE.default;
    return defaultUrl;
  }
  getDomain(urls, marketToMatch) {
    const defaultUrl = urls.SE.default;
    // Loop through markets
    for (const [market, domains] of Object.entries(urls)) {
      if (market === marketToMatch.toUpperCase()) {
        const domain = domains[market.toLowerCase()];
        if (this.isEmpty(domain)) {
          return defaultUrl;
        }
        else {
          return domain;
        }
      }
    }
    // As last fallback, return the english version: postnord.com
    return defaultUrl;
  }
  render() {
    const isPrivateFiUser = this.market === 'FI' && this.isLoggedIn && !this.isBusinessUser;
    return (index.h(index.Host, null, index.h("div", { class: "pn-footer-row" }, index.h("p", null, this.getTranslation('DO_YOU_HAVE_ANY_QUESTIONS', this.language)), this.isLoggedIn && !isPrivateFiUser ? (index.h("a", { href: contactUrls.customerService }, this.getTranslation('GET_IN_TOUCH', this.language))) : (index.h("a", { target: "_blank", rel: "noopener noreferrer", href: this.getUrl(contactUrls, this.market, this.language) }, this.getTranslation('GET_IN_TOUCH', this.language), index.h("pn-icon", { color: "blue700", small: true, symbol: "open-in-new" })))), index.h("div", { class: "pn-footer-row" }, this.market !== 'NO' ? (index.h("a", { target: "_blank", rel: "noopener noreferrer", href: this.getUrl(termsandConditionsUrls, this.market, this.language) }, this.getTranslation('TERMS_AND_CONDITIONS', this.language), index.h("pn-icon", { color: "blue700", small: true, symbol: "open-in-new" }))) : null, index.h("a", { target: "_blank", rel: "noopener noreferrer", href: this.getUrl(privacyUrls, this.market, this.language) }, this.getTranslation('PRIVACY_POLICY', this.language), index.h("pn-icon", { color: "blue700", small: true, symbol: "open-in-new" })), index.h("a", { target: "_blank", rel: "noopener noreferrer", href: this.getUrl(cookieUrls, this.market, this.language) }, this.getTranslation('COOKIES', this.language), index.h("pn-icon", { color: "blue700", small: true, symbol: "open-in-new" }))), index.h("div", { class: "pn-footer-row" }, index.h("p", null, this.getTranslation('MORE_INFO_ABOUT_POSTNORD_CAN_BE_FOUND_AT', this.language)), index.h("a", { target: "_blank", rel: "noopener noreferrer", href: `https://www.${this.getDomain(domainUrls, this.market)}` }, this.getDomain(domainUrls, this.market), index.h("pn-icon", { color: "blue700", small: true, symbol: "open-in-new" })))));
  }
  isEmpty(input) {
    const isNullOrUndefined = !input;
    if (isNullOrUndefined) {
      return true;
    }
    const isEmptyStr = input.trim().length === 0;
    if (isEmptyStr) {
      return true;
    }
    else {
      return false;
    }
  }
};
PnFooter.style = pnFooterCss;

exports.pn_footer = PnFooter;
