'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-9ec3029b.js');

const translations = {
  SEARCH_BUTTON: {
    da: 'Search',
    en: 'Search',
    fi: 'Search',
    no: 'Search',
    sv: 'Sök',
  },
  SEARCH_SUCCESS: {
    da: 'Your OCR number is',
    en: 'Your OCR number is',
    fi: 'Your OCR number is',
    no: 'Your OCR number is',
    sv: 'Ditt OCR-nummer är',
  },
  ERROR_INVALID_LICENSE_NUMBER: {
    da: 'Invalid license number',
    en: 'Invalid license number',
    fi: 'Invalid license number',
    no: 'Invalid license number',
    sv: 'Ogiltligt licensnummer',
  },
  ERROR_NO_RESULTS: {
    da: 'The search did not generate any results',
    en: 'The search did not generate any results',
    fi: 'The search did not generate any results',
    no: 'The search did not generate any results',
    sv: 'Sökningen genererade inga träffar',
  },
  ERROR_REASON_HEADER: {
    da: 'It may be due to:',
    en: 'It may be due to:',
    fi: 'It may be due to:',
    no: 'It may be due to:',
    sv: 'Det kan bero på:',
  },
  ERROR_REASON_ONE: {
    da: 'We could not find that license number',
    en: 'We could not find that license number',
    fi: 'We could not find that license number',
    no: 'We could not find that license number',
    sv: 'Vi hittar inget sådant licensnummer',
  },
  ERROR_REASON_TWO: {
    da: 'Check the information and try again.',
    en: 'Check the information and try again.',
    fi: 'Check the information and try again.',
    no: 'Check the information and try again.',
    sv: 'Kontrollera uppgifterna och försök igen.',
  },
  PLACEHOLDER_TEXT: {
    da: 'License number 6 digits',
    en: 'License number 6 digits',
    fi: 'License number 6 digits',
    no: 'License number 6 digits',
    sv: 'Licensnummer 6 tecken',
  },
};

const pnOcrSearchCss = "pn-ocr-search .bold{font-weight:700}pn-ocr-search .search-results,pn-ocr-search .error-text-container{padding:1em 0.5em}pn-ocr-search .invalid-text-container{padding:0.5em 1em}pn-ocr-search .invalid-text-container .invalid-ocr{color:#a70707}";

const PnOcrSearch = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    // Supported languages are en and sv
    this.language = '';
    this.loading = false;
    this.error = false;
    this.ocrNumber = '';
    this.searchSuccess = false;
    this.invalidOcrNumber = false;
  }
  getTranslation(key, language) {
    var _a, _b;
    return ((_a = translations[key]) === null || _a === void 0 ? void 0 : _a[language]) || ((_b = translations[key]) === null || _b === void 0 ? void 0 : _b.sv) || key;
  }
  handleSearch(e) {
    // reset states
    this.invalidOcrNumber = false;
    this.searchSuccess = false;
    this.error = false;
    const validationResult = this.validateOcrNumber(e.detail);
    if (validationResult.error) {
      this.invalidOcrNumber = true;
      return;
    }
    // call endpoint
    this.ocrNumberSearch(validationResult.value);
  }
  async ocrNumberSearch(ocrNumber) {
    this.loading = true;
    await fetch(`https://portal.postnord.com/public-service/api/ocr?key=${ocrNumber}`)
      .then((response) => {
      return response.json();
    })
      .then((data) => {
      this.loading = false;
      this.ocrNumber = data.newOcr;
      this.searchSuccess = true;
    })
      .catch(() => {
      this.error = true;
      this.loading = false;
      this.searchSuccess = false;
    });
  }
  validateOcrNumber(value) {
    // Removes spaces and dashes
    const formatValue = value ? value.replace(/[ -]/gi, '') : '';
    // Looks for non-digits
    const ocrRegex = new RegExp(/\D+/);
    // Needs to be atleast 6 numbers
    const error = ocrRegex.test(formatValue) || formatValue.length !== 6;
    return { error, value: formatValue };
  }
  renderSearchResult() {
    if (!this.loading && !this.error && this.searchSuccess) {
      return (index.h("div", { class: "search-results" }, this.getTranslation('SEARCH_SUCCESS', this.language), ": ", index.h("b", null, this.ocrNumber)));
    }
  }
  renderErrorMessage() {
    if (this.invalidOcrNumber && !this.loading) {
      return (index.h("div", { class: "invalid-text-container" }, index.h("p", { class: "invalid-ocr" }, this.getTranslation('ERROR_INVALID_LICENSE_NUMBER', this.language))));
    }
    if (this.error && !this.loading) {
      return (index.h("div", { class: "error-text-container" }, index.h("p", { class: "bold" }, this.getTranslation('ERROR_NO_RESULTS', this.language)), index.h("p", { class: "bold" }, this.getTranslation('ERROR_REASON_HEADER', this.language)), index.h("p", null, this.getTranslation('ERROR_REASON_ONE', this.language)), index.h("p", null, this.getTranslation('ERROR_REASON_TWO', this.language))));
    }
  }
  render() {
    return (index.h(index.Host, null, index.h("pn-search-field", { loading: this.loading, label: this.getTranslation('SEARCH_BUTTON', this.language), button: "", placeholder: this.getTranslation('PLACEHOLDER_TEXT', this.language), onSearch: (e) => this.handleSearch(e) }), this.renderSearchResult(), this.renderErrorMessage()));
  }
};
PnOcrSearch.style = pnOcrSearchCss;

exports.pn_ocr_search = PnOcrSearch;
