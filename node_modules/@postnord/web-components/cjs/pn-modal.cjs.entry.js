'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-9ec3029b.js');

const pnModalCss = "pn-modal .pn-modal{position:fixed;bottom:50%;left:50%;width:95%;max-width:45em;max-height:85vh;border:0.1rem solid #f3f2f2;border-radius:0.8rem;-webkit-transform:translate(-50%, 60%);transform:translate(-50%, 60%);-webkit-box-shadow:0px 4.8px 14.4px rgba(0, 0, 0, 0.18), 0px 25.6px 57.6px rgba(0, 0, 0, 0.22);box-shadow:0px 4.8px 14.4px rgba(0, 0, 0, 0.18), 0px 25.6px 57.6px rgba(0, 0, 0, 0.22);background:#ffffff;z-index:999;-webkit-transition:none;transition:none;pointer-events:none;opacity:0;visibility:hidden;overflow-y:auto;-webkit-transition:visibility 0s linear 0.55s, opacity 0.25s 0.15s, -webkit-transform 0.55s cubic-bezier(0.7, 0, 0.3, 1);transition:visibility 0s linear 0.55s, opacity 0.25s 0.15s, -webkit-transform 0.55s cubic-bezier(0.7, 0, 0.3, 1);transition:visibility 0s linear 0.55s, opacity 0.25s 0.15s, transform 0.55s cubic-bezier(0.7, 0, 0.3, 1);transition:visibility 0s linear 0.55s, opacity 0.25s 0.15s, transform 0.55s cubic-bezier(0.7, 0, 0.3, 1), -webkit-transform 0.55s cubic-bezier(0.7, 0, 0.3, 1)}pn-modal[data-open] .pn-modal{visibility:visible;opacity:1;pointer-events:auto;-webkit-transition:visibility 0s linear 0s, opacity 0.55s, -webkit-transform 0.55s cubic-bezier(0.7, 0, 0.3, 1);transition:visibility 0s linear 0s, opacity 0.55s, -webkit-transform 0.55s cubic-bezier(0.7, 0, 0.3, 1);transition:visibility 0s linear 0s, opacity 0.55s, transform 0.55s cubic-bezier(0.7, 0, 0.3, 1);transition:visibility 0s linear 0s, opacity 0.55s, transform 0.55s cubic-bezier(0.7, 0, 0.3, 1), -webkit-transform 0.55s cubic-bezier(0.7, 0, 0.3, 1);-webkit-transform:translate(-50%, 50%);transform:translate(-50%, 50%)}.pn-modal>.pn-modal-content{width:100%;padding:1.5em}.pn-modal>.pn-modal-close-button{position:absolute;right:1em;top:1em;outline:none;border:none;border-radius:50%;padding:0.3em;-webkit-transition:background 0.15s, -webkit-box-shadow 0.15s;transition:background 0.15s, -webkit-box-shadow 0.15s;transition:box-shadow 0.15s, background 0.15s;transition:box-shadow 0.15s, background 0.15s, -webkit-box-shadow 0.15s;cursor:pointer;background:#ffffff}.pn-modal>.pn-modal-close-button svg path{-webkit-transition:fill 0.15s;transition:fill 0.15s;pointer-events:none}.pn-modal>.pn-modal-close-button:hover,.pn-modal>.pn-modal-close-button:focus{background:#e0f8ff}.pn-modal>.pn-modal-close-button:focus{-webkit-box-shadow:0 0 0 0.2rem #fff, 0 0 0 0.4rem #005d92;box-shadow:0 0 0 0.2rem #fff, 0 0 0 0.4rem #005d92}.pn-modal>.pn-modal-close-button:active{background:#0d234b}.pn-modal>.pn-modal-close-button:active svg path{fill:#ffffff}pn-modal .pn-modal>[slot=buttons]{position:static;width:100%;background:white;border-top:0.1rem solid #d3cecb;padding:0.5em 1em;display:-ms-flexbox;display:flex;-ms-flex-pack:end;justify-content:flex-end;-ms-flex-wrap:wrap-reverse;flex-wrap:wrap-reverse}pn-modal .pn-modal>[slot=buttons]>*{margin:0.5em}pn-modal>.pn-modal-backdrop{position:fixed;width:120vw;height:120vh;top:-10vh;left:-10vw;background:#2d2013;opacity:0;z-index:9;visibility:hidden;-webkit-transition:visibility 0s linear 0.3s, opacity 0.3s;transition:visibility 0s linear 0.3s, opacity 0.3s}pn-modal[data-open] .pn-modal-backdrop{opacity:0.65;visibility:visible;-webkit-transition:visibility 0s linear 0s, opacity 0.3s;transition:visibility 0s linear 0s, opacity 0.3s}@media screen and (max-width: 30em){pn-modal .pn-modal{width:100%;max-height:95vh;bottom:0;-webkit-transform:translate(-50%, 10%);transform:translate(-50%, 10%);border-radius:0.8rem 0.8rem 0 0}pn-modal[data-open] .pn-modal{-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0)}pn-modal .pn-modal>[slot=buttons]{-ms-flex-pack:center;justify-content:center}pn-modal .pn-modal>[slot=buttons]>*{-ms-flex:1 0 auto;flex:1 0 auto}}@supports ((position: -webkit-sticky) or (position: sticky)){pn-modal .pn-modal>[slot=buttons]{position:-webkit-sticky;position:sticky;bottom:0;left:0;z-index:2}pn-modal .pn-modal>.pn-modal-close-button{position:-webkit-sticky;position:sticky;display:block;left:100%;margin:1em 1em 0 0;z-index:10}pn-modal .pn-modal>.pn-modal-content{margin-top:-3em}}";

const PnModal = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.close = index.createEvent(this, "close", 7);
    /** Bind to this property if you want to control the visibility of the modal from your own data. */
    this.open = false;
    this.handleFocus = this.focusHandler.bind(this);
    this.handleBlur = this.blurHandler.bind(this);
    this.handleEsc = this.escHandler.bind(this);
    this.handleGlobalClick = this.globalClickHandler.bind(this);
  }
  componentDidLoad() {
    if (this.mo)
      this.mo.disconnect();
    const mo = (this.mo = new MutationObserver(() => {
      index.forceUpdate(this.hostElement);
      this.setFocusableElements();
    }));
    mo.observe(this.hostElement.querySelector('.pn-modal'), { childList: true, subtree: true });
    // If the modal is opened when the page loads we still want to register the events.
    if (this.open)
      this.addEventListeners();
    this.setFocusableElements();
  }
  openHandler() {
    if (this.open) {
      this.addEventListeners();
    }
    else {
      this.removeEventListeners();
      this.elToFocus = null;
      this.close.emit(this.open);
    }
  }
  setFocusableElements() {
    // This place is where I see the most coming changes/bugs taking place.
    requestAnimationFrame(() => {
      this.focusableEls = Array.from(this.hostElement.querySelectorAll('a[href], button, input, textarea, select, details, [tabindex]:not([tabindex="-1"]):not(.pn-modal-backdrop), pn-option'));
      this.untabbable = Array.from(this.hostElement.querySelectorAll('[tabindex="-1"]'));
    });
  }
  addEventListeners() {
    const root = this.hostElement.getRootNode();
    root.addEventListener('focusin', this.handleFocus);
    root.addEventListener('focusout', this.handleBlur);
    root.addEventListener('keydown', this.handleEsc);
    // Adding RAF to ensure clicks aren't registered before the modal has opened.
    requestAnimationFrame(() => {
      document.addEventListener('pointerdown', this.handleGlobalClick);
    });
  }
  removeEventListeners() {
    const root = this.hostElement.getRootNode();
    root.removeEventListener('focusin', this.handleFocus);
    root.removeEventListener('focusout', this.handleBlur);
    root.removeEventListener('keydown', this.handleEsc);
    document.removeEventListener('pointerdown', this.handleGlobalClick);
  }
  focusHandler(e) {
    const target = e.composedPath()[0];
    if ((!this.focusableEls.includes(target) && !this.untabbable.includes(target)) ||
      target.classList.contains('pn-modal-backdrop')) {
      if (this.elToFocus) {
        this.elToFocus.focus();
        return;
      }
      this.focusableEls[0].focus();
    }
  }
  blurHandler(e) {
    var _a;
    const target = (_a = e.composedPath) === null || _a === void 0 ? void 0 : _a.call(e)[0];
    const index = this.focusableEls.indexOf(target);
    const numberOfEls = this.focusableEls.length - 1;
    if (index === 0)
      this.elToFocus = this.focusableEls[numberOfEls];
    if (index === numberOfEls)
      this.elToFocus = this.focusableEls[0];
  }
  escHandler({ code }) {
    if (code === 'Escape')
      this.open = false;
  }
  globalClickHandler(e) {
    var _a;
    const target = (_a = e.composedPath) === null || _a === void 0 ? void 0 : _a.call(e)[0];
    if (!this.hostElement.contains(target) || target.classList.contains('pn-modal-backdrop')) {
      // This is to prevent the focus and blur events from being triggered when closing the modal.
      e.preventDefault();
      this.open = false;
    }
  }
  render() {
    return (index.h(index.Host, { "data-open": this.open }, index.h("div", { class: "pn-modal-backdrop", tabindex: "0" }), index.h("div", { class: "pn-modal" }, index.h("button", { class: "pn-modal-close-button", onClick: () => (this.open = false), type: "button", title: "close", "aria-label": "close" }, index.h("pn-icon", { symbol: "close", color: "blue700" })), index.h("div", { class: "pn-modal-content" }, index.h("slot", null)), index.h("slot", { name: "buttons" })), index.h("div", { class: "pn-modal-backdrop", tabindex: "0" })));
  }
  get hostElement() { return index.getElement(this); }
  static get watchers() { return {
    "open": ["openHandler"]
  }; }
};
PnModal.style = pnModalCss;

exports.pn_modal = PnModal;
