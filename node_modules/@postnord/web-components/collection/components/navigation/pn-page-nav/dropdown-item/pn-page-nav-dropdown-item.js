import { Component, Element, Prop, h, Event } from '@stencil/core';
export class PnPageNavDropdownItem {
  constructor() {
    this.select = (e) => {
      if (this.value && !this.href)
        e.preventDefault();
      this.itemselection.emit(this.value);
    };
  }
  setClassnames() {
    let classes = 'pn-page-nav-dropdown-item ';
    if (this.active)
      classes += 'pn-page-nav-dropdown-item-active ';
    return classes;
  }
  getType() {
    return this.value ? 'text/html' : 'button';
  }
  getTagName() {
    return this.value ? 'a' : 'button';
  }
  render() {
    const TagName = this.getTagName();
    return (h("li", null,
      h(TagName, { href: this.href || '#', class: this.setClassnames(), type: this.getType(), onClick: this.select, tabindex: "-1" },
        h("slot", null),
        h("pn-icon", { symbol: "arrow-right", color: "white" })),
      h("hr", null)));
  }
  static get is() { return "pn-page-nav-dropdown-item"; }
  static get originalStyleUrls() { return {
    "$": ["pn-page-nav-dropdown-item.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-page-nav-dropdown-item.css"]
  }; }
  static get properties() { return {
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The value that will be emitted upon selection, only pass this if the item\nis a link, if you want a button (for quick actions), omit this prop."
      },
      "attribute": "value",
      "reflect": false
    },
    "href": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Pass an href to the items if you want to have links that lead outside of your app"
      },
      "attribute": "href",
      "reflect": false
    },
    "active": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Ignore this, it's internal communication with parent"
      },
      "attribute": "active",
      "reflect": false
    }
  }; }
  static get events() { return [{
      "method": "itemselection",
      "name": "itemselection",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Ignore this, it's internal communication with parent"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "hostElement"; }
}
