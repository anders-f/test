import { Component, Element, Prop, h, Host, Listen, State, Watch, forceUpdate, Event, } from '@stencil/core';
export class PnPageNav {
  constructor() {
    this.showScrollArrows = false;
    this.showLeftArrow = false;
    this.showRightArrow = false;
    this.dropdownOpen = false;
    this.navItems = [];
    this.scrollRegistered = false;
    //TO DO ADD BUTTON TEXT
    /** Pass a string which will be the text on the dropdown button.
     *  Keep in mind that the dropdown items are passed as slots
     * (<pn-page-nav-dropdown-item />). */
    this.dropdown = false;
    this.dropdownLinks = [];
    this.dropdownActive = false;
    this.eventHandler = this.keyboardEvents.bind(this);
    this.globalEventHandler = this.globalEvents.bind(this);
  }
  changeHandler({ target }) {
    this.currentSelection = target.closest('pn-page-nav-item');
    if (target.value)
      this.value = target.value;
    if (this.dropdownOpen)
      this.dropdownOpen = false;
  }
  handleResize() {
    this.rerender();
  }
  valueHandler() {
    if (!this.value)
      this.currentSelection = null;
    this.calcHighlight(this.currentSelection, this.activeBg);
    this.navchange.emit(this.value);
    if (!this.dropdownActive)
      return;
    this.isDropdownItemActive();
  }
  /* ---------------------------------------LIFECYCLE--------------------------------------- */
  componentWillLoad() {
    if (!this.dropdown)
      return;
    this.dropdownEls = Array.from(this.hostElement.querySelectorAll('pn-page-nav-dropdown-item'));
    if (this.dropdownEls.length) {
      this.dropdownActive = true;
      this.initiateDropdown();
    }
  }
  componentDidLoad() {
    if (this.mo)
      this.mo.disconnect();
    const mo = (this.mo = new MutationObserver(() => {
      forceUpdate(this.hostElement);
      this.setActiveNavItem();
      this.rerender();
    }));
    mo.observe(this.hostElement, { childList: true });
    this.navWrapper = this.hostElement.querySelector('.pn-page-nav');
    this.navContainer = this.hostElement.querySelector('.pn-page-nav-items');
    this.activeBg = this.hostElement.querySelector('.pn-pn-active');
    this.hoverBg = this.hostElement.querySelector('.pn-pn-hover');
    this.hostElement.addEventListener('mouseover', ({ target }) => this.calcHighlight(target, this.hoverBg));
    this.setActiveNavItem();
    this.rerender();
  }
  /* ---------------------------------------/LIFECYCLE--------------------------------------- */
  setActiveNavItem() {
    this.navItems = Array.from(this.hostElement.querySelectorAll('pn-page-nav-item'));
    this.navItems.forEach(navItemEl => {
      if (this.value === navItemEl.value) {
        this.currentSelection = navItemEl;
      }
      else {
        navItemEl.removeAttribute('selected');
      }
      navItemEl
        .querySelector('a')
        .addEventListener('focus', ({ target }) => this.calcHighlight(target, this.hoverBg));
    });
    /* -----------------dropdown------------------ */
    if (!this.dropdownActive)
      return;
    this.dropdownItems = Array.from(this.hostElement.querySelectorAll('.pn-page-nav-dropdown-item'));
    //Check active state on each item
    this.isDropdownItemActive();
    //Store all values to check if dropdown button should be active
    this.dropdownLinks = this.dropdownItems.map((el, i) => {
      el.setAttribute('data-index', `${i}`);
      return el.closest('pn-page-nav-dropdown-item').value;
    });
    /* -----------------/dropdown------------------ */
  }
  rerender() {
    requestAnimationFrame(() => {
      this.calcHighlight(this.currentSelection, this.activeBg);
      this.scrollArrowRender();
    });
  }
  /*---------------------------------------HIGHLIGHT LOGIC-------------------------------------------*/
  calcHighlight(el, bgEl) {
    if (!(el === null || el === void 0 ? void 0 : el.closest('pn-page-nav-item'))) {
      bgEl === null || bgEl === void 0 ? void 0 : bgEl.classList.add('hidden');
      return;
    }
    if (bgEl)
      bgEl.classList.remove('hidden');
    const elRect = el.closest('pn-page-nav-item').getBoundingClientRect();
    const { left: hostLeft } = this.navContainer.getBoundingClientRect();
    const { left: navLeft, height: navHeight, width: navWidth } = elRect;
    const offset = navLeft - hostLeft + this.navContainer.scrollLeft;
    bgEl.style.setProperty('transform', `translate(${offset}px, -50%`);
    bgEl.style.setProperty('width', `${navWidth}px`);
    bgEl.style.setProperty('height', `${navHeight}px`);
  }
  /*---------------------------------------/HIGHLIGHT LOGIC-------------------------------------------*/
  /*---------------------------------------SCROLL ARROW LOGIC-------------------------------------------*/
  scrollArrowRender() {
    if (!this.navWrapper)
      return;
    if (this.navWrapper.scrollWidth > this.navWrapper.clientWidth) {
      this.showScrollArrows = true;
      if (!this.scrollRegistered) {
        this.navWrapper.addEventListener('scroll', this.scrollArrowRender.bind(this));
        this.scrollRegistered = true;
      }
      const amountScrolled = Math.round(this.navWrapper.scrollWidth - this.navWrapper.scrollLeft);
      const distanceToEnd = amountScrolled - this.navWrapper.clientWidth;
      const distanceToStart = this.navWrapper.scrollLeft;
      this.showLeftArrow = distanceToStart > 0;
      this.showRightArrow = distanceToEnd > 0;
      return;
    }
    else {
      this.showLeftArrow = false;
      this.showRightArrow = false;
      this.showScrollArrows = false;
    }
  }
  scroll(val) {
    let amount = this.navWrapper.scrollLeft + val;
    this.navWrapper.scroll({
      left: amount,
      behavior: 'smooth',
    });
  }
  scrollArrowClasses() {
    let classNames = 'pn-pn-arrows ';
    if (this.showLeftArrow)
      classNames += 'pn-pn-left-visible ';
    if (this.showRightArrow)
      classNames += 'pn-pn-right-visible ';
    return classNames;
  }
  initiateDropdown() {
    requestAnimationFrame(() => {
      this.dropdownButton = this.hostElement.querySelector('.pn-page-nav-dropdown-button');
      this.dropdownEl = this.hostElement.querySelector('.pn-page-nav-dropdown');
      this.addDropdownEventListeners();
    });
  }
  toggleDropdown() {
    this.dropdownOpen = !this.dropdownOpen;
  }
  isDropdownItemActive() {
    this.dropdownEls.forEach(el => {
      if (el.value && this.value === el.value) {
        el.setAttribute('active', true);
        return;
      }
      el.removeAttribute('active');
    });
  }
  dropdownHandler() {
    if (this.dropdownOpen) {
      requestAnimationFrame(() => {
        this.addGlobalEventListeners();
      });
      return;
    }
    this.removeGlobalEventListeners();
  }
  /* -----------------events------------------ */
  /* -----------------temporary events------------------ */
  addDropdownEventListeners() {
    this.hostElement.addEventListener('keydown', this.eventHandler);
    this.hostElement.addEventListener('click', this.eventHandler);
  }
  addGlobalEventListeners() {
    const root = this.hostElement.getRootNode();
    root.addEventListener('focusin', this.globalEventHandler);
    root.addEventListener('keydown', this.globalEventHandler);
    root.addEventListener('click', this.globalEventHandler);
  }
  removeGlobalEventListeners() {
    const root = this.hostElement.getRootNode();
    root.removeEventListener('focusin', this.globalEventHandler);
    root.removeEventListener('keydown', this.globalEventHandler);
    root.removeEventListener('click', this.globalEventHandler);
  }
  /* -----------------/temporary events------------------ */
  /* -----------------Open dropdown with keyboard------------------ */
  keyboardEvents(e) {
    const target = e.composedPath()[0];
    // As long as the dropdown is closed, we only want it to react to keyboard input
    // is the user has focus on the button
    if (e.type === 'keydown') {
      if (!this.dropdownOpen && target === this.dropdownButton && ['ArrowUp', 'ArrowDown'].includes(e.code)) {
        this.dropdownOpen = true;
        requestAnimationFrame(() => {
          this.focusNextDropdownItem();
        });
      }
    }
  }
  /* -----------------/Open dropdown with keyboard------------------ */
  globalEvents(e) {
    const target = e.composedPath()[0];
    if (e.type === 'keydown' && e.code === 'Escape') {
      this.dropdownOpen = false;
      this.dropdownButton.focus();
    }
    if (e.code === 'ArrowDown')
      this.focusNextDropdownItem();
    if (e.code === 'ArrowUp')
      this.focusPrevDropdownItem();
    if ((e.type === 'click' || e.type === 'focusin') && !this.dropdownEl.contains(target)) {
      this.dropdownOpen = false;
    }
  }
  /* -----------------/events------------------ */
  /* -----------------focusing------------------ */
  focusNextDropdownItem() {
    const { activeElement } = this.hostElement.getRootNode();
    if (!activeElement.classList.contains('pn-page-nav-dropdown-item')) {
      this.dropdownItems[0].focus();
      return;
    }
    // focus next item
    const index = parseInt(activeElement.getAttribute('data-index'));
    if (index < this.dropdownItems.length - 1) {
      this.dropdownItems[index + 1].focus();
      return;
    }
  }
  focusPrevDropdownItem() {
    const { activeElement } = this.hostElement.getRootNode();
    if (!activeElement.classList.contains('dropdown-item')) {
      this.dropdownItems[this.dropdownItems.length - 1].focus();
    }
    // focus previous item
    const index = parseInt(activeElement.getAttribute('data-index'));
    if (index > 0) {
      this.dropdownItems[index - 1].focus();
      return;
    }
    this.dropdownButton.focus();
  }
  /* -----------------/focusing------------------ */
  dropdownButtonClasses() {
    let classList = 'pn-page-nav-dropdown-button ';
    if (this.dropdownLinks.includes(this.value))
      classList += 'pn-page-nav-dropdown-active ';
    return classList;
  }
  dropdownClasses() {
    let classList = 'pn-page-nav-dropdown ';
    if (this.dropdownOpen)
      classList += 'pn-page-nav-dropdown-open ';
    return classList;
  }
  /* ---------------------------------------/DROPDOWN LOGIC--------------------------------------- */
  render() {
    return (h(Host, null,
      h("div", { class: "pn-page-nav-wrapper" },
        h("nav", { class: "pn-page-nav" },
          this.dropdownActive && (h("button", { type: "button", class: this.dropdownButtonClasses(), onClick: () => this.toggleDropdown(), "aria-controls": "page-nav-dropdown", "aria-expanded": `${this.dropdownOpen}` },
            this.dropdown,
            h("pn-icon", { symbol: "angle-down", color: "white", small: true }),
            h("div", { class: "pn-page-nav-divider" }))),
          h("ul", { class: "pn-page-nav-items" },
            h("slot", null),
            h("div", { class: "pn-pn-bg pn-pn-active" }),
            h("div", { class: "pn-pn-bg pn-pn-hover" }))),
        this.showScrollArrows && (h("div", { class: this.scrollArrowClasses() },
          h("button", { class: "pn-pn-arrow-left", onClick: () => this.scroll(-120), tabindex: "-1" },
            h("pn-icon", { symbol: "arrow-left", color: "white" })),
          h("button", { class: "pn-pn-arrow-right", onClick: () => this.scroll(120), tabindex: "-1" },
            h("pn-icon", { symbol: "arrow-right", color: "blue700" }))))),
      this.dropdownActive && (h("ul", { class: this.dropdownClasses(), id: "page-nav-dropdown", "aria-hidden": `${!this.dropdownOpen}` },
        h("slot", { name: "dropdown-item" })))));
  }
  static get is() { return "pn-page-nav"; }
  static get originalStyleUrls() { return {
    "$": ["pn-page-nav.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-page-nav.css"]
  }; }
  static get properties() { return {
    "value": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Currently active menu item value"
      },
      "attribute": "value",
      "reflect": false
    },
    "dropdown": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "string | boolean",
        "resolved": "boolean | string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Pass a string which will be the text on the dropdown button.\nKeep in mind that the dropdown items are passed as slots\n(<pn-page-nav-dropdown-item />)."
      },
      "attribute": "dropdown",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get states() { return {
    "currentSelection": {},
    "showScrollArrows": {},
    "showLeftArrow": {},
    "showRightArrow": {},
    "dropdownOpen": {},
    "dropdownLinks": {},
    "dropdownActive": {}
  }; }
  static get events() { return [{
      "method": "navchange",
      "name": "navchange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when active value changes"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "hostElement"; }
  static get watchers() { return [{
      "propName": "value",
      "methodName": "valueHandler"
    }, {
      "propName": "dropdownOpen",
      "methodName": "dropdownHandler"
    }]; }
  static get listeners() { return [{
      "name": "itemselection",
      "method": "changeHandler",
      "target": undefined,
      "capture": false,
      "passive": false
    }, {
      "name": "resize",
      "method": "handleResize",
      "target": "window",
      "capture": false,
      "passive": true
    }]; }
}
