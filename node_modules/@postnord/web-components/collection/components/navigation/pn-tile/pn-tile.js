import { Host, Component, Prop, h, Element, State, forceUpdate } from '@stencil/core';
import allIllustrations from '../../../assets/illustrations';
export class Pntile {
  constructor() {
    /** The rel attribute of the link */
    this.rel = 'noopener';
    /** You can pass an illustration name, but if you want to pass your own image you can add an image as a slot with the name of "illustration", check the "tile with slot" story. */
    this.illustration = null;
    /** This is to keep track of whether the tile has a description or just a title */
    this.simple = false;
    this.emInPx = 16;
    this.titleEl = null;
    //@ts-ignore
    this.checkCardSize = new ResizeObserver((cards) => {
      const getCardWidth = (width) => {
        // CardWidth is the em equivalent to 10% of the width of the card
        const cardWidth = (width * 0.1) / this.emInPx;
        return `${cardWidth}em`;
      };
      cards.forEach((card) => {
        const width = card.contentRect.width;
        card.target.classList.toggle('vertical', width < this.remToPx(31.99));
        requestAnimationFrame(() => {
          card.target.style.setProperty('--w', getCardWidth(width));
        });
      });
    });
    /*---------------------------------------UTILS-------------------------------------------*/
    this.longpress = false;
  }
  setIllustration() {
    const illustrationElement = this.hostElement.querySelector('.tile-illustration');
    if (!this.illustration) {
      illustrationElement.remove();
      return;
    }
    const illustration = allIllustrations[this.illustration];
    illustrationElement.outerHTML = illustration;
  }
  componentWillLoad() {
    const slottedIllustration = this.hostElement.querySelector('[slot="illustration"]');
    this.illustration = slottedIllustration ? null : this.illustration;
  }
  componentDidLoad() {
    if (this.mo)
      this.mo.disconnect();
    const mo = (this.mo = new MutationObserver(() => forceUpdate(this.hostElement)));
    mo.observe(this.hostElement, { childList: true });
    this.setIllustration();
    const cardEl = this.hostElement.querySelector('.pn-tile');
    const linkEl = this.hostElement.querySelector('.pn-tile-link');
    this.checkCardSize.observe(cardEl);
    this.clickHandler([linkEl, cardEl], (e) => this.ripple(e, cardEl));
    this.simple = !this.hostElement.querySelector('.tile-slot').textContent.trim();
    this.emInPx = parseFloat(window.getComputedStyle(this.hostElement).fontSize);
  }
  remToPx(rem) {
    return rem * parseFloat(getComputedStyle(document.documentElement).fontSize);
  }
  ripple(e, el) {
    if (!e.isTrusted)
      return;
    const elRect = el.getBoundingClientRect();
    const elLeft = elRect.left;
    const elTop = elRect.top;
    const rippleEl = document.createElement('div');
    const elSize = elRect.width > elRect.height ? elRect.width : elRect.height;
    rippleEl.classList.add('pn-ripple');
    el.appendChild(rippleEl);
    rippleEl.style.height = `${elSize * 2}px`;
    rippleEl.style.width = `${elSize * 2}px`;
    rippleEl.style.left = e.clientX > 0 ? `${e.clientX - elLeft}px` : `50%`;
    rippleEl.style.top = e.clientY > 0 ? `${e.clientY - elTop}px` : `50%`;
    setTimeout(() => rippleEl.remove(), 400);
  }
  clickHandler(els, callback) {
    const events = ['mouseup', 'mousedown'];
    const excludedElements = ['pn-button', 'button', 'a', 'input', 'pn-checkbox', 'pn-radio-button'];
    els.forEach((el) => {
      if (el.tagName === 'A') {
        el.addEventListener('click', (e) => {
          callback(e);
        });
      }
      else {
        events.forEach((e) => {
          el.addEventListener(e, (event) => {
            // Stop the tile-link from being pressed if the user clicks a link or a button that exists on the tile
            // This is to allow the consumer to add external actions to the tile
            const isExcludedElement = excludedElements.some((el) => event.target.closest(el));
            if (isExcludedElement)
              return;
            if (event.type === 'mousedown') {
              this.longpress = false;
              this.timer = setTimeout(() => (this.longpress = true), 200);
            }
            if (event.type === 'mouseup') {
              clearTimeout(this.timer);
              // Stop clicks in case of:
              // * Long press
              // * Right mouse button is used
              if (this.longpress || event.button === 2)
                return;
              const link = event.target.closest('pn-tile').querySelector('a');
              event.preventDefault();
              callback(event);
              // Don't refocus if already in focus
              if (!link.matches(':focus'))
                link.focus();
              // If the tile or link was clicked when the ctrl key, cmd key or middle mouse button
              // was pressed, open in a new window
              if (event.ctrlKey || event.metaKey || event.button === 1) {
                window.open(link.getAttribute('href'), '_blank');
                return;
              }
              link.click();
            }
          });
        });
      }
    });
  }
  /*---------------------------------------/UTILS-------------------------------------------*/
  getClassNames() {
    let classNames = 'pn-tile ';
    if (this.simple)
      classNames += 'simple ';
    return classNames;
  }
  render() {
    const linkAttributes = {
      href: this.url,
      target: this.target,
      rel: !this.rel && this.target === '_blank' ? 'noopener' : this.rel,
    };
    return (h(Host, null,
      h("a", Object.assign({ class: "pn-tile-link" }, linkAttributes), this.label),
      h("div", { class: this.getClassNames() },
        h("div", { class: "tile-circle" }),
        h("div", { class: "tile-illustration" }),
        !this.illustration && (h("div", { class: "tile-illustration-slot" },
          h("slot", { name: "illustration" }))),
        h("div", { class: "text-cont" },
          h("h3", null,
            this.label,
            this.target === '_blank' ? h("pn-icon", { symbol: "open-in-new", small: true, color: "blue700" }) : null),
          h("div", { class: "tile-slot" },
            h("slot", null))))));
  }
  static get is() { return "pn-tile"; }
  static get originalStyleUrls() { return {
    "$": ["pn-tile.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-tile.css"]
  }; }
  static get properties() { return {
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Headline of the card and label of the link"
      },
      "attribute": "label",
      "reflect": false
    },
    "url": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The link of the tile"
      },
      "attribute": "url",
      "reflect": false
    },
    "target": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The target attribute of the link"
      },
      "attribute": "target",
      "reflect": false
    },
    "rel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The rel attribute of the link"
      },
      "attribute": "rel",
      "reflect": false,
      "defaultValue": "'noopener'"
    },
    "illustration": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "You can pass an illustration name, but if you want to pass your own image you can add an image as a slot with the name of \"illustration\", check the \"tile with slot\" story."
      },
      "attribute": "illustration",
      "reflect": false,
      "defaultValue": "null"
    }
  }; }
  static get states() { return {
    "simple": {},
    "checkCardSize": {},
    "longpress": {},
    "timer": {}
  }; }
  static get elementRef() { return "hostElement"; }
}
