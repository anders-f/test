import { Component, Prop, Event, Element, h } from '@stencil/core';
export class PnTab {
  setActiveTabHandler() {
    this.setactivetab.emit({ val: this.value, el: this.hostElement });
  }
  componentDidUpdate() {
    if (this.activeTab === this.value) {
      this.setActiveTabHandler();
    }
  }
  getClassNames() {
    let className = 'pn-tab';
    if (this.activeTab === this.value)
      className += ' active';
    return className;
  }
  render() {
    return (h("button", { class: this.getClassNames(), onClick: () => this.setActiveTabHandler() },
      h("slot", null),
      this.label));
  }
  static get is() { return "pn-tab"; }
  static get originalStyleUrls() { return {
    "$": ["pn-tab.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-tab.css"]
  }; }
  static get properties() { return {
    "activeTab": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "active-tab",
      "reflect": false
    },
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "label",
      "reflect": false
    },
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "value",
      "reflect": false
    }
  }; }
  static get events() { return [{
      "method": "setactivetab",
      "name": "setactivetab",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "hostElement"; }
}
