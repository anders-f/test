import { Component, State, h, Host } from '@stencil/core';
import { contactUrls, cookieUrls, domainUrls, privacyUrls, termsandConditionsUrls } from './urls';
import { translations } from './translations';
export class PnFooter {
  constructor() {
    this.market = 'SE';
    this.language = 'en';
    this.isLoggedIn = false;
    this.isBusinessUser = false;
  }
  componentWillLoad() {
    const topbar = window.pnTopbar;
    if (topbar) {
      this.init();
    }
    else {
      window.addEventListener('topbarLoaded', () => {
        this.init();
      });
    }
  }
  init() {
    const topbar = window.pnTopbar;
    if (topbar) {
      this.market = topbar.market;
      this.language = topbar.language;
      this.isLoggedIn = topbar.isLoggedIn;
      this.isBusinessUser = topbar.isBusinessUser;
      topbar.onChangeMarket = (market) => {
        this.market = market;
      };
      topbar.onChangeLanguage = (language) => {
        this.language = language;
      };
    }
  }
  getTranslation(keyToMatch, languageToMatch) {
    // Loop through translations
    for (const [key, languages] of Object.entries(translations)) {
      if (key === keyToMatch.toUpperCase()) {
        const englishTranslation = translations[key].en;
        // Loop through languages
        for (const [language, translation] of Object.entries(languages)) {
          if (language === languageToMatch.toLowerCase()) {
            if (this.isEmpty(translation)) {
              return englishTranslation;
            }
            else {
              return translation;
            }
          }
        }
        // If no matching language, return the english translation as fallback
        return englishTranslation;
      }
    }
    return keyToMatch; // If no translation found, return the key as last fallback
  }
  getUrl(urls, marketToMatch, languageToMatch) {
    // Loop through markets
    for (const [market, languages] of Object.entries(urls)) {
      if (market === marketToMatch.toUpperCase()) {
        // Loop through languages
        for (const [language, url] of Object.entries(languages)) {
          if (language === languageToMatch.toLowerCase()) {
            return url;
          }
        }
        // Return the default URL as fallback
        const defaultMarketUrl = urls[market].default;
        return defaultMarketUrl;
      }
    }
    // As last fallback, return the english version from postnord.se
    const defaultUrl = urls.SE.default;
    return defaultUrl;
  }
  getDomain(urls, marketToMatch) {
    const defaultUrl = urls.SE.default;
    // Loop through markets
    for (const [market, domains] of Object.entries(urls)) {
      if (market === marketToMatch.toUpperCase()) {
        const domain = domains[market.toLowerCase()];
        if (this.isEmpty(domain)) {
          return defaultUrl;
        }
        else {
          return domain;
        }
      }
    }
    // As last fallback, return the english version: postnord.com
    return defaultUrl;
  }
  render() {
    const isPrivateFiUser = this.market === 'FI' && this.isLoggedIn && !this.isBusinessUser;
    return (h(Host, null,
      h("div", { class: "pn-footer-row" },
        h("p", null, this.getTranslation('DO_YOU_HAVE_ANY_QUESTIONS', this.language)),
        this.isLoggedIn && !isPrivateFiUser ? (h("a", { href: contactUrls.customerService }, this.getTranslation('GET_IN_TOUCH', this.language))) : (h("a", { target: "_blank", rel: "noopener noreferrer", href: this.getUrl(contactUrls, this.market, this.language) },
          this.getTranslation('GET_IN_TOUCH', this.language),
          h("pn-icon", { color: "blue700", small: true, symbol: "open-in-new" })))),
      h("div", { class: "pn-footer-row" },
        this.market !== 'NO' ? (h("a", { target: "_blank", rel: "noopener noreferrer", href: this.getUrl(termsandConditionsUrls, this.market, this.language) },
          this.getTranslation('TERMS_AND_CONDITIONS', this.language),
          h("pn-icon", { color: "blue700", small: true, symbol: "open-in-new" }))) : null,
        h("a", { target: "_blank", rel: "noopener noreferrer", href: this.getUrl(privacyUrls, this.market, this.language) },
          this.getTranslation('PRIVACY_POLICY', this.language),
          h("pn-icon", { color: "blue700", small: true, symbol: "open-in-new" })),
        h("a", { target: "_blank", rel: "noopener noreferrer", href: this.getUrl(cookieUrls, this.market, this.language) },
          this.getTranslation('COOKIES', this.language),
          h("pn-icon", { color: "blue700", small: true, symbol: "open-in-new" }))),
      h("div", { class: "pn-footer-row" },
        h("p", null, this.getTranslation('MORE_INFO_ABOUT_POSTNORD_CAN_BE_FOUND_AT', this.language)),
        h("a", { target: "_blank", rel: "noopener noreferrer", href: `https://www.${this.getDomain(domainUrls, this.market)}` },
          this.getDomain(domainUrls, this.market),
          h("pn-icon", { color: "blue700", small: true, symbol: "open-in-new" })))));
  }
  isEmpty(input) {
    const isNullOrUndefined = !input;
    if (isNullOrUndefined) {
      return true;
    }
    const isEmptyStr = input.trim().length === 0;
    if (isEmptyStr) {
      return true;
    }
    else {
      return false;
    }
  }
  static get is() { return "pn-footer"; }
  static get originalStyleUrls() { return {
    "$": ["pn-footer.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-footer.css"]
  }; }
  static get states() { return {
    "market": {},
    "language": {},
    "isLoggedIn": {},
    "isBusinessUser": {}
  }; }
}
