import { Component, h, Host, Element, Prop, Watch, forceUpdate } from '@stencil/core';
import colors from '../../../assets/colors';
export class PnHeader {
  constructor() {
    /** Available colors: blue, coral, orange, gray and green */
    this.color = 'blue';
    this.maxWidth = null;
    /** By default, the illustration is vertically aligned to the bottom, setting this to true centers it */
    this.centerIllustration = false;
  }
  colorHandler() {
    this.setColor();
  }
  componentWillLoad() {
    this.setColor();
    this.checkSlots();
  }
  componentDidLoad() {
    if (this.mo)
      this.mo.disconnect();
    const mo = (this.mo = new MutationObserver(() => {
      forceUpdate(this.hostElement);
      this.checkSlots();
    }));
    mo.observe(this.hostElement.querySelector('.pn-header-content'), { childList: true, subtree: true });
  }
  setColor() {
    const alternatives = ['blue', 'coral', 'gray', 'orange', 'green'];
    this.color = alternatives.includes(this.color) ? this.color : 'blue';
    this.hostElement.style.setProperty('--bg', colors[`${this.color}25`]);
    this.hostElement.style.setProperty('--pill-color', colors[`${this.color}50`]);
    if (this.maxWidth)
      this.hostElement.style.setProperty('--max-width', `${this.maxWidth}`);
  }
  checkSlots() {
    const slottedIllustration = this.hostElement.querySelector('[slot="illustration"]');
    const topNav = this.hostElement.querySelector('[slot="top-menu"]');
    this.topNav = !!topNav;
    this.pill = !!slottedIllustration;
  }
  wrapperClasses() {
    let classes = 'pn-header-content-wrapper ';
    if (this.pill)
      classes += 'pn-header-illustration ';
    if (this.maxWidth)
      classes += 'pn-header-max-width ';
    if (this.centerIllustration)
      classes += 'pn-header-center-illustration ';
    return classes;
  }
  render() {
    return (h(Host, null,
      this.topNav && (h("div", { class: "page-nav" },
        h("slot", { name: "top-menu" }))),
      h("div", { class: this.wrapperClasses() },
        h("div", { class: "pn-header-content" },
          h("div", { class: "pn-header-left" },
            h("slot", { name: "breadcrumb" }),
            h("h1", null, this.heading),
            h("slot", null),
            h("slot", { name: "buttons" }),
            h("slot", { name: "bottom-menu" })),
          h("div", { class: "pn-header-right" },
            h("slot", { name: "illustration" }))))));
  }
  static get is() { return "pn-header"; }
  static get originalStyleUrls() { return {
    "$": ["pn-header.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-header.css"]
  }; }
  static get properties() { return {
    "heading": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "heading text"
      },
      "attribute": "heading",
      "reflect": false
    },
    "color": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Available colors: blue, coral, orange, gray and green"
      },
      "attribute": "color",
      "reflect": false,
      "defaultValue": "'blue'"
    },
    "maxWidth": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "max-width",
      "reflect": false,
      "defaultValue": "null"
    },
    "centerIllustration": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "By default, the illustration is vertically aligned to the bottom, setting this to true centers it"
      },
      "attribute": "center-illustration",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get elementRef() { return "hostElement"; }
  static get watchers() { return [{
      "propName": "color",
      "methodName": "colorHandler"
    }]; }
}
