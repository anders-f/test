// {
/* <template>
  <div
    @mouseover="hovered = true"
    @mouseleave="resetPalette"
    :style="{ 'background-color': activeColor.hex }"
    class="color"
  >
    <div class="color-info">
      <transition name="fade">
        <h1 v-show="hovered">{{ activeColor.name }}</h1>
      </transition>

      <transition-group name="slide" tag="div" class="choice-container">
        <button
          class="choice"
          v-show="hovered"
          key="hex"
          :style="{ '--i': 0 }"
          @click="copyColor(activeColor.hex)"
        >
          # COPY HEX
        </button>
        <button
          class="choice"
          v-show="hovered"
          key="var"
          :style="{ '--i': 1 }"
          @click="copyColor(activeColor.var)"
        >
          $ COPY VAR
        </button>
      </transition-group>
    </div>

    <ul class="palette">
      <li
        v-for="(color, i) in palette"
        @mouseover="selectedColor = color"
        @click="copyColor(color.var)"
        :key="i"
        :style="{ 'background-color': color.hex }"
      ></li>
    </ul>
  </div>
</template>

<script>
export default {
  props: {
    name: String,
    defaultColor: Object,
    palette: Array
  },
  data: () => ({
    hovered: false,
    valToCopy: "hex",
    value: "",
    selectedColor: null
  }),
  computed: {
    activeColor() {
      return this.selectedColor ? this.selectedColor : this.defaultColor;
    }
  },
  methods: {
    resetPalette() {
      this.hovered = false;
      this.selectedColor = null;
    },
    copyColor(val) {
      console.log(val);
      navigator.clipboard.writeText(val).then(
        function() {
          console.log("Async: Copying to clipboard was successful!");
        },
        function(err) {
          console.error("Async: Could not copy text: ", err);
        }
      );
    }
  }
};
</script> */
// }
import { Component, Prop } from '@stencil/core';
export class PnColor {
  render() {
    return `<h1>Color</h1>`;
  }
  static get is() { return "pn-color"; }
  static get originalStyleUrls() { return {
    "$": ["pn-color.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-color.css"]
  }; }
  static get properties() { return {
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "name",
      "reflect": false
    },
    "defaultColor": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "default-color",
      "reflect": false
    },
    "palette": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "Array<object>",
        "resolved": "object[]",
        "references": {
          "Array": {
            "location": "global"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      }
    }
  }; }
}
