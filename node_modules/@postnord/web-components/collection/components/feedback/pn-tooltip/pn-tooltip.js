import { Element, Component, Prop, h, State, Watch } from '@stencil/core';
export class PnTooltip {
  constructor() {
    this.warning = false;
    this.color = 'blue700';
    this.downwards = false;
    this.open = false;
    this.deltaX = '0';
  }
  componentWillLoad() {
    const appearances = ['warning', 'white'];
    this.color = appearances.includes(this.color) ? this.color : 'blue700';
  }
  componentDidLoad() {
    this.initialize();
    this.eventHandler();
  }
  initialize() {
    this.pnTooltipContent = this.hostElement.querySelector('.pn-tooltip-content');
  }
  openHandler() {
    if (this.open) {
      this.checkPosition();
      return;
    }
    this.setTransform();
  }
  eventHandler() {
    const openEvents = ['mouseover', 'focus'];
    const closeEvents = ['mouseleave', 'blur'];
    const eventListeners = ['click', ...openEvents, ...closeEvents];
    eventListeners.forEach((e) => {
      this.hostElement.querySelector('.pn-tooltip').addEventListener(e, (event) => {
        // Should toggle?
        if (event.type === 'click') {
          this.toggle();
          return;
        }
        // Should open?
        if (openEvents.includes(event.type)) {
          if (event.type === 'mouseover' && this.timeout)
            clearTimeout(this.timeout);
          this.open = true;
          return;
        }
        // Should close?
        if (closeEvents.includes(event.type)) {
          if (event.type === 'mouseleave') {
            this.timeout = setTimeout(() => (this.open = false), 800);
          }
          else {
            this.open = false;
          }
        }
      });
    });
  }
  setTransform() {
    this.pnTooltipContent.style.transform = `scale(${Number(this.open)}) translateX(-50%) translateX(${this.deltaX}px)`;
  }
  checkPosition() {
    this.pnTooltipContent.style.transition = 'none';
    this.pnTooltipContent.style.transform = 'scale(1) translateX(-50%)';
    this.downwards = false;
    requestAnimationFrame(() => {
      const { x, y, right } = this.pnTooltipContent.getBoundingClientRect();
      const extraMargin = 8;
      this.deltaX = '0';
      this.downwards = y < 0;
      this.pnTooltipContent.style.transform = '';
      if (x < 0)
        this.deltaX = `${x * -1 + extraMargin}`;
      if (right > window.innerWidth)
        this.deltaX = `${window.innerWidth - right - extraMargin}`;
      requestAnimationFrame(() => {
        this.pnTooltipContent.style.transition = '';
        this.setTransform();
      });
    });
  }
  getSymbol() {
    return this.warning ? 'alert-info-circle' : 'alert-question-circle';
  }
  toggle() {
    this.open = !this.open;
  }
  getClassNames() {
    let classNames = 'pn-tooltip ';
    if (this.color === 'white')
      classNames += 'tooltip-white ';
    if (this.downwards)
      classNames += 'pn-tooltip-downwards ';
    return classNames;
  }
  render() {
    return (h("button", { class: this.getClassNames(), "data-open": this.open },
      h("pn-icon", { symbol: this.getSymbol(), color: this.color }),
      h("div", { class: "pn-tooltip-content" },
        h("slot", null))));
  }
  static get is() { return "pn-tooltip"; }
  static get originalStyleUrls() { return {
    "$": ["pn-tooltip.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-tooltip.css"]
  }; }
  static get properties() { return {
    "warning": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "warning",
      "reflect": false,
      "defaultValue": "false"
    },
    "color": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "color",
      "reflect": false,
      "defaultValue": "'blue700'"
    }
  }; }
  static get states() { return {
    "downwards": {},
    "open": {},
    "deltaX": {}
  }; }
  static get elementRef() { return "hostElement"; }
  static get watchers() { return [{
      "propName": "open",
      "methodName": "openHandler"
    }]; }
}
