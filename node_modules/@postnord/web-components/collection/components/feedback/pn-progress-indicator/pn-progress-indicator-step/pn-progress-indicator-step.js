import { Component, Prop, Event, h, Host, State } from '@stencil/core';
export class PnProgressIndicatorStep {
  setActiveStepHandler() {
    if (this.done || this.activated) {
      this.setactivestep.emit(this.index);
    }
  }
  componentWillLoad() {
    this.checkStatus();
  }
  componentDidUpdate() {
    this.checkStatus();
  }
  checkStatus() {
    if (!this.done) {
      this.done = this.checked || this.activeStep > this.index;
    }
    if (this.active === 'yes') {
      this.activated = true;
    }
    else if (this.active === 'no') {
      this.activated = false;
      this.done = false;
    }
    else if (!this.activated) {
      this.activated = this.activeStep >= this.index;
    }
  }
  getClassNames() {
    let className = 'pn-progress-indicator-step';
    if (this.done || this.checked)
      className += ' done';
    if (this.activated)
      className += ' activated';
    if (this.activeStep === this.index)
      className += ' active';
    return className;
  }
  render() {
    return (h(Host, { class: this.getClassNames(), onClick: () => this.setActiveStepHandler() },
      h("div", { class: "progress-line" }),
      h("div", { class: "info-container" },
        h("slot", null),
        this.name),
      h("div", { class: "circle" }, this.done || this.checked ? (h("svg", { xmlns: "http://www.w3.org/2000/svg", "enable-background": "new 0 0 24 24", id: "checkmark", version: "1.0", viewBox: "0 0 24 24" },
        h("polyline", { class: "checkmark-path", fill: "none", points: "20,6 9,17 4,12", stroke: "#FFF", "stroke-miterlimit": "10", "stroke-width": "3" }))) : (''))));
  }
  static get is() { return "pn-progress-indicator-step"; }
  static get originalStyleUrls() { return {
    "$": ["pn-progress-indicator-step.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-progress-indicator-step.css"]
  }; }
  static get properties() { return {
    "activeStep": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "active-step",
      "reflect": false
    },
    "index": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "index",
      "reflect": false
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "name",
      "reflect": false
    },
    "checked": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "checked",
      "reflect": false
    },
    "active": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'yes' | 'no'",
        "resolved": "\"no\" | \"yes\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "active",
      "reflect": false
    }
  }; }
  static get states() { return {
    "activated": {},
    "done": {}
  }; }
  static get events() { return [{
      "method": "setactivestep",
      "name": "setactivestep",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
}
