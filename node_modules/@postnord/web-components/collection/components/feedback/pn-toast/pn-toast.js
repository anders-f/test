import { Component, Host, Prop, h, Element, Event, Watch, State } from '@stencil/core';
export class Pntoast {
  constructor() {
    /**  set left icon */
    this.icon = null;
    /** Show close button? */
    this.closable = true;
    /** Temporarily visible toast, the time of which is determined by the length of your message. Close button will be shown automatically if the time shown exceeds 6s. */
    this.temporary = false;
    /** If you want to control visibility with your own data you can bind to this attribute */
    this.hidden = false;
  }
  componentDidLoad() {
    if (this.temporary) {
      const content = this.hostElement.querySelector('.content');
      const readingTime = (content.textContent.split(' ').length / 4) * 1000; //Average read speed is 4wps.
      this.hidden = true;
      this.timer = readingTime > 3000 ? readingTime : 3000; //For short messages, default to 3s.
      if (this.manualDuration)
        this.timer = this.manualDuration; //Allow consumers to manually adjust duration if needed.
      this.closable = this.timer > 6000; //If duration is longer than 6s, allow the user to close manually.
    }
  }
  visibilityHandler() {
    if (!this.temporary)
      return;
    if (this.timeout && this.hidden) {
      clearTimeout(this.timeout);
      return;
    }
    this.timeout = setTimeout(() => {
      this.closeToast();
    }, this.timer);
  }
  closeToast() {
    this.hidden = true;
    this.close.emit();
  }
  getClassNames() {
    let classNames = 'pn-toast ';
    if (this.appearance)
      classNames += `pn-toast-${this.appearance} `;
    if (this.temporary)
      classNames += `pn-toast-temporary `;
    return classNames;
  }
  render() {
    return (h(Host, { "data-hidden": this.hidden, class: this.getClassNames() },
      this.icon && h("pn-icon", { symbol: this.icon }),
      h("div", { class: "content" },
        h("slot", null)),
      this.closable && (h("button", { onClick: () => this.closeToast(), type: "button", title: "close", "aria-label": "close" },
        h("pn-icon", { symbol: "close", small: true })))));
  }
  static get is() { return "pn-toast"; }
  static get originalStyleUrls() { return {
    "$": ["pn-toast.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-toast.css"]
  }; }
  static get properties() { return {
    "appearance": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "success or warning, defaults to blue"
      },
      "attribute": "appearance",
      "reflect": false
    },
    "icon": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "set left icon"
      },
      "attribute": "icon",
      "reflect": false,
      "defaultValue": "null"
    },
    "closable": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Show close button?"
      },
      "attribute": "closable",
      "reflect": false,
      "defaultValue": "true"
    },
    "temporary": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Temporarily visible toast, the time of which is determined by the length of your message. Close button will be shown automatically if the time shown exceeds 6s."
      },
      "attribute": "temporary",
      "reflect": false,
      "defaultValue": "false"
    },
    "manualDuration": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "If you want to set the duration of the visibility manually, time in milliseconds"
      },
      "attribute": "manual-duration",
      "reflect": false
    },
    "hidden": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "If you want to control visibility with your own data you can bind to this attribute"
      },
      "attribute": "hidden",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get states() { return {
    "timeout": {}
  }; }
  static get events() { return [{
      "method": "close",
      "name": "close",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Event fired when close button is pressed and when the temporary toast closes itself"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "hostElement"; }
  static get watchers() { return [{
      "propName": "hidden",
      "methodName": "visibilityHandler"
    }]; }
}
