import { Component, Element, Prop, h } from '@stencil/core';
export class PnTable {
  componentWillLoad() {
    const context = this;
    if (this.bordered && !this.striped) {
      const tr = Array.from(this.hostElement.querySelectorAll('tbody tr'));
      tr.forEach(function (row) {
        row.addEventListener('mousedown', function () {
          context.hostElement.classList.add('clicked');
        });
        row.addEventListener('mouseup', function () {
          context.hostElement.classList.remove('clicked');
        });
      });
    }
    if (this.bordered) {
      this.hostElement.classList.add('bordered');
    }
    else {
      this.hostElement.classList.remove('bordered');
    }
    if (this.striped) {
      this.hostElement.classList.add('striped');
    }
    else {
      this.hostElement.classList.remove('striped');
    }
  }
  render() {
    return (h("div", { class: "pn-table-container" },
      h("slot", null)));
  }
  static get is() { return "pn-table"; }
  static get originalStyleUrls() { return {
    "$": ["pn-table.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-table.css"]
  }; }
  static get properties() { return {
    "bordered": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Add border to table if set to true"
      },
      "attribute": "bordered",
      "reflect": false
    },
    "striped": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Make table striped if set to true"
      },
      "attribute": "striped",
      "reflect": false
    }
  }; }
  static get elementRef() { return "hostElement"; }
}
