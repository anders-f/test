import { Component, h, Host, Element, Event, Prop } from '@stencil/core';
export class PnaccordionItem {
  constructor() {
    /** The label/title of the accordion row, you can also pass a slot with the name "label" if you want to put custom content in there */
    this.label = null;
    this.rippleContainer = null;
  }
  componentWillLoad() {
    const slottedLabel = this.hostElement.querySelector('[slot="label"]');
    this.label = slottedLabel ? null : this.label;
  }
  componentDidLoad() {
    this.rippleContainer = this.hostElement.querySelector('.accordion-title');
  }
  toggleHandler() {
    this.togglerow.emit(this.hostElement);
  }
  clickHandler(e) {
    this.togglerow.emit(this.hostElement);
    const elRect = this.rippleContainer.getBoundingClientRect();
    const elLeft = elRect.left;
    const elTop = elRect.top;
    const rippleEl = document.createElement('div');
    const elSize = elRect.width > elRect.height ? elRect.width : elRect.height;
    rippleEl.classList.add('pn-ripple');
    this.rippleContainer.appendChild(rippleEl);
    rippleEl.style.height = `${elSize * 2}px`;
    rippleEl.style.width = `${elSize * 2}px`;
    rippleEl.style.left = e.clientX > 0 ? `${e.clientX - elLeft}px` : `50%`;
    rippleEl.style.top = e.clientY > 0 ? `${e.clientY - elTop}px` : `50%`;
    setTimeout(() => rippleEl.remove(), 400);
  }
  /*---------------------------------------/UTILS-------------------------------------------*/
  render() {
    return (h(Host, { "data-state": "collapsed" },
      h("div", { class: "accordion-content" },
        h("button", { type: "button", class: "accordion-title", onClick: (e) => this.clickHandler(e) },
          this.label ? this.label : '',
          h("slot", { name: "label" }),
          h("svg", { width: "18", height: "10", viewBox: "0 0 18 10", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
            h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M9.70711 9.70711C9.31658 10.0976 8.68342 10.0976 8.29289 9.70711L0.292892 1.70711C-0.0976315 1.31658 -0.0976315 0.683417 0.292892 0.292893C0.683418 -0.0976315 1.31658 -0.0976315 1.70711 0.292893L9 7.58579L16.2929 0.292893C16.6834 -0.0976315 17.3166 -0.0976315 17.7071 0.292893C18.0976 0.683417 18.0976 1.31658 17.7071 1.70711L9.70711 9.70711Z", fill: "#232228" }))),
        h("div", { class: "content" },
          h("slot", null)))));
  }
  static get is() { return "pn-accordion-row"; }
  static get originalStyleUrls() { return {
    "$": ["pn-accordion-row.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-accordion-row.css"]
  }; }
  static get properties() { return {
    "label": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The label/title of the accordion row, you can also pass a slot with the name \"label\" if you want to put custom content in there"
      },
      "attribute": "label",
      "reflect": false,
      "defaultValue": "null"
    }
  }; }
  static get events() { return [{
      "method": "togglerow",
      "name": "togglerow",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Ignore this event, it is only to be handled by the accordion parent component"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "hostElement"; }
}
