import { Component, h, Host, State, Element, Listen, forceUpdate } from '@stencil/core';
export class Pnaccordion {
  constructor() {
    this.accordionRows = Array.from(document.querySelectorAll('pn-accordion-row'));
  }
  componentDidLoad() {
    if (this.mo)
      this.mo.disconnect();
    const mo = (this.mo = new MutationObserver(() => {
      forceUpdate(this.hostElement);
    }));
    mo.observe(this.hostElement, { childList: true });
  }
  toggleHandler({ detail }) {
    const arr = this.accordionRows.slice(this.accordionRows.indexOf(detail) + 1);
    this.animate(() => this.toggleState(detail), [this.hostElement, ...arr]);
  }
  toggleState(el) {
    el.dataset.state === 'collapsed' ? (el.dataset.state = 'open') : (el.dataset.state = 'collapsed');
  }
  getRect(el) {
    return el.getBoundingClientRect();
  }
  animate(layoutChange, firstEls, getLastEls = () => firstEls) {
    const firstElsRects = Array.from(firstEls).map((el) => [el, this.getRect(el)]);
    requestAnimationFrame(() => {
      layoutChange();
      const lastElsRects = Array.from(getLastEls()).map((el) => [el, this.getRect(el)]);
      //@ts-ignore
      firstElsRects.forEach(([firstEl, firstRect], i) => {
        let [lastEl, lastRect] = lastElsRects[i];
        const dx = lastRect.x - firstRect.x;
        const dy = lastRect.y - firstRect.y;
        const dw = lastRect.width / firstRect.width;
        const dh = lastRect.height / firstRect.height;
        lastEl.dataset.flipping = true;
        lastEl.style.setProperty('--dx', dx);
        lastEl.style.setProperty('--dy', dy);
        lastEl.style.setProperty('--dw', dw);
        lastEl.style.setProperty('--dh', dh);
        requestAnimationFrame(() => delete lastEl.dataset.flipping);
      });
    });
  }
  render() {
    return (h(Host, null,
      h("div", { class: "accordion-bg" }),
      h("slot", null)));
  }
  static get is() { return "pn-accordion"; }
  static get originalStyleUrls() { return {
    "$": ["pn-accordion.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-accordion.css"]
  }; }
  static get states() { return {
    "accordionRows": {}
  }; }
  static get elementRef() { return "hostElement"; }
  static get listeners() { return [{
      "name": "togglerow",
      "method": "toggleHandler",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
