import { Component, h, State, Host, Prop } from '@stencil/core';
import { translations } from './translations';
export class PnOcrSearch {
  constructor() {
    // Supported languages are en and sv
    this.language = '';
    this.loading = false;
    this.error = false;
    this.ocrNumber = '';
    this.searchSuccess = false;
    this.invalidOcrNumber = false;
  }
  getTranslation(key, language) {
    var _a, _b;
    return ((_a = translations[key]) === null || _a === void 0 ? void 0 : _a[language]) || ((_b = translations[key]) === null || _b === void 0 ? void 0 : _b.sv) || key;
  }
  handleSearch(e) {
    // reset states
    this.invalidOcrNumber = false;
    this.searchSuccess = false;
    this.error = false;
    const validationResult = this.validateOcrNumber(e.detail);
    if (validationResult.error) {
      this.invalidOcrNumber = true;
      return;
    }
    // call endpoint
    this.ocrNumberSearch(validationResult.value);
  }
  async ocrNumberSearch(ocrNumber) {
    this.loading = true;
    await fetch(`https://portal.postnord.com/public-service/api/ocr?key=${ocrNumber}`)
      .then((response) => {
      return response.json();
    })
      .then((data) => {
      this.loading = false;
      this.ocrNumber = data.newOcr;
      this.searchSuccess = true;
    })
      .catch(() => {
      this.error = true;
      this.loading = false;
      this.searchSuccess = false;
    });
  }
  validateOcrNumber(value) {
    // Removes spaces and dashes
    const formatValue = value ? value.replace(/[ -]/gi, '') : '';
    // Looks for non-digits
    const ocrRegex = new RegExp(/\D+/);
    // Needs to be atleast 6 numbers
    const error = ocrRegex.test(formatValue) || formatValue.length !== 6;
    return { error, value: formatValue };
  }
  renderSearchResult() {
    if (!this.loading && !this.error && this.searchSuccess) {
      return (h("div", { class: "search-results" },
        this.getTranslation('SEARCH_SUCCESS', this.language),
        ": ",
        h("b", null, this.ocrNumber)));
    }
  }
  renderErrorMessage() {
    if (this.invalidOcrNumber && !this.loading) {
      return (h("div", { class: "invalid-text-container" },
        h("p", { class: "invalid-ocr" }, this.getTranslation('ERROR_INVALID_LICENSE_NUMBER', this.language))));
    }
    if (this.error && !this.loading) {
      return (h("div", { class: "error-text-container" },
        h("p", { class: "bold" }, this.getTranslation('ERROR_NO_RESULTS', this.language)),
        h("p", { class: "bold" }, this.getTranslation('ERROR_REASON_HEADER', this.language)),
        h("p", null, this.getTranslation('ERROR_REASON_ONE', this.language)),
        h("p", null, this.getTranslation('ERROR_REASON_TWO', this.language))));
    }
  }
  render() {
    return (h(Host, null,
      h("pn-search-field", { loading: this.loading, label: this.getTranslation('SEARCH_BUTTON', this.language), button: "", placeholder: this.getTranslation('PLACEHOLDER_TEXT', this.language), onSearch: (e) => this.handleSearch(e) }),
      this.renderSearchResult(),
      this.renderErrorMessage()));
  }
  static get is() { return "pn-ocr-search"; }
  static get originalStyleUrls() { return {
    "$": ["pn-ocr-search.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-ocr-search.css"]
  }; }
  static get properties() { return {
    "language": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "language",
      "reflect": false,
      "defaultValue": "''"
    }
  }; }
  static get states() { return {
    "loading": {},
    "error": {},
    "ocrNumber": {},
    "searchSuccess": {},
    "invalidOcrNumber": {}
  }; }
}
