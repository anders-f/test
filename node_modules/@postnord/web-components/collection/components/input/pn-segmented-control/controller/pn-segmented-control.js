import { Component, Element, Prop, h, Host, Listen, State, Watch, forceUpdate } from '@stencil/core';
export class PnSegmentedControl {
  constructor() {
    /** This is the name of the radio buttons inside the controller */
    this.name = 'example-id';
    this.showScrollArrows = false;
    this.showLeftArrow = false;
    this.showRightArrow = false;
    this.segments = [];
    this.scrollRegistered = false;
  }
  changeHandler({ target }) {
    this.value = target.value;
    this.selectSegment(target.closest('pn-segment'));
  }
  handleResize() {
    this.rerender();
  }
  valueHandler() {
    this.selectSegment(false);
  }
  selectSegment(el) {
    if (el) {
      this.currentSelection = el;
      this.rerender();
      return;
    }
    this.segments.forEach(segmentEl => {
      if (this.value === segmentEl.value) {
        this.currentSelection = segmentEl;
        segmentEl.setAttribute('selected', 'true');
      }
      else {
        segmentEl.removeAttribute('selected');
      }
    });
    this.rerender();
  }
  componentDidLoad() {
    if (this.mo)
      this.mo.disconnect();
    const mo = (this.mo = new MutationObserver(() => {
      forceUpdate(this.hostElement);
      this.setActiveSegment();
      this.rerender();
    }));
    mo.observe(this.hostElement, { childList: true });
    this.segmentContainer = this.hostElement.querySelector('.pn-segmented-control');
    this.activeBg = this.hostElement.querySelector('.pn-sc-active');
    this.hoverBg = this.hostElement.querySelector('.pn-sc-hover');
    this.hostElement.addEventListener('mouseover', ({ target }) => this.calcHighlight(target, this.hoverBg));
    this.setActiveSegment();
    this.rerender();
  }
  setActiveSegment() {
    this.segments = Array.from(this.hostElement.querySelectorAll('pn-segment'));
    this.segments.forEach(segmentEl => {
      if (this.value === segmentEl.value) {
        this.currentSelection = segmentEl;
        segmentEl.setAttribute('selected', 'true');
      }
      segmentEl.setAttribute('name', this.name);
    });
  }
  rerender() {
    requestAnimationFrame(() => {
      this.calcHighlight(this.currentSelection, this.activeBg);
      this.scrollArrowRender();
    });
  }
  /*---------------------------------------HIGHLIGHT LOGIC-------------------------------------------*/
  calcHighlight(el, bgEl) {
    requestAnimationFrame(() => {
      if (!(el === null || el === void 0 ? void 0 : el.closest('pn-segment')))
        return;
      const elRect = el.closest('pn-segment').getBoundingClientRect();
      const { left: hostLeft } = this.segmentContainer.getBoundingClientRect();
      const { left: segmentLeft, height: segmentHeight, width: segmentWidth } = elRect;
      const offset = segmentLeft - hostLeft + this.segmentContainer.scrollLeft;
      bgEl.style.setProperty('transform', `translate(${offset}px, -50%`);
      bgEl.style.setProperty('width', `${segmentWidth}px`);
      bgEl.style.setProperty('height', `${segmentHeight}px`);
    });
  }
  /*---------------------------------------/HIGHLIGHT LOGIC-------------------------------------------*/
  /*---------------------------------------SCROLL ARROW LOGIC-------------------------------------------*/
  scrollArrowRender() {
    if (this.segmentContainer.scrollWidth > this.segmentContainer.clientWidth) {
      this.showScrollArrows = true;
      if (!this.scrollRegistered) {
        this.segmentContainer.addEventListener('scroll', this.scrollArrowRender.bind(this));
        this.scrollRegistered = true;
      }
      const amountScrolled = Math.round(this.segmentContainer.scrollWidth - this.segmentContainer.scrollLeft);
      const distanceToEnd = amountScrolled - this.segmentContainer.clientWidth;
      const distanceToStart = this.segmentContainer.scrollLeft;
      this.showLeftArrow = distanceToStart > 0;
      this.showRightArrow = distanceToEnd > 0;
      return;
    }
    else {
      this.showLeftArrow = false;
      this.showRightArrow = false;
      this.showScrollArrows = false;
    }
  }
  scroll(val) {
    let amount = this.segmentContainer.scrollLeft + val;
    this.segmentContainer.scroll({
      left: amount,
      behavior: 'smooth',
    });
  }
  scrollArrowClasses() {
    let classNames = 'pn-sc-arrows ';
    if (this.showLeftArrow)
      classNames += 'pn-sc-left-visible ';
    if (this.showRightArrow)
      classNames += 'pn-sc-right-visible ';
    return classNames;
  }
  /*---------------------------------------/SCROLL ARROW LOGIC-------------------------------------------*/
  render() {
    return (h(Host, null,
      h("div", { class: "pn-segmented-control" },
        h("slot", null),
        h("div", { class: "pn-sc-bg pn-sc-active" }),
        h("div", { class: "pn-sc-bg pn-sc-hover" })),
      this.showScrollArrows && (h("div", { class: this.scrollArrowClasses() },
        h("button", { class: "pn-sc-arrow-left", onClick: () => this.scroll(-120), tabindex: "-1" },
          h("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
            h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M9.414 12l7.293-7.293-1.414-1.414L6.586 12l8.707 8.707 1.414-1.414L9.414 12z" }))),
        h("button", { class: "pn-sc-arrow-right", onClick: () => this.scroll(120), tabindex: "-1" },
          h("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
            h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M8.707 3.293L17.414 12l-8.707 8.707-1.414-1.414L14.586 12 7.293 4.707l1.414-1.414z" })))))));
  }
  static get is() { return "pn-segmented-control"; }
  static get originalStyleUrls() { return {
    "$": ["pn-segmented-control.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-segmented-control.css"]
  }; }
  static get properties() { return {
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "This is the name of the radio buttons inside the controller"
      },
      "attribute": "name",
      "reflect": false,
      "defaultValue": "'example-id'"
    },
    "value": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Currently active segment value"
      },
      "attribute": "value",
      "reflect": false
    }
  }; }
  static get states() { return {
    "currentSelection": {},
    "showScrollArrows": {},
    "showLeftArrow": {},
    "showRightArrow": {}
  }; }
  static get elementRef() { return "hostElement"; }
  static get watchers() { return [{
      "propName": "value",
      "methodName": "valueHandler"
    }]; }
  static get listeners() { return [{
      "name": "change",
      "method": "changeHandler",
      "target": undefined,
      "capture": false,
      "passive": false
    }, {
      "name": "resize",
      "method": "handleResize",
      "target": "window",
      "capture": false,
      "passive": true
    }]; }
}
