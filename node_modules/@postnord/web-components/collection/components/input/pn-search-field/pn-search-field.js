import { Component, Prop, h, Host, Event, Element, Listen } from '@stencil/core';
export class PnSearchField {
  constructor() {
    this.disabled = false;
    this.placeholder = null;
    this.inputid = null;
    this.name = null;
    this.autocomplete = null;
    this.list = null;
    this.value = null;
    /** Label for the button */
    this.label = null;
    /** Loading animation */
    this.loading = false;
    /** Button type, options are 'none' for no button, 'icon' for a labelless button with just a search icon and 'icon-inline' for a search button inside of the search field (this last option disables the clear field button) */
    this.button = '';
    /** Light instead of dark search button */
    this.light = false;
    this.ariaLabel = null;
  }
  inputHandler() {
    this.update.emit(this.value);
  }
  emitSearch(e) {
    if (e.type === 'click' || (e.type === 'keydown' && e.key === 'Enter')) {
      // We prevent the native search event since it's not supported in IE and FF, then we emit our own instead
      e.preventDefault();
      this.search.emit(this.value);
    }
  }
  setVal(e) {
    this.value = e.target.value;
  }
  clearInput() {
    this.value = '';
    this.update.emit(this.value);
    this.hostElement.querySelector('input').focus();
  }
  getClassNames() {
    let classNames = '';
    const buttonTypes = ['none', 'icon', 'icon-inline'];
    if (this.value)
      classNames += 'searching ';
    if (this.loading)
      classNames += 'loading ';
    if (buttonTypes.includes(this.button))
      classNames += `button-${this.button} `;
    return classNames;
  }
  render() {
    return (h(Host, { class: this.getClassNames() },
      h("div", { class: "input-container" },
        h("input", { type: "search", value: this.value, id: this.inputid, name: this.name, placeholder: this.placeholder, disabled: this.disabled, autocomplete: this.autocomplete, list: this.list, onKeyDown: e => this.emitSearch(e), onInput: e => this.setVal(e), "aria-label": this.ariaLabel }),
        h("div", { class: "button-container" },
          (this.button === 'none' || this.button === 'icon-inline') && (h("button", { class: "search", tabindex: this.button === 'icon-inline' ? '0' : '-1', onClick: e => this.emitSearch(e), "aria-label": "search", title: "search", type: "button" },
            h("pn-icon", { symbol: "search", color: "blue700" }))),
          this.button !== 'icon-inline' && (h("button", { class: "clear", "aria-label": "clear", title: "clear search field", tabindex: this.value && (!this.loading || this.button !== 'none') ? '0' : '-1', onClick: () => this.clearInput(), type: "button" },
            h("pn-icon", { symbol: "close-small", color: "blue700" }))),
          this.button === 'none' || (this.button === 'icon-inline' && h("pn-spinner", null)))),
      this.button !== 'none' && this.button !== 'icon-inline' && (h("pn-button", { onClick: e => this.emitSearch(e), loading: this.loading, icon: "search", appearance: this.light ? 'light' : 'dark', "icon-only": this.button === 'icon' }, this.label))));
  }
  static get is() { return "pn-search-field"; }
  static get originalStyleUrls() { return {
    "$": ["pn-search-field.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-search-field.css"]
  }; }
  static get properties() { return {
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "disabled",
      "reflect": false,
      "defaultValue": "false"
    },
    "placeholder": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "placeholder",
      "reflect": false,
      "defaultValue": "null"
    },
    "inputid": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "inputid",
      "reflect": false,
      "defaultValue": "null"
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "name",
      "reflect": false,
      "defaultValue": "null"
    },
    "autocomplete": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "autocomplete",
      "reflect": false,
      "defaultValue": "null"
    },
    "list": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "list",
      "reflect": false,
      "defaultValue": "null"
    },
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "value",
      "reflect": false,
      "defaultValue": "null"
    },
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Label for the button"
      },
      "attribute": "label",
      "reflect": false,
      "defaultValue": "null"
    },
    "loading": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Loading animation"
      },
      "attribute": "loading",
      "reflect": false,
      "defaultValue": "false"
    },
    "button": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Button type, options are 'none' for no button, 'icon' for a labelless button with just a search icon and 'icon-inline' for a search button inside of the search field (this last option disables the clear field button)"
      },
      "attribute": "button",
      "reflect": false,
      "defaultValue": "''"
    },
    "light": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Light instead of dark search button"
      },
      "attribute": "light",
      "reflect": false,
      "defaultValue": "false"
    },
    "ariaLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "aria-label",
      "reflect": false,
      "defaultValue": "null"
    }
  }; }
  static get events() { return [{
      "method": "search",
      "name": "search",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "This is emitted on search submission both with keyboard and mouse"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "update",
      "name": "update",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "custom event that handles both clearing and input to have the option of just binding listeners to one event instead of two."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "hostElement"; }
  static get listeners() { return [{
      "name": "input",
      "method": "inputHandler",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
