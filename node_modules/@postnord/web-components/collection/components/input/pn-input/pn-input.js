import { Component, Prop, h, Host, State } from '@stencil/core';
export class Pninput {
  constructor() {
    this.disabled = false;
    /** Error message; will take precedence over helpertext if both are provided (applies invalid styles automatically) */
    this.error = '';
    /** Error state without message (If you want to control the error messaging on your own) */
    this.invalid = false;
    /** Text message placed underneath the input field */
    this.helpertext = '';
    /** Text label placed above the input field */
    this.label = '';
    this.placeholder = '';
    this.inputid = `${Math.random()}`;
    this.name = '';
    this.required = null;
    this.type = 'text';
    this.autocomplete = null;
    this.valid = null;
    this.value = '';
    /** The maximum number of characters the user should be able to add, also adds a visible counter */
    this.maxlength = '';
    this.min = null;
    this.max = null;
    this.ariaLabel = null;
    this.showText = false;
  }
  getTextMessage() {
    if (this.error)
      return this.error;
    if (this.helpertext)
      return this.helpertext;
    return null;
  }
  toggleTextVisibility() {
    this.showText = !this.showText;
  }
  getInputType() {
    let types = ['text', 'password', 'url', 'tel', 'search', 'number', 'email'];
    return types.includes(this.type) && !this.showText ? this.type : 'text';
  }
  setVal(e) {
    var _a;
    const target = (_a = e.composedPath) === null || _a === void 0 ? void 0 : _a.call(e)[0];
    this.value = target.value;
  }
  getClassNames() {
    let classNames = 'pn-input ';
    if (this.error.length > 0 || this.invalid)
      classNames += 'error ';
    if (this.valid)
      classNames += 'valid ';
    if (this.type === 'password')
      classNames += 'password ';
    if (this.error || this.invalid || this.valid)
      classNames += 'icon ';
    return classNames;
  }
  render() {
    return (h(Host, { class: this.getClassNames() },
      (this.label || this.maxlength) && (h("div", { class: "label-container" },
        this.label && h("label", { htmlFor: this.inputid }, this.label),
        parseInt(this.maxlength) > 0 && (h("label", { class: "char-count", htmlFor: this.inputid }, `${this.value.length}/${this.maxlength}`)))),
      h("div", { class: "input-container" },
        h("input", { type: this.getInputType(), value: this.value, id: this.inputid, name: this.name, placeholder: this.placeholder, disabled: this.disabled, autocomplete: this.autocomplete, onInput: e => this.setVal(e), maxlength: this.maxlength, min: this.min, max: this.max, "aria-lavel": this.ariaLabel }),
        h("svg", { class: "pn-input-checkmark", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "none" },
          h("polyline", { class: "checkmark-path", points: "4,12 9,17 20,6", "stroke-width": "3" })),
        this.type === 'password' && !this.disabled && (h("button", { onClick: () => this.toggleTextVisibility() }, "Show"))),
      this.getTextMessage() && (h("small", null,
        this.error && h("pn-icon", { symbol: "alert-exclamation-circle", small: true, color: "warning" }),
        this.getTextMessage()))));
  }
  static get is() { return "pn-input"; }
  static get originalStyleUrls() { return {
    "$": ["pn-input.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-input.css"]
  }; }
  static get properties() { return {
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "disabled",
      "reflect": false,
      "defaultValue": "false"
    },
    "error": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Error message; will take precedence over helpertext if both are provided (applies invalid styles automatically)"
      },
      "attribute": "error",
      "reflect": false,
      "defaultValue": "''"
    },
    "invalid": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Error state without message (If you want to control the error messaging on your own)"
      },
      "attribute": "invalid",
      "reflect": false,
      "defaultValue": "false"
    },
    "helpertext": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Text message placed underneath the input field"
      },
      "attribute": "helpertext",
      "reflect": false,
      "defaultValue": "''"
    },
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Text label placed above the input field"
      },
      "attribute": "label",
      "reflect": false,
      "defaultValue": "''"
    },
    "placeholder": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "placeholder",
      "reflect": false,
      "defaultValue": "''"
    },
    "inputid": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "inputid",
      "reflect": false,
      "defaultValue": "`${Math.random()}`"
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "name",
      "reflect": false,
      "defaultValue": "''"
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "required",
      "reflect": false,
      "defaultValue": "null"
    },
    "type": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "type",
      "reflect": false,
      "defaultValue": "'text'"
    },
    "autocomplete": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "autocomplete",
      "reflect": false,
      "defaultValue": "null"
    },
    "valid": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "valid",
      "reflect": false,
      "defaultValue": "null"
    },
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "value",
      "reflect": false,
      "defaultValue": "''"
    },
    "maxlength": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The maximum number of characters the user should be able to add, also adds a visible counter"
      },
      "attribute": "maxlength",
      "reflect": false,
      "defaultValue": "''"
    },
    "min": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "min",
      "reflect": false,
      "defaultValue": "null"
    },
    "max": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "max",
      "reflect": false,
      "defaultValue": "null"
    },
    "ariaLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "aria-label",
      "reflect": false,
      "defaultValue": "null"
    }
  }; }
  static get states() { return {
    "showText": {}
  }; }
}
