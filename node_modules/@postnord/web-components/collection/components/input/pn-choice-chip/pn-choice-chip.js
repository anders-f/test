import { Component, Prop, h, Host, Element, Listen } from '@stencil/core';
export class Pnchoicechip {
  constructor() {
    this.disabled = false;
    this.checked = false;
    this.indeterminate = false;
  }
  handlechange() {
    this.indeterminate = false;
  }
  componentDidLoad() {
    this.checkAndSetIndeterminateState();
  }
  componentDidUpdate() {
    this.checkAndSetIndeterminateState();
  }
  checkAndSetIndeterminateState() {
    let checkbox = this.hostElement.querySelector(`#${this.choiceid}`);
    if (checkbox) {
      checkbox.indeterminate = this.indeterminate;
    }
  }
  render() {
    return (h(Host, null,
      h("input", { type: "checkbox", id: this.choiceid, value: this.value, name: this.name || this.choiceid, disabled: this.disabled, checked: this.checked }),
      h("label", { htmlFor: this.choiceid, class: "pn-choice-chip" },
        h("slot", null))));
  }
  static get is() { return "pn-choice-chip"; }
  static get originalStyleUrls() { return {
    "$": ["pn-choice-chip.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["pn-choice-chip.css"]
  }; }
  static get properties() { return {
    "value": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "This will be emitted on change and input"
      },
      "attribute": "value",
      "reflect": true
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The name of the checkbox group"
      },
      "attribute": "name",
      "reflect": false
    },
    "choiceid": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The string you put here will be what you'd make the ID of a native checkbox, you can't name props \"id\" because it's reserved\nso we went with the more descriptive name \"choice\", if you want to create labels for your checkbox, you will bind it to this ID"
      },
      "attribute": "choiceid",
      "reflect": false
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "disabled",
      "reflect": false,
      "defaultValue": "false"
    },
    "checked": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "checked",
      "reflect": false,
      "defaultValue": "false"
    },
    "indeterminate": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "indeterminate",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get elementRef() { return "hostElement"; }
  static get listeners() { return [{
      "name": "change",
      "method": "handlechange",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
