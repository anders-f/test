import { r as registerInstance, f as forceUpdate, h, a as Host, g as getElement } from './index-970cd8af.js';

const pnAccordionCss = "pn-accordion{display:block;position:relative}pn-accordion .accordion-bg{position:absolute;left:0;right:0;top:0;bottom:0;-webkit-transform-origin:top left;transform-origin:top left;-webkit-transition:-webkit-transform 0.3s cubic-bezier(0.7, 0, 0.3, 1);transition:-webkit-transform 0.3s cubic-bezier(0.7, 0, 0.3, 1);transition:transform 0.3s cubic-bezier(0.7, 0, 0.3, 1);transition:transform 0.3s cubic-bezier(0.7, 0, 0.3, 1), -webkit-transform 0.3s cubic-bezier(0.7, 0, 0.3, 1);pointer-events:none}[data-flipping]>pn-accordion .accordion-bg{-webkit-transition:none;transition:none;-webkit-transform:scaleY(calc(1 / var(--dh)));transform:scaleY(calc(1 / var(--dh)))}";

const Pnaccordion = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.accordionRows = Array.from(document.querySelectorAll('pn-accordion-row'));
  }
  componentDidLoad() {
    if (this.mo)
      this.mo.disconnect();
    const mo = (this.mo = new MutationObserver(() => {
      forceUpdate(this.hostElement);
    }));
    mo.observe(this.hostElement, { childList: true });
  }
  toggleHandler({ detail }) {
    const arr = this.accordionRows.slice(this.accordionRows.indexOf(detail) + 1);
    this.animate(() => this.toggleState(detail), [this.hostElement, ...arr]);
  }
  toggleState(el) {
    el.dataset.state === 'collapsed' ? (el.dataset.state = 'open') : (el.dataset.state = 'collapsed');
  }
  getRect(el) {
    return el.getBoundingClientRect();
  }
  animate(layoutChange, firstEls, getLastEls = () => firstEls) {
    const firstElsRects = Array.from(firstEls).map((el) => [el, this.getRect(el)]);
    requestAnimationFrame(() => {
      layoutChange();
      const lastElsRects = Array.from(getLastEls()).map((el) => [el, this.getRect(el)]);
      //@ts-ignore
      firstElsRects.forEach(([firstEl, firstRect], i) => {
        let [lastEl, lastRect] = lastElsRects[i];
        const dx = lastRect.x - firstRect.x;
        const dy = lastRect.y - firstRect.y;
        const dw = lastRect.width / firstRect.width;
        const dh = lastRect.height / firstRect.height;
        lastEl.dataset.flipping = true;
        lastEl.style.setProperty('--dx', dx);
        lastEl.style.setProperty('--dy', dy);
        lastEl.style.setProperty('--dw', dw);
        lastEl.style.setProperty('--dh', dh);
        requestAnimationFrame(() => delete lastEl.dataset.flipping);
      });
    });
  }
  render() {
    return (h(Host, null, h("div", { class: "accordion-bg" }), h("slot", null)));
  }
  get hostElement() { return getElement(this); }
};
Pnaccordion.style = pnAccordionCss;

export { Pnaccordion as pn_accordion };
