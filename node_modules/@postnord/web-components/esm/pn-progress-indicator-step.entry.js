import { r as registerInstance, c as createEvent, h, a as Host } from './index-970cd8af.js';

const pnProgressIndicatorStepCss = "pn-progress-indicator-step{display:-ms-flexbox;display:flex;-ms-flex:1 0 4em;flex:1 0 4em}pn-progress-indicator-step:first-child{-ms-flex:0 0 auto;flex:0 0 auto}pn-progress-indicator-step:first-child .progress-line{display:none}pn-progress-indicator-step:first-child .info-container{-webkit-transform:translateX(-50%);transform:translateX(-50%);left:50%}.pn-progress-indicator-step{position:relative;display:-ms-flexbox;display:flex;-ms-flex:1 0 4em;flex:1 0 4em;-webkit-tap-highlight-color:rgba(0, 0, 0, 0);-webkit-tap-highlight-color:transparent}.pn-progress-indicator-step .circle{width:1.5em;height:1.5em;padding:0.3rem;border-radius:50%;background-color:#f3f2f2;-webkit-transition:background-color 0.3s ease-in-out;transition:background-color 0.3s ease-in-out}.pn-progress-indicator-step .info-container{position:absolute;bottom:-2.5em;right:0;-webkit-transform:translateX(50%) translateX(-1.2rem);transform:translateX(50%) translateX(-1.2rem);white-space:nowrap;color:#f3f2f2;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-direction:column;flex-direction:column;-webkit-transition:color 0.3s ease-in-out;transition:color 0.3s ease-in-out;font-size:1em;font-weight:normal}.pn-progress-indicator-step .info-container svg{height:1.7em;width:1.7em;margin-bottom:0.1em}.pn-progress-indicator-step .info-container svg path,.pn-progress-indicator-step .info-container svg polygon{fill:#f3f2f2;-webkit-transition:fill 0.3s ease-in-out;transition:fill 0.3s ease-in-out}.pn-progress-indicator-step .progress-line{-ms-flex:1 1 auto;flex:1 1 auto;margin:auto 4px;height:0.8rem;background-color:#f3f2f2;position:relative;overflow:hidden;pointer-events:none;border-radius:10rem}.pn-progress-indicator-step .progress-line:after{content:\"\";position:absolute;top:0;left:0;height:0.8rem;width:100%;background-color:#005d92;-webkit-transition:-webkit-transform 0.4s cubic-bezier(0.55, 0, 0.1, 1) 0.3s;transition:-webkit-transform 0.4s cubic-bezier(0.55, 0, 0.1, 1) 0.3s;transition:transform 0.4s cubic-bezier(0.55, 0, 0.1, 1) 0.3s;transition:transform 0.4s cubic-bezier(0.55, 0, 0.1, 1) 0.3s, -webkit-transform 0.4s cubic-bezier(0.55, 0, 0.1, 1) 0.3s;-webkit-transform:translateX(-100%);transform:translateX(-100%)}.pn-progress-indicator-step.active .info-container{color:black}.pn-progress-indicator-step.active .info-container svg path{fill:#000}.pn-progress-indicator-step.active .info-container svg polygon{fill:#000}.pn-progress-indicator-step.activated{cursor:pointer}.pn-progress-indicator-step.done .progress-line:after,.pn-progress-indicator-step.active .progress-line:after{-webkit-transform:translateX(0);transform:translateX(0)}.pn-progress-indicator-step.done .circle,.pn-progress-indicator-step.active .circle{background-color:#005d92}.pn-progress-indicator-step.done .checkmark-path{stroke-linecap:round;stroke-dasharray:27;stroke-dashoffset:-23;-webkit-animation:dash 0.3s cubic-bezier(0.55, 0, 0.1, 1) both;animation:dash 0.3s cubic-bezier(0.55, 0, 0.1, 1) both}@-webkit-keyframes dash{to{stroke-dashoffset:0}}@keyframes dash{to{stroke-dashoffset:0}}";

const PnProgressIndicatorStep = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.setactivestep = createEvent(this, "setactivestep", 7);
  }
  setActiveStepHandler() {
    if (this.done || this.activated) {
      this.setactivestep.emit(this.index);
    }
  }
  componentWillLoad() {
    this.checkStatus();
  }
  componentDidUpdate() {
    this.checkStatus();
  }
  checkStatus() {
    if (!this.done) {
      this.done = this.checked || this.activeStep > this.index;
    }
    if (this.active === 'yes') {
      this.activated = true;
    }
    else if (this.active === 'no') {
      this.activated = false;
      this.done = false;
    }
    else if (!this.activated) {
      this.activated = this.activeStep >= this.index;
    }
  }
  getClassNames() {
    let className = 'pn-progress-indicator-step';
    if (this.done || this.checked)
      className += ' done';
    if (this.activated)
      className += ' activated';
    if (this.activeStep === this.index)
      className += ' active';
    return className;
  }
  render() {
    return (h(Host, { class: this.getClassNames(), onClick: () => this.setActiveStepHandler() }, h("div", { class: "progress-line" }), h("div", { class: "info-container" }, h("slot", null), this.name), h("div", { class: "circle" }, this.done || this.checked ? (h("svg", { xmlns: "http://www.w3.org/2000/svg", "enable-background": "new 0 0 24 24", id: "checkmark", version: "1.0", viewBox: "0 0 24 24" }, h("polyline", { class: "checkmark-path", fill: "none", points: "20,6 9,17 4,12", stroke: "#FFF", "stroke-miterlimit": "10", "stroke-width": "3" }))) : (''))));
  }
};
PnProgressIndicatorStep.style = pnProgressIndicatorStepCss;

export { PnProgressIndicatorStep as pn_progress_indicator_step };
