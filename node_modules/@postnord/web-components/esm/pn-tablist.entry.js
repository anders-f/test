import { r as registerInstance, c as createEvent, f as forceUpdate, h, a as Host, g as getElement } from './index-970cd8af.js';

const pnTablistCss = ".pn-tablist{width:100%;position:relative;border-bottom:0.1em solid #D4CECB;display:block}.pn-tablist>.tablist{overflow-y:hidden;overflow-x:auto;display:-ms-flexbox;display:flex;position:relative;-webkit-scroll-snap-type:x mandatory;-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory}.pn-tablist>.tablist::-webkit-scrollbar{display:none}.pn-tablist.stacked button.pn-tab{-ms-flex-direction:column;flex-direction:column}.pn-tablist.stacked button.pn-tab svg{margin:0 0 0.2em}.pn-tablist .scroll-arrows{position:absolute;top:50%;left:0;right:0;overflow:hidden;pointer-events:none;-webkit-transform:translateY(-50%);transform:translateY(-50%);display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:center;align-items:center;z-index:1;height:100%}.pn-tablist .scroll-arrows.left>.arrow-left{opacity:1;-webkit-transform:translate(0);transform:translate(0)}.pn-tablist .scroll-arrows.right>.arrow-right{opacity:1;-webkit-transform:translate(0);transform:translate(0)}.pn-tablist .scroll-arrows svg{width:1.5em}.pn-tablist .scroll-arrows svg path{fill:#005d92}.pn-tablist .scroll-arrows>*{-webkit-transition:opacity 0.2s, background 0.1s, -webkit-transform 0.2s, -webkit-box-shadow 0.1s;transition:opacity 0.2s, background 0.1s, -webkit-transform 0.2s, -webkit-box-shadow 0.1s;transition:transform 0.2s, opacity 0.2s, background 0.1s, box-shadow 0.1s;transition:transform 0.2s, opacity 0.2s, background 0.1s, box-shadow 0.1s, -webkit-transform 0.2s, -webkit-box-shadow 0.1s;pointer-events:all;width:2.5em;height:2.5em;background:white;border:none;opacity:0;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;outline:none;cursor:pointer}.pn-tablist .scroll-arrows>*.arrow-left{-webkit-transform:translateX(-100%);transform:translateX(-100%);border-radius:0 50% 50% 0;padding:0 0.3em 0 0;-webkit-box-shadow:0.2rem 0.3rem 0.2rem rgba(0, 0, 0, 0.4);box-shadow:0.2rem 0.3rem 0.2rem rgba(0, 0, 0, 0.4)}.pn-tablist .scroll-arrows>*.arrow-right{-webkit-transform:translateX(100%);transform:translateX(100%);border-radius:50% 0 0 50%;padding:0 0 0 0.3em;-webkit-box-shadow:-0.2rem 0.3rem 0.2rem rgba(0, 0, 0, 0.4);box-shadow:-0.2rem 0.3rem 0.2rem rgba(0, 0, 0, 0.4)}.pn-tablist .scroll-arrows>*:active{background:#f3f2f2}.pn-tablist .line{height:0.1em;width:100%;position:absolute;bottom:0}.pn-tablist .line .active-line,.pn-tablist .line .hovered-line{position:absolute;-webkit-transform-origin:left center;transform-origin:left center;width:100%;-webkit-transition:opacity 0.2s ease-in-out, -webkit-transform 0.3s cubic-bezier(0.29, 0.15, 0.24, 0.97);transition:opacity 0.2s ease-in-out, -webkit-transform 0.3s cubic-bezier(0.29, 0.15, 0.24, 0.97);transition:transform 0.3s cubic-bezier(0.29, 0.15, 0.24, 0.97), opacity 0.2s ease-in-out;transition:transform 0.3s cubic-bezier(0.29, 0.15, 0.24, 0.97), opacity 0.2s ease-in-out, -webkit-transform 0.3s cubic-bezier(0.29, 0.15, 0.24, 0.97)}.pn-tablist .line .active-line{background-color:#005d92;height:0.5em;bottom:-0.3em;z-index:1;opacity:0}.pn-tablist .line .hovered-line{background-color:#00a0d6;height:0.1em;opacity:0}";

const PnTablist = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.tabchange = createEvent(this, "tabchange", 7);
    /** The value of the tab that is currently active */
    this.value = null;
    /** Icons are stacked vertically instead of the default rows */
    this.stackedicons = false;
    this.showScrollArrows = false;
    this.isTabHovered = false;
    this.enterHandler = this.handleEnter.bind(this);
    this.leaveHandler = this.handleLeave.bind(this);
    // We need this to be stateful because we need it to update on scroll
    this.scrollArrowClasses = 'scroll-arrows ';
  }
  valueWatcher() {
    this.setValue();
  }
  setActiveTabHandler({ detail }) {
    this.tabElement = detail.el;
    requestAnimationFrame(() => this.activateTab());
    if (this.value === detail.val)
      return;
    this.value = detail.val;
    this.tabchange.emit(this.value);
  }
  handleResize() {
    this.rerender();
  }
  componentDidLoad() {
    this.rerender();
    this.setValue();
    this.registerEvents();
    if (this.mo)
      this.mo.disconnect();
    const mo = (this.mo = new MutationObserver(() => {
      forceUpdate(this.hostElement);
      this.rerender();
      this.registerEvents();
    }));
    mo.observe(this.hostElement, { childList: true });
  }
  setValue() {
    const children = Array.from(this.hostElement.querySelectorAll('pn-tab'));
    children.forEach((child) => {
      child.activeTab = this.value;
    });
  }
  rerender() {
    requestAnimationFrame(() => {
      this.scrollIndicators();
      this.calcActiveItemHighlight();
    });
  }
  activateTab() {
    const tabListCoords = this.hostElement.getBoundingClientRect();
    const activeTabCoords = this.tabElement.querySelector('button').getBoundingClientRect();
    const scrollOffset = this.hostElement.querySelector('.tablist').scrollLeft;
    const activeLine = this.hostElement.querySelector('.line .active-line');
    const coords = {
      scale: activeTabCoords.width / tabListCoords.width,
      offset: activeTabCoords.left + scrollOffset - tabListCoords.left,
    };
    activeLine.style.setProperty('transform', `translateX(${coords.offset}px) scaleX(${coords.scale})`);
    activeLine.style.setProperty('opacity', '1');
  }
  calcActiveItemHighlight() {
    this.isTabHovered = false;
    this.tabListEl = this.hostElement.querySelector('.tablist');
    this.hoveredLine = this.tabListEl.querySelector('.hovered-line');
  }
  handleEnter(e) {
    this.isTabHovered = true;
    const hoveredTabCoords = e.target.getBoundingClientRect();
    const tabListCoords = this.tabListEl.getBoundingClientRect();
    const scrollOffset = this.tabListEl.scrollLeft;
    const coords = {
      scale: hoveredTabCoords.width / tabListCoords.width,
      offset: hoveredTabCoords.left + scrollOffset - tabListCoords.left,
    };
    this.hoveredLine.style.setProperty('transform', `translateX(${coords.offset}px) scaleX(${coords.scale})`);
    this.hoveredLine.style.setProperty('opacity', '1');
  }
  handleLeave() {
    this.isTabHovered = false;
    setTimeout(() => {
      if (!this.isTabHovered)
        this.hoveredLine.style.setProperty('opacity', '0');
    }, 500);
  }
  registerEvents() {
    const preExistingTabs = this.availableTabs ? this.availableTabs : null;
    this.availableTabs = this.hostElement.querySelectorAll('button.pn-tab');
    if (preExistingTabs) {
      this.availableTabs.forEach((tab) => {
        tab.removeEventListener('mouseenter', this.enterHandler);
        tab.removeEventListener('focus', this.enterHandler);
        tab.removeEventListener('mouseleave', this.leaveHandler);
        tab.removeEventListener('blur', this.leaveHandler);
      });
    }
    this.availableTabs.forEach((tab) => {
      tab.addEventListener('mouseenter', this.enterHandler);
      tab.addEventListener('focus', this.enterHandler);
      tab.addEventListener('mouseleave', this.leaveHandler);
      tab.addEventListener('blur', this.leaveHandler);
    });
  }
  /*---------------------------------------/HOVER LOGIC-------------------------------------------*/
  /*-------------------------------------- SCROLL RELATED ---------------------------------------------**/
  scrollHandler() {
    if (this.showScrollArrows) {
      this.hostElement.querySelector('.tablist').addEventListener('scroll', () => this.scrollIndicators());
    }
    else {
      this.hostElement.querySelector('.tablist').removeEventListener('scroll', () => this.scrollIndicators());
    }
  }
  scrollIndicators() {
    const tabListWidth = this.hostElement.querySelector('.tablist').scrollWidth;
    const containerWidth = this.hostElement.clientWidth + 15;
    const scrollOffset = this.hostElement.querySelector('.tablist').scrollLeft;
    this.showScrollArrows = tabListWidth > containerWidth;
    this.scrollArrowClasses = 'scroll-arrows ';
    if (this.showScrollArrows) {
      if (scrollOffset > 0)
        this.scrollArrowClasses += 'left ';
      if (containerWidth + scrollOffset < tabListWidth)
        this.scrollArrowClasses += 'right ';
    }
  }
  scroll(val) {
    const tabList = this.hostElement.querySelector('.tablist');
    let amount = tabList.scrollLeft + val;
    // Options aren't supported in Safari, I think this might needed as a fallback but might be wrong.
    // tabList.scroll(amount, 0);
    tabList.scroll({
      left: amount,
      behavior: 'smooth',
    });
  }
  /*-------------------------------------- /SCROLL RELATED ---------------------------------------------**/
  getClassNames() {
    let classNames = 'pn-tablist';
    if (this.stackedicons)
      classNames += ' stacked';
    return classNames;
  }
  render() {
    return (h(Host, { role: "tablist", "aria-label": "tablist", class: this.getClassNames() }, h("div", { class: "tablist" }, h("slot", null), h("div", { class: "line" }, h("div", { class: "active-line" }), h("div", { class: "hovered-line" }))), this.showScrollArrows && (h("div", { class: this.scrollArrowClasses }, h("button", { class: "arrow-left", onClick: () => this.scroll(-120), tabindex: "-1" }, h("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M9.414 12l7.293-7.293-1.414-1.414L6.586 12l8.707 8.707 1.414-1.414L9.414 12z" }))), h("button", { class: "arrow-right", onClick: () => this.scroll(120), tabindex: "-1" }, h("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M8.707 3.293L17.414 12l-8.707 8.707-1.414-1.414L14.586 12 7.293 4.707l1.414-1.414z" })))))));
  }
  get hostElement() { return getElement(this); }
  static get watchers() { return {
    "value": ["valueWatcher"],
    "showScrollArrows": ["scrollHandler"]
  }; }
};
PnTablist.style = pnTablistCss;

export { PnTablist as pn_tablist };
