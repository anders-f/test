import { r as registerInstance, c as createEvent, h, g as getElement } from './index-970cd8af.js';
import { c as createDateOrNull, d as debounce } from './helpers-53c419b0.js';

const pnDatePickerOldCss = "pn-date-picker-old{display:inline-block}pn-date-picker-old.open-datepicker .datepicker-container .datepicker-input-container input,pn-date-picker-old.open-datepicker .datepicker-container .datepicker-input-container input:focus,pn-date-picker-old.open-datepicker .datepicker-container .datepicker-input-container input:hover{outline:none;border:0.1rem solid #005d92;-webkit-box-shadow:0 0 0 0.2rem #fff, 0 0 0 0.4rem #005d92;box-shadow:0 0 0 0.2rem #fff, 0 0 0 0.4rem #005d92}pn-date-picker-old.open-datepicker .datepicker-calendar-container{display:block}pn-date-picker-old.open-datepicker .datepicker-container .datepicker-input-container label,pn-date-picker-old.has-input .datepicker-container .datepicker-input-container label{top:0.1rem;-webkit-transform:translateY(0);transform:translateY(0);font-size:1.2rem}pn-date-picker-old.invalid .datepicker-container .datepicker-input-container input,pn-date-picker-old.invalid .datepicker-container .datepicker-input-container input:focus,pn-date-picker-old.invalid .datepicker-container .datepicker-input-container input:hover{border:0.1rem solid #a70707}pn-date-picker-old.invalid .datepicker-container .datepicker-input-container input:focus{-webkit-box-shadow:0 0 0 0.2rem #fff, 0 0 0 0.4rem #a70707;box-shadow:0 0 0 0.2rem #fff, 0 0 0 0.4rem #a70707}pn-date-picker-old .datepicker-container{position:relative}pn-date-picker-old .datepicker-container .datepicker-input-container{border:none;position:relative;width:100%;height:100%}pn-date-picker-old .datepicker-container .datepicker-input-container input,pn-date-picker-old .datepicker-container .datepicker-input-container div,pn-date-picker-old .datepicker-container .datepicker-input-container label,pn-date-picker-old .datepicker-container .datepicker-input-container span{font-family:inherit}pn-date-picker-old .datepicker-container .datepicker-input-container input{width:100%;-webkit-box-sizing:border-box;box-sizing:border-box;border:0.1rem solid #5e554a;background-color:#fff;padding:0.75em;color:#000000;font-size:1.6rem;font-weight:300;line-height:2rem;border-radius:0.8rem;-webkit-transition:border 0.15s, -webkit-box-shadow 0.15s;transition:border 0.15s, -webkit-box-shadow 0.15s;transition:box-shadow 0.15s, border 0.15s;transition:box-shadow 0.15s, border 0.15s, -webkit-box-shadow 0.15s}pn-date-picker-old .datepicker-container .datepicker-input-container input::-webkit-input-placeholder{color:#969087}pn-date-picker-old .datepicker-container .datepicker-input-container input::-moz-placeholder{color:#969087}pn-date-picker-old .datepicker-container .datepicker-input-container input:-ms-input-placeholder{color:#969087}pn-date-picker-old .datepicker-container .datepicker-input-container input::-ms-input-placeholder{color:#969087}pn-date-picker-old .datepicker-container .datepicker-input-container input::placeholder{color:#969087}pn-date-picker-old .datepicker-container .datepicker-input-container input{-webkit-appearance:none;-moz-appearance:none;appearance:none;-webkit-box-shadow:none;box-shadow:none;outline:none}pn-date-picker-old .datepicker-container .datepicker-input-container input:hover{border-color:#00a0d6}pn-date-picker-old .datepicker-container .datepicker-input-container input:disabled{background-color:#f3f2f2;border-color:#d3cecb;color:#969087}pn-date-picker-old .datepicker-container .datepicker-input-container>pn-icon,pn-date-picker-old .datepicker-container .datepicker-input-container>pn-spinner{position:absolute;right:1rem;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}pn-date-picker-old .datepicker-container .datepicker-input-container>pn-icon{cursor:pointer}pn-date-picker-old .datepicker-container .datepicker-input-container label{-webkit-transition:0.2s ease-in-out;transition:0.2s ease-in-out;font-size:1em;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);left:1em;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;-ms-flex-order:1;order:1;pointer-events:none;-webkit-font-smoothing:antialiased;z-index:1;position:absolute;color:#969087;font-weight:normal}pn-date-picker-old .datepicker-calendar-container{display:none;position:absolute;border-radius:0.8rem;top:120%;left:0;width:29.6rem;padding:1.6rem 1.6rem 0.735rem 1.6rem;border:0.1rem solid #d3cecb;-webkit-box-shadow:0 1.2px 3.6px rgba(0, 0, 0, 0.1), 0 6.4px 14.4px rgba(0, 0, 0, 0.13);box-shadow:0 1.2px 3.6px rgba(0, 0, 0, 0.1), 0 6.4px 14.4px rgba(0, 0, 0, 0.13);background-color:white;z-index:9999}pn-date-picker-old.position-top .datepicker-calendar-container{top:auto;bottom:calc(100% + 1.2rem)}pn-date-picker-old.position-left .datepicker-calendar-container{right:auto;left:0}pn-date-picker-old.position-right .datepicker-calendar-container{right:0;left:auto}";

const PnDatePickerOld = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.datechange = createEvent(this, "datechange", 7);
    this.monthchanged = createEvent(this, "monthchanged", 7);
    this.dateerror = createEvent(this, "dateerror", 7);
  }
  componentWillLoad() {
    this.isInit = true;
    this._updateClassStates();
    this.parseSelectedDateFromValue(this.value);
    this._initMinAndMaxDates();
    document.addEventListener('mousedown', this._onClickOutside.bind(this));
    this.isInit = false;
  }
  componentDidLoad() {
    this.calendarContainer = this.hostElement.querySelector('.datepicker-calendar');
    this.monthElement = this.hostElement.querySelector('.month-field');
  }
  componentWillUpdate() {
    this._updateClassStates();
    this._initMinAndMaxDates();
  }
  _initMinAndMaxDates() {
    this.minDate = createDateOrNull(this.min);
    this.maxDate = createDateOrNull(this.max);
  }
  dateChanged(event) {
    this.value = event.detail;
    this.closeDatepicker();
  }
  parseSelectedDateFromValue(value) {
    let selectedDate = createDateOrNull(value);
    let hasValidDate = selectedDate ? true : false;
    this.selectedDate = selectedDate || new Date();
    if (this.dispatchChangeOnBlur && this.isInit) {
      return;
    }
    this.hasValidDate = hasValidDate;
    if (value && this.emitErrors) {
      if (!hasValidDate) {
        this.dateerror.emit({
          code: 'INVALID_DATE',
          value: value,
        });
      }
      if (this.minDate && selectedDate < this.minDate) {
        this.dateerror.emit({
          code: 'MIN_DATE',
          value: value,
        });
      }
      if (this.maxDate && selectedDate > this.maxDate) {
        this.dateerror.emit({
          code: 'MAX_DATE',
          value: value,
        });
      }
    }
    if (hasValidDate) {
      if (value === '1970-01-01') {
        value = '';
      }
      else if (!/^\d{4}-\d{2}-\d{2}$/.test(value)) {
        const sDate = new Date(value);
        const sYear = sDate.getFullYear();
        const sMonth = this._addLeadingZero(sDate.getMonth() + 1);
        const sDay = this._addLeadingZero(sDate.getDate());
        value = `${sYear}-${sMonth}-${sDay}`;
      }
      this.datechange.emit(value);
      this.dateerror.emit(null);
    }
    else {
      if (this.emitErrors) {
        if (value) {
          this.dateerror.emit({
            code: 'INVALID_DATE',
            value: value,
          });
        }
        else {
          this.dateerror.emit(null);
        }
      }
    }
  }
  _updateClassStates() {
    if (this.invalid) {
      this.hostElement.classList.add('invalid');
    }
    else {
      this.hostElement.classList.remove('invalid');
    }
    if (this.disabled) {
      this.hostElement.classList.add('disabled');
    }
    else {
      this.hostElement.classList.remove('disabled');
    }
    if (this.disableInput) {
      this.hostElement.classList.add('disabled-input');
    }
    else {
      this.hostElement.classList.remove('disabled-input');
    }
    if (this.position) {
      // remove previous positions
      const positions = ['top', 'left', 'bttom', 'right'];
      Object.keys(positions).forEach((position) => this.hostElement.classList.remove(`position-${position}`));
      this.position
        .toLowerCase()
        .split(' ')
        .slice(0, 2)
        .forEach((position) => this.hostElement.classList.add(`position-${position}`));
    }
    this._updateHasInputClass();
  }
  openDatepicker() {
    if (!this.disabled) {
      this.isOpen = true;
      this.hostElement.classList.add('open-datepicker');
      this._updateHasInputClass();
      this.monthSelection = this.selectedDate.getMonth();
      this.yearSelection = this.selectedDate.getFullYear();
    }
  }
  closeDatepicker() {
    this.isOpen = false;
    this.hostElement.classList.remove('open-datepicker');
    this._updateHasInputClass();
  }
  _onClickOutside(event) {
    const clickedOutside = !this.hostElement.contains(event.target);
    if (this.isOpen && clickedOutside) {
      this.parseSelectedDateFromValue(this.value);
      this.closeDatepicker();
    }
  }
  _addLeadingZero(num) {
    return ('0' + num).slice(-2);
  }
  _updateHasInputClass() {
    if (this.value && this.value.length) {
      this.hostElement.classList.add('has-input');
    }
    else {
      this.hostElement.classList.remove('has-input');
    }
  }
  onMonthChanged(event) {
    this.monthchanged.emit(event.detail);
  }
  render() {
    const context = this;
    const trapKeyStrokes = debounce(function (event) {
      context.value = event.target.value;
    }, 400, false);
    const noInput = function (event) {
      event.preventDefault();
    };
    return (h("div", { class: "datepicker-container" }, h("div", { class: "datepicker-input-container" }, h("input", { type: "text", class: "date-input", value: this.value, onFocus: this.openDatepicker.bind(this), onKeyDown: this.disableInput ? noInput : trapKeyStrokes.bind(this), disabled: this.disabled }), h("pn-icon", { symbol: "calendar", onClick: this.openDatepicker.bind(this), color: this.disabled ? 'gray400' : 'black' }), h("label", null, this.label)), h("div", { class: "datepicker-calendar-container" }, h("pn-calendar", { value: this.value, min: this.min, max: this.max, language: this.language, "disable-days": this.disableDays, "disable-weekends": this.disableWeekends, "start-of-week": this.startOfWeek, onMonthchanged: this.onMonthChanged.bind(this) }))));
  }
  get hostElement() { return getElement(this); }
  static get watchers() { return {
    "value": ["parseSelectedDateFromValue"]
  }; }
};
PnDatePickerOld.style = pnDatePickerOldCss;

export { PnDatePickerOld as pn_date_picker_old };
