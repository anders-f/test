import { r as registerInstance, c as createEvent, h, a as Host } from './index-970cd8af.js';

const translations = {
  CLOSEST_DELIVERY_DATE: {
    da: 'Closest delivery date:',
    en: 'Closest delivery date:',
    fi: 'Closest delivery date:',
    no: 'Closest delivery date:',
    sv: 'Nästa utdelningsdag:',
  },
  NEXT_DELIVERY_DATE: {
    da: 'Next delivery date:',
    en: 'Next delivery date:',
    fi: 'Next delivery date:',
    no: 'Next delivery date:',
    sv: 'Kommande utdelningsdag:',
  },
  ZIP_CODE: {
    da: 'Zip code:',
    en: 'Zip code:',
    fi: 'Zip code:',
    no: 'Zip code:',
    sv: 'Postnummer:',
  },
  VALIDATION_ERROR_MESSAGE: {
    da: 'Zip code not valid',
    en: 'Zip code not valid',
    fi: 'Zip code not valid',
    no: 'Zip code not valid',
    sv: 'Postnumret är inte giltigt',
  },
  SERVER_ERROR_MESSAGE: {
    da: 'Could not find zip code',
    en: 'Could not find zip code',
    fi: 'Could not find zip code',
    no: 'Could not find zip code',
    sv: 'Kan inte hitta postnumret',
  },
  PLACEHOLDER_TEXT: {
    da: 'Search for a zip code',
    en: 'Search for a zip code',
    fi: 'Search for a zip code',
    no: 'Search for a zip code',
    sv: 'Sök på ett postnummer',
  },
};

const pnZipcodeSearchCss = "pn-zipcode-search{display:block;color:#5e554a}pn-zipcode-search .search-results{margin-top:1em;padding:0.5em}pn-zipcode-search .search-results>h3,pn-zipcode-search .search-results h2{font-weight:normal}pn-zipcode-search .text-row{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}pn-zipcode-search .text-row+.text-row{margin-top:1em}pn-zipcode-search .text-row>*+*{margin-left:0.25em}pn-zipcode-search .error-text{color:#a70707;padding:0.5em 1em}pn-zipcode-search pn-search-field{width:100%}@media screen and (max-width: 30em){pn-zipcode-search .text-row:nth-child(-n+2){-ms-flex-direction:column;flex-direction:column;-ms-flex-align:unset;align-items:unset}pn-zipcode-search .text-row:nth-child(-n+2) .delivery-date{margin-left:auto;margin-top:0.25em}}";

const PnZipCodeSearch = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.searchsuccessful = createEvent(this, "searchsuccessful", 7);
    /** marketwebLanguage property will be prioritized before the state language */
    this.marketwebLanguage = '';
    /** If property marketwebLanguage is empty it will fall back on the state language */
    this.language = 'sv';
    this.loading = false;
    this.error = false;
    this.errorMessage = '';
    this.showResult = false;
    this.zipCodeSearchResult = {
      delivery: '',
      upcoming: '',
      city: '',
      postalCode: '',
    };
  }
  componentWillLoad() {
    const topbar = window.pnTopbar;
    if (topbar) {
      this.init();
    }
    else {
      window.addEventListener('topbarLoaded', () => {
        this.init();
      });
    }
  }
  init() {
    const topbar = window.pnTopbar;
    if (topbar) {
      this.language = topbar.language;
      topbar.onChangeLanguage = (language) => {
        this.language = language;
      };
    }
  }
  isEmpty(input) {
    const isNullOrUndefined = !input;
    if (isNullOrUndefined) {
      return true;
    }
    const isEmptyStr = input.trim().length === 0;
    if (isEmptyStr) {
      return true;
    }
    else {
      return false;
    }
  }
  getTranslation(keyToMatch, languageToMatch) {
    // Loop through translations
    for (const [key, languages] of Object.entries(translations)) {
      if (key === keyToMatch.toUpperCase()) {
        const englishTranslation = translations[key].en;
        // Loop through languages
        for (const [language, translation] of Object.entries(languages)) {
          if (language === languageToMatch.toLowerCase()) {
            if (this.isEmpty(translation)) {
              return englishTranslation;
            }
            else {
              return translation;
            }
          }
        }
        // If no matching language, return the english translation as fallback
        return englishTranslation;
      }
    }
    return keyToMatch; // If no translation found, return the key as last fallback
  }
  handleSearch(e) {
    const validationResult = this.validateZipCode(e.detail);
    if (validationResult.error) {
      this.error = true;
      this.errorMessage = 'VALIDATION_ERROR_MESSAGE';
      return;
    }
    // call endpoint
    this.zipCodeSearch(validationResult.value);
  }
  async zipCodeSearch(zipCode) {
    this.loading = true;
    await fetch(`https://portal.postnord.com/api/sendoutarrival/closest?postalCode=${zipCode}`)
      .then((response) => {
      return response.json();
    })
      .then((data) => {
      this.error = false;
      this.loading = false;
      this.showResult = true;
      this.zipCodeSearchResult = data;
      this.searchsuccessful.emit(true);
    })
      .catch(() => {
      this.error = true;
      this.errorMessage = 'SERVER_ERROR_MESSAGE';
      this.loading = false;
      this.searchsuccessful.emit(false);
    });
  }
  validateZipCode(value) {
    // Removes spaces and dashes
    const formatValue = value ? value.replace(/[ -]/gi, '') : '';
    // Looks for non-digits
    const postalCodeRegex = new RegExp(/\D+/);
    const error = postalCodeRegex.test(formatValue) || formatValue.length !== 5;
    return { error, value: formatValue };
  }
  renderSearchResult() {
    if (!this.loading && !this.error && this.showResult) {
      return (h("div", { class: "search-results" }, h("div", { class: "text-row" }, h("h3", null, this.getTranslation('CLOSEST_DELIVERY_DATE', this.marketwebLanguage || this.language), " "), h("h2", { class: "delivery-date" }, this.zipCodeSearchResult.delivery)), h("div", { class: "text-row" }, h("h3", null, this.getTranslation('NEXT_DELIVERY_DATE', this.marketwebLanguage || this.language), " "), h("h2", { class: "delivery-date" }, this.zipCodeSearchResult.upcoming)), h("div", { class: "text-row" }, h("h3", null, this.getTranslation('ZIP_CODE', this.marketwebLanguage || this.language)), h("h2", null, " ", this.zipCodeSearchResult.postalCode)), h("h3", null, this.zipCodeSearchResult.city)));
    }
  }
  renderErrorMessage() {
    if (this.error && !this.loading) {
      return (h("p", { class: "error-text pn-tiny" }, this.getTranslation(this.errorMessage, this.marketwebLanguage || this.language)));
    }
  }
  render() {
    return (h(Host, null, h("pn-search-field", { loading: this.loading, button: "none", placeholder: this.getTranslation('PLACEHOLDER_TEXT', this.marketwebLanguage || this.language), onSearch: (e) => this.handleSearch(e) }), this.renderSearchResult(), this.renderErrorMessage()));
  }
};
PnZipCodeSearch.style = pnZipcodeSearchCss;

export { PnZipCodeSearch as pn_zipcode_search };
