import { r as registerInstance, c as createEvent, h, a as Host, g as getElement } from './index-970cd8af.js';

const translations = {
  MONTHS: {
    en: [
      'January',
      'February',
      'March',
      'April',
      'May',
      'June',
      'July',
      'August',
      'September',
      'October',
      'November',
      'December',
    ],
    sv: [
      'Januari',
      'Februari',
      'Mars',
      'April',
      'Maj',
      'Juni',
      'Juli',
      'Augusti',
      'September',
      'Oktober',
      'November',
      'December',
    ],
    da: [
      'Januar',
      'Februar',
      'Marts',
      'April',
      'Maj',
      'Juni',
      'Juli',
      'August',
      'September',
      'Oktober',
      'November',
      'December',
    ],
    fi: [
      'Tammikuu',
      'Helmikuu',
      'Maaliskuu',
      'Huhtikuu',
      'Toukokuu',
      'Kesäkuu',
      'Heinäkuu',
      'Elokuu',
      'Syyskuu',
      'Lokakuu',
      'Marraskuu',
      'Joulukuu',
    ],
    no: [
      'Januar',
      'Februar',
      'Mars',
      'April',
      'Mai',
      'Juni',
      'Juli',
      'August',
      'September',
      'Oktober',
      'November',
      'Desember',
    ],
  },
  WEEK: {
    en: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
    sv: ['Mån', 'Tis', 'Ons', 'Tor', 'Fre', 'Lör', 'Sön'],
    da: ['Man', 'Tir', 'Ons', 'Tor', 'Fre', 'Lør', 'Søn'],
    fi: ['Ma', 'Ti', 'Ke', 'To', 'Pe', 'La', 'Su'],
    no: ['Ma.', 'Ti.', 'On.', 'To.', 'Fr.', 'Lø.', 'Sø'],
  },
};

const pnDatePickerCss = "pn-date-picker{position:relative;display:inline-block}pn-date-picker .weekday{color:#5e554a;font-weight:500}pn-date-picker .calendar-wrapper{background:#ffffff;border-radius:0.5em;position:absolute;top:115%;width:100%;left:0;overflow:hidden;z-index:5;-webkit-box-shadow:0px 6.4000000954px 14.3999996185px 0px #00000021, 0px 1.2000000477px 3.5999999046px 0px #0000001a;box-shadow:0px 6.4000000954px 14.3999996185px 0px #00000021, 0px 1.2000000477px 3.5999999046px 0px #0000001a;visibility:hidden;pointer-events:none;-webkit-transition-property:visibility;transition-property:visibility;-webkit-transition-delay:0.2s;transition-delay:0.2s;-webkit-transition-duration:0s;transition-duration:0s}pn-date-picker .calendar-wrapper[data-open]{visibility:visible;pointer-events:auto;-webkit-transition-delay:0s;transition-delay:0s}pn-date-picker .calendar-wrapper[data-open] .calendar{max-height:min(30em, 80vh);-webkit-transition-delay:0s;transition-delay:0s}pn-date-picker .calendar{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;text-align:center;max-height:0;overflow:auto;-webkit-transition:max-height 0.2s cubic-bezier(0.7, 0, 0.3, 1);transition:max-height 0.2s cubic-bezier(0.7, 0, 0.3, 1);max-width:22em;margin:auto;}pn-date-picker .calendar::-webkit-scrollbar{background-color:#fff;width:0.75em}pn-date-picker .calendar::-webkit-scrollbar-track{background-color:#fff}pn-date-picker .calendar::-webkit-scrollbar-thumb{background-color:#005d92;border-radius:1em;border:0.25em solid #fff}pn-date-picker .calendar::-webkit-scrollbar-thumb:hover{background-color:#0d234b}pn-date-picker .calendar::-webkit-scrollbar-button{display:none}pn-date-picker [data-month]{padding-top:1.5em}pn-date-picker .pn-date-picker-month{font-weight:500}pn-date-picker .month{font-size:1em;display:grid;padding:0.5em;grid-template-columns:repeat(7, 1fr);grid-gap:0.5em 0;background:#fff;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}pn-date-picker .day{font-size:1em;background:none;aspect-ratio:1;border:none;outline:none;position:relative;cursor:pointer;-webkit-transition:background 0.15s, border-radius 0.15s;transition:background 0.15s, border-radius 0.15s;border-radius:50%;padding:0;}pn-date-picker .day>span.number{position:relative;padding:0.6em}pn-date-picker .day::before{content:\"\";position:absolute;top:0;right:0;bottom:0;left:0;margin:auto;-webkit-transition:inherit;transition:inherit}pn-date-picker .day[data-today]::after{content:\"\";position:absolute;width:0.4em;height:0.4em;bottom:10%;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%);border-radius:50%;background:#005d92}pn-date-picker .day[data-selected=start][data-today]::after,pn-date-picker .day[data-selected=end][data-today]::after,pn-date-picker .day[data-selected=single][data-today]::after{background:#e0f8ff}pn-date-picker .day[data-selected=start]::before,pn-date-picker .day[data-selected=end]::before,pn-date-picker .day[data-selected=single]::before{border-radius:50%;background-color:#005d92}pn-date-picker .day[data-selected=start]::before{border-top-right-radius:0;border-bottom-right-radius:0}pn-date-picker .day[data-selected=start],pn-date-picker .day[data-selected=end],pn-date-picker .day[data-selected=single]{color:white}pn-date-picker .day[data-selected=between]::before{background-color:#e0f8ff;border-radius:0}pn-date-picker .day[data-selected=end][data-selected=end]::before{border-top-left-radius:0;border-bottom-left-radius:0}pn-date-picker .day:focus,pn-date-picker .day:hover{background-color:#effbff}pn-date-picker .pn-date-input-container{background:#ffffff;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;gap:1em;width:100%;padding:0.5em 0.5em 0.5em 0.75em;border-radius:0.5em;border:0.1rem solid #969087;-webkit-transition:-webkit-box-shadow 0.15s;transition:-webkit-box-shadow 0.15s;transition:box-shadow 0.15s;transition:box-shadow 0.15s, -webkit-box-shadow 0.15s}pn-date-picker .pn-date-input-container:focus-within{-webkit-box-shadow:0 0 0 0.1em #fff, 0 0 0 0.2em #005d92;box-shadow:0 0 0 0.1em #fff, 0 0 0 0.2em #005d92}pn-date-picker .pn-date-input-container .divider{width:0.15em;height:1.15em;background:#005d92;border-radius:1em;-ms-flex:0 0 auto;flex:0 0 auto}pn-date-picker .pn-date-input-container pn-icon{-webkit-transition:-webkit-transform 0.15s cubic-bezier(0.7, 0, 0.3, 1);transition:-webkit-transform 0.15s cubic-bezier(0.7, 0, 0.3, 1);transition:transform 0.15s cubic-bezier(0.7, 0, 0.3, 1);transition:transform 0.15s cubic-bezier(0.7, 0, 0.3, 1), -webkit-transform 0.15s cubic-bezier(0.7, 0, 0.3, 1)}pn-date-picker .pn-date-input-container pn-icon.backwards{-webkit-transform:rotate(180deg);transform:rotate(180deg)}pn-date-picker .pn-date-input-container input{border:none;outline:none;padding:0;font-size:1em;width:100%;background:transparent;padding:0.15em 0;-webkit-transition:inherit;transition:inherit}pn-date-picker .pn-date-input-container input:first-of-type::-webkit-input-placeholder{text-align:right}pn-date-picker .pn-date-input-container input:first-of-type::-moz-placeholder{text-align:right}pn-date-picker .pn-date-input-container input:first-of-type:-ms-input-placeholder{text-align:right}pn-date-picker .pn-date-input-container input:first-of-type::-ms-input-placeholder{text-align:right}pn-date-picker .pn-date-input-container input:first-of-type::placeholder{text-align:right}pn-date-picker .pn-date-input-container input:last-of-type::-webkit-input-placeholder{text-align:left}pn-date-picker .pn-date-input-container input:last-of-type::-moz-placeholder{text-align:left}pn-date-picker .pn-date-input-container input:last-of-type:-ms-input-placeholder{text-align:left}pn-date-picker .pn-date-input-container input:last-of-type::-ms-input-placeholder{text-align:left}pn-date-picker .pn-date-input-container input:last-of-type::placeholder{text-align:left}pn-date-picker .pn-date-input-container button.pn-date-calendar{border:none;background:none;cursor:pointer;outline:none;-webkit-transition:background 0.15s, -webkit-box-shadow 0.15s;transition:background 0.15s, -webkit-box-shadow 0.15s;transition:background 0.15s, box-shadow 0.15s;transition:background 0.15s, box-shadow 0.15s, -webkit-box-shadow 0.15s;border-radius:50%;padding:0.2em}pn-date-picker .pn-date-input-container button.pn-date-calendar:hover{background:#e0f8ff}pn-date-picker .pn-date-input-container button.pn-date-calendar:focus{-webkit-box-shadow:0 0 0 0.1em #fff, 0 0 0 0.2em #005d92;box-shadow:0 0 0 0.1em #fff, 0 0 0 0.2em #005d92;background:#e0f8ff}pn-date-picker .active-selection [data-selected=single],pn-date-picker .active-selection [data-selected=between],pn-date-picker .active-selection [data-selected=end]{-webkit-animation:active-selection 0.8s infinite alternate;animation:active-selection 0.8s infinite alternate}@-webkit-keyframes active-selection{to{opacity:0.7}}@keyframes active-selection{to{opacity:0.7}}";

const PnDatePicker = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.dateselection = createEvent(this, "dateselection", 7);
    /** Manually set language; this will be inherited from the top-bar */
    this.language = 'en';
    /** Initialize with a pre-selected start date, optional */
    this.start = null;
    /** Initialize with a pre-selected end date, optional */
    this.end = null;
    /** earliest date possible, this will determine how many years back the date picker will show  */
    this.minDate = null;
    /** latest date possible, this will determine how many years forward the date picker will show */
    this.maxDate = null;
    /** Ranged date picker, two dates */
    this.range = false;
    this.disableWeekends = false;
    /** Individual dates you want to disable, separated by comma, for example: "YYYY-MM-DD, YYYY-MM-DD..." */
    this.disabledDates = null;
    /** Placeholder for the input field (this will be start date if you have a ranged date picker) */
    this.placeholder = '';
    /** Placeholder for end date */
    this.endPlaceholder = '';
    this.currentState = 'idle';
    this.week = [];
    this.months = [];
    this.startDate = null;
    this.endDate = null;
    this.open = false;
    this.activeSelectionState = false;
    this.selectionMade = false;
    this.years = [];
    this.today = new Date();
    this.shouldScroll = true;
    /* -----------------STATE MACHINE LOGIC------------------ */
    this.machine = {
      initial: 'idle',
      states: {
        idle: {
          on: {
            click: payload => {
              this.selectionMade = false;
              const { year, month, day } = payload;
              this.startDate = new Date(year, month, day);
              if (this.range) {
                this.endDate = new Date(year, month, day);
                this.activeSelectionState = true;
                return 'dragging';
              }
              this.makeSelection();
              return 'idle';
            },
          },
        },
        dragging: {
          on: {
            pointerover: payload => {
              const { year, month, day } = payload;
              const endDate = new Date(year, month, day);
              this.endDate = endDate !== this.startDate && !this.shouldDisable(year, month, day) ? endDate : null;
              return 'dragging';
            },
            click: () => {
              this.makeSelection();
              return 'idle';
            },
            pointercancel: 'idle',
          },
        },
      },
    };
    this.handleGlobalClick = this.clickHandler.bind(this);
  }
  dateSelectionHandler() {
    this.open = false;
  }
  send(payload, event) {
    const transition = this.machine.states[this.currentState].on[event.type];
    if (typeof transition === 'function') {
      this.currentState = transition(payload, event);
    }
    else if (transition) {
      this.currentState = transition;
    }
  }
  /* -----------------/STATE MACHINE LOGIC------------------ */
  /* -----------------LIFE CYCLE HOOKS------------------ */
  componentWillLoad() {
    this.setDateFromOutside();
    this.setLanguage();
    this.setYears();
  }
  /* -----------------/LIFE CYCLE HOOKS------------------ */
  /* -----------------UTILS------------------ */
  makeSelection() {
    if (!this.range && this.startDate) {
      this.dateselection.emit(this.formatDate(this.startDate));
      return;
    }
    if (!this.startDate || !this.endDate)
      return;
    const start = this.startDate > this.endDate ? this.endDate : this.startDate;
    const end = this.endDate > this.startDate ? this.endDate : this.startDate;
    this.activeSelectionState = false;
    this.selectionMade = true;
    this.dateselection.emit({ start: this.formatDate(start), end: this.formatDate(end) });
  }
  startHandler() {
    this.setDateFromOutside();
  }
  endHandler() {
    this.setDateFromOutside();
  }
  openHandler() {
    if (this.shouldScroll)
      this.scrollToMonth();
    if (this.open) {
      document.addEventListener('click', this.handleGlobalClick);
      return;
    }
    if (!this.selectionMade && this.range)
      this.endDate = null;
    document.removeEventListener('click', this.handleGlobalClick);
  }
  scrollToMonth() {
    this.shouldScroll = false;
    const date = this.startDate && this.startDate.getTime() ? this.startDate : new Date();
    const year = date.getFullYear();
    const month = this.months[date.getMonth()];
    const monthEl = this.hostElement.querySelector(`[data-year="${year}"] [data-month="${month}"]`);
    const calendarEl = this.hostElement.querySelector('.calendar');
    calendarEl.scrollTop = monthEl.offsetTop;
  }
  clickHandler(e) {
    var _a;
    const target = (_a = e.composedPath) === null || _a === void 0 ? void 0 : _a.call(e)[0];
    if (!this.hostElement.contains(target)) {
      this.open = false;
    }
  }
  setLanguage() {
    const topbar = window.pnTopbar;
    if (topbar) {
      this.language = topbar.language;
      topbar.onChangeLanguage = language => {
        this.language = language;
        this.months = translations.MONTHS[this.language];
        this.week = translations.WEEK[this.language];
      };
    }
    this.months = translations.MONTHS[this.language];
    this.week = translations.WEEK[this.language];
  }
  setDateFromOutside() {
    if (this.start && this.checkEnabledDate(this.start))
      this.startDate = new Date(this.start);
    if (this.end && this.checkEnabledDate(this.end))
      this.endDate = new Date(this.end);
    if (this.startDate)
      this.makeSelection();
  }
  checkEnabledDate(dateString) {
    if (!this.checkValidDate(dateString))
      return;
    const date = new Date(dateString);
    const year = date.getFullYear();
    const month = date.getMonth();
    const day = date.getDate();
    return !this.shouldDisable(year, month, day);
  }
  leadingZero(number) {
    return number < 10 ? `0${number}` : number;
  }
  formatDate(date) {
    if (!date)
      return '';
    const year = date.getFullYear();
    const month = this.leadingZero(date.getMonth() + 1);
    const day = this.leadingZero(date.getDate());
    return `${year}-${month}-${day}`;
  }
  checkValidDate(value) {
    const regEx = /^\d{4}-\d{2}-\d{2}$/;
    if (!value.match(regEx))
      return false;
    if (!new Date(value).getTime())
      return false;
    return true;
  }
  /* -----------------/UTILS------------------ */
  checkToday(year, month, day) {
    const today = this.formatDate(this.today);
    const date = this.formatDate(new Date(year, month, day));
    return today === date;
  }
  calculateSelected(year, month, day) {
    const checkDate = this.formatDate(new Date(year, month, day));
    const start = this.startDate > this.endDate ? this.formatDate(this.endDate) : this.formatDate(this.startDate);
    const end = this.endDate > this.startDate ? this.formatDate(this.endDate) : this.formatDate(this.startDate);
    // Check if there's only an end date
    if (!start && end && checkDate === end)
      return 'single';
    if (!this.startDate)
      return;
    // Check if there is only a start date
    if (start && !end && checkDate === start) {
      return 'single';
    }
    // Check if start and end are the same
    if (start && end && checkDate === start && checkDate === end) {
      return 'single';
    }
    if (checkDate > start && checkDate < end && this.endDate)
      return 'between';
    if (checkDate === start)
      return 'start';
    if (checkDate === end)
      return 'end';
    return null;
  }
  shouldDisable(year, month, day) {
    const date = new Date(year, month, day);
    if (this.minDate && this.maxDate) {
      const current = date.setHours(0, 0, 0, 0);
      const min = new Date(this.minDate).setHours(0, 0, 0, 0);
      const max = new Date(this.maxDate).setHours(0, 0, 0, 0);
      if (current < min || current > max)
        return true;
    }
    const isWeekend = this.isWeekend(date);
    if (this.disableWeekends && isWeekend)
      return true;
    if (this.disabledDates) {
      const disabledDates = this.disabledDates.split(',').map(date => date.trim());
      return disabledDates.includes(this.formatDate(date));
    }
    return false;
  }
  // For the disable weekends prop
  isWeekend(date) {
    const day = date.getDay();
    return day === 0 || day === 6;
  }
  /* -----------------/DISABLE CALCS------------------ */
  daysInMonth(month, year) {
    // Get the amount of days of a specific month and create an array of that length
    // so that we can loop over the days in the render function.
    return Array.from({ length: new Date(year, month + 1, 0).getDate() }, (_, i) => i + 1);
  }
  calcWeekdayStart(year, month, day) {
    // Sundays are indexed as 0 and our sunday column is 7.
    const getDay = new Date(year, month, day).getDay();
    const startDay = getDay === 0 ? 7 : getDay;
    return { 'grid-column-start': `${startDay}` };
  }
  setYears() {
    if (!this.minDate || !this.checkValidDate(this.minDate))
      this.minDate = `${this.today.getFullYear() - 1}-01-01`;
    if (!this.maxDate || !this.checkValidDate(this.maxDate))
      this.maxDate = `${this.today.getFullYear() + 1}-12-31`;
    const minYear = new Date(this.minDate).getFullYear();
    const maxYear = new Date(this.maxDate).getFullYear();
    for (let year = minYear; year <= maxYear; year++) {
      this.years.push(year);
    }
  }
  startInputHandler(e) {
    this.open = true;
    if (!this.checkValidDate(e.target.value))
      return null;
    const date = new Date(e.target.value);
    const year = date.getFullYear();
    const month = date.getMonth();
    const day = date.getDate();
    if (this.shouldDisable(year, month, day)) {
      this.startDate = null;
      return;
    }
    this.startDate = new Date(e.target.value);
    this.makeSelection();
  }
  endInputHandler(e) {
    this.open = true;
    if (!this.checkValidDate(e.target.value))
      return null;
    const date = new Date(e.target.value);
    const year = date.getFullYear();
    const month = date.getMonth();
    const day = date.getDate();
    if (this.shouldDisable(year, month, day)) {
      this.endDate = null;
      return;
    }
    this.endDate = new Date(e.target.value);
    this.makeSelection();
  }
  arrowDirection() {
    return this.endDate && this.startDate && this.endDate < this.startDate ? 'backwards' : '';
  }
  getCalendarClasses() {
    let classNames = 'calendar-wrapper ';
    if (this.activeSelectionState)
      classNames += 'active-selection ';
    return classNames;
  }
  render() {
    return (h(Host, null, h("div", { class: "pn-date-input-container" }, h("input", { type: "text", value: this.startDate ? this.formatDate(this.startDate) : null, onInput: e => this.startInputHandler(e), onFocusin: () => (this.open = true), placeholder: this.placeholder }), this.range && h("pn-icon", { class: this.arrowDirection(), symbol: "arrow-right", color: "blue700" }), this.range && (h("input", { type: "text", value: this.formatDate(this.endDate), onInput: e => this.endInputHandler(e), onFocusin: () => (this.open = true), placeholder: this.endPlaceholder })), h("button", { class: "pn-date-calendar", type: "button", onClick: () => (this.open = !this.open) }, h("pn-icon", { symbol: "calendar", color: "blue700" }))), h("div", { class: this.getCalendarClasses(), "data-open": this.open }, h("div", { class: "calendar" }, this.years.map(year => (h("div", { "data-year": year }, this.months.map((monthString, month) => (h("div", { "data-month": monthString }, h("h3", { class: "pn-date-picker-month" }, monthString, " - ", year), h("div", { class: "month" }, this.week.map(day => (h("h4", { class: "weekday pn-2xs" }, day))), this.daysInMonth(month, year).map(day => (h("button", { class: "day", style: this.calcWeekdayStart(year, month, day), "data-day": day, "data-today": this.checkToday(year, month, day), "data-selected": this.calculateSelected(year, month, day), onClick: event => this.send({ year, month, day }, event), onPointerOver: event => this.send({ year, month, day }, event), tabindex: "-1", disabled: this.shouldDisable(year, month, day), type: "button" }, h("span", { class: "number" }, day)))))))))))))));
  }
  get hostElement() { return getElement(this); }
  static get watchers() { return {
    "start": ["startHandler"],
    "end": ["endHandler"],
    "open": ["openHandler"]
  }; }
};
PnDatePicker.style = pnDatePickerCss;

export { PnDatePicker as pn_date_picker };
