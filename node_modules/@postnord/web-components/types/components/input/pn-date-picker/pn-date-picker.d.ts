import { EventEmitter } from '../../../stencil-public-runtime';
export declare class PnDatePicker {
  /** Manually set language; this will be inherited from the top-bar */
  language: string;
  /** Initialize with a pre-selected start date, optional */
  start: string;
  /** Initialize with a pre-selected end date, optional */
  end: string;
  /** earliest date possible, this will determine how many years back the date picker will show  */
  minDate: string;
  /** latest date possible, this will determine how many years forward the date picker will show */
  maxDate: string;
  /** Ranged date picker, two dates */
  range: boolean;
  disableWeekends: boolean;
  /** Individual dates you want to disable, separated by comma, for example: "YYYY-MM-DD, YYYY-MM-DD..." */
  disabledDates: string;
  /** Placeholder for the input field (this will be start date if you have a ranged date picker) */
  placeholder: string;
  /** Placeholder for end date */
  endPlaceholder: string;
  /** Emits on valid date selection */
  dateselection: EventEmitter;
  dateSelectionHandler(): void;
  currentState: string;
  week: Array<string>;
  months: Array<string>;
  startDate: Date;
  endDate: Date;
  open: boolean;
  activeSelectionState: boolean;
  selectionMade: boolean;
  years: Array<number>;
  today: Date;
  shouldScroll: boolean;
  hostElement: HTMLElement;
  machine: {
    initial: string;
    states: {
      idle: {
        on: {
          click: (payload: any) => "idle" | "dragging";
        };
      };
      dragging: {
        on: {
          pointerover: (payload: any) => string;
          click: () => string;
          pointercancel: string;
        };
      };
    };
  };
  send(payload: object, event: Event): void;
  componentWillLoad(): void;
  makeSelection(): void;
  startHandler(): void;
  endHandler(): void;
  openHandler(): void;
  scrollToMonth(): void;
  handleGlobalClick: any;
  clickHandler(e: any): void;
  setLanguage(): void;
  setDateFromOutside(): void;
  checkEnabledDate(dateString: any): boolean;
  leadingZero(number: any): any;
  formatDate(date: any): string;
  checkValidDate(value: any): boolean;
  checkToday(year: any, month: any, day: any): boolean;
  calculateSelected(year: any, month: any, day: any): "start" | "end" | "single" | "between";
  shouldDisable(year: any, month: any, day: any): boolean;
  isWeekend(date: any): boolean;
  daysInMonth(month: any, year: any): number[];
  calcWeekdayStart(year: any, month: any, day: any): {
    'grid-column-start': string;
  };
  setYears(): void;
  startInputHandler(e: any): any;
  endInputHandler(e: any): any;
  arrowDirection(): "" | "backwards";
  getCalendarClasses(): string;
  render(): any;
}
