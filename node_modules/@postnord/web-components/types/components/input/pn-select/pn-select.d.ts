import { EventEmitter } from '../../../stencil-public-runtime';
export declare class Pnselect {
  /** should this select contain a search field? */
  searchable: boolean;
  /** label placed above the select */
  label: string;
  /** this is what will be shown on load if no child is preselected */
  placeholder: string;
  /** this is the placeholder for the search field in the searchable select */
  searchPlaceholder: string;
  /** pass this if you want a checkbox on the parent, you'll have to pass the same prop to all of your children */
  checkbox: boolean;
  /** REQUIRED if you have a checkbox on your select */
  checkboxid: string;
  /** determines the status of the checkbox on the parent */
  checked: boolean;
  /** determines the status of the checkbox on the parent */
  indeterminate: boolean;
  /** error message (this will apply the invalid styles automatically) */
  error: string;
  /** Error state without error message (If you want to control the error messaging on your own) */
  invalid: boolean;
  value: string;
  hostElement: HTMLElement;
  internalValue: string;
  open: boolean;
  upwards: boolean;
  loaded: boolean;
  /** this will be emitted when the current selection changes */
  selectchange: EventEmitter;
  /** this will be emitted when the value of the parent checkbox changes */
  checkchange: EventEmitter;
  optionsList: HTMLDivElement;
  selectEl: HTMLDivElement;
  selectContent: HTMLDivElement;
  animatedEls: NodeList;
  options: Array<HTMLElement>;
  searchField: HTMLElement;
  parentCheckbox: HTMLElement;
  private mo?;
  componentWillLoad(): void;
  componentDidLoad(): void;
  initialize(): void;
  changeHandler(e: any): void;
  selectOptionHandler(e: any): void;
  stateHandler(): void;
  globalHandler(e: Event): void;
  handleGlobalEvents: any;
  elementInit(): void;
  setFocusToList(): void;
  focusNextOption(): void;
  focusPrevOption(): void;
  registerEventHandlers(): void;
  checkOrientation(): void;
  getRect(el: any): any;
  flip(layoutChange: any, firstEls: any, getLastEls?: () => any): void;
  manageOptionVisibility(hiddenItems: any, arr: any): void;
  hiddenOptions: any[];
  visibleOptions: any[];
  searchDebounce: any;
  filterSearch({ target }: {
    target: any;
  }): void;
  getClassNames(): string;
  render(): any;
}
