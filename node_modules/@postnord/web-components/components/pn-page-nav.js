import { proxyCustomElement, HTMLElement, createEvent, forceUpdate, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$2 } from './pn-icon2.js';

const pnPageNavCss = "pn-page-nav{display:block;position:relative;font-size:clamp(0.8em, 2vw, 1em);z-index:5}.pn-page-nav-wrapper{-webkit-transform:translateZ(0);transform:translateZ(0);font-size:inherit;max-width:100%;overflow:hidden;position:relative;display:-ms-inline-flexbox;display:inline-flex;border-radius:3em}.pn-page-nav{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;border-radius:3em;min-height:3em;background:#0d234b;border:0.1em solid #d3cecb;position:relative;overflow-x:auto;-webkit-scroll-snap-type:x mandatory;-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory}.pn-page-nav::-webkit-scrollbar{display:none}.pn-page-nav ul.pn-page-nav-items{display:-ms-flexbox;display:flex;list-style-type:none;padding:0.25em;margin:0;position:relative}.pn-page-nav-items>.pn-pn-bg{position:absolute;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);will-change:transform;left:0;border-radius:3em;-webkit-transition:width 0.25s cubic-bezier(0.29, 0.15, 0.24, 0.97), background 0.15s, opacity 0.15s, -webkit-transform 0.25s cubic-bezier(0.29, 0.15, 0.24, 0.97), -webkit-box-shadow 0.15s;transition:width 0.25s cubic-bezier(0.29, 0.15, 0.24, 0.97), background 0.15s, opacity 0.15s, -webkit-transform 0.25s cubic-bezier(0.29, 0.15, 0.24, 0.97), -webkit-box-shadow 0.15s;transition:width 0.25s cubic-bezier(0.29, 0.15, 0.24, 0.97), transform 0.25s cubic-bezier(0.29, 0.15, 0.24, 0.97), background 0.15s, opacity 0.15s, box-shadow 0.15s;transition:width 0.25s cubic-bezier(0.29, 0.15, 0.24, 0.97), transform 0.25s cubic-bezier(0.29, 0.15, 0.24, 0.97), background 0.15s, opacity 0.15s, box-shadow 0.15s, -webkit-transform 0.25s cubic-bezier(0.29, 0.15, 0.24, 0.97), -webkit-box-shadow 0.15s}.pn-page-nav-items>.pn-pn-bg.pn-pn-active{-webkit-box-shadow:0px 0.3px 0.9px rgba(0, 0, 0, 0.1), 0px 1.6px 3.6px rgba(0, 0, 0, 0.13);box-shadow:0px 0.3px 0.9px rgba(0, 0, 0, 0.1), 0px 1.6px 3.6px rgba(0, 0, 0, 0.13);background:#005d92;z-index:1}.pn-page-nav-items>.pn-pn-bg.pn-pn-hover{background:#ffffff;opacity:0;border:0.5rem solid transparent;z-index:0}.pn-page-nav-items>.pn-pn-bg.hidden{opacity:0}@media (hover: hover){ul.pn-page-nav-items:focus-within .pn-pn-hover,ul.pn-page-nav-items:hover .pn-pn-hover{opacity:0.12}}pn-page-nav .pn-pn-arrows{position:absolute;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);left:0;height:100%;width:100%;z-index:3;display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:center;align-items:center;pointer-events:none;padding:0.125em 0.1em}pn-page-nav .pn-pn-arrows svg{width:1.5em}pn-page-nav .pn-pn-arrows svg path{fill:#005d92}pn-page-nav .pn-pn-arrows>*{-webkit-transition:opacity 0.2s, background 0.1s, -webkit-transform 0.2s, -webkit-box-shadow 0.1s;transition:opacity 0.2s, background 0.1s, -webkit-transform 0.2s, -webkit-box-shadow 0.1s;transition:transform 0.2s, opacity 0.2s, background 0.1s, box-shadow 0.1s;transition:transform 0.2s, opacity 0.2s, background 0.1s, box-shadow 0.1s, -webkit-transform 0.2s, -webkit-box-shadow 0.1s;pointer-events:all;height:100%;aspect-ratio:1;background:white;border:none;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;outline:none;cursor:pointer;opacity:0;will-change:transform;-webkit-tap-highlight-color:transparent;border-radius:50%;border:0.2em solid #0d234b}pn-page-nav .pn-pn-arrows>*.pn-pn-arrow-left{-webkit-transform:translateX(-100%);transform:translateX(-100%)}pn-page-nav .pn-pn-arrows>*.pn-pn-arrow-right{-webkit-transform:translateX(100%);transform:translateX(100%)}@media screen and (max-width: 30em){pn-page-nav .pn-pn-arrows>*{border:none}pn-page-nav .pn-pn-arrows>* pn-icon svg{width:100%;height:2em;-webkit-animation:arrow 0.6s ease-in-out alternate infinite;animation:arrow 0.6s ease-in-out alternate infinite}pn-page-nav .pn-pn-arrows>* pn-icon svg path{fill:#ffffff}pn-page-nav .pn-pn-arrows>*.pn-pn-arrow-left{background:-webkit-gradient(linear, right top, left top, from(transparent), color-stop(60%, #0d234b));background:linear-gradient(to left, transparent, #0d234b 60%);border-radius:50% 0 0 50%}pn-page-nav .pn-pn-arrows>*.pn-pn-arrow-right{background:-webkit-gradient(linear, left top, right top, from(transparent), color-stop(40%, #0d234b));background:linear-gradient(to right, transparent, #0d234b 40%);border-radius:0 50% 50% 0}}pn-page-nav .pn-pn-arrows.pn-pn-left-visible .pn-pn-arrow-left,pn-page-nav .pn-pn-arrows.pn-pn-right-visible .pn-pn-arrow-right{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}@-webkit-keyframes arrow{to{-webkit-transform:translateX(10%);transform:translateX(10%)}}@keyframes arrow{to{-webkit-transform:translateX(10%);transform:translateX(10%)}}button.pn-page-nav-dropdown-button{font-size:1em;border-radius:3em 0 0 3em;background:#0d234b;color:#ffffff;padding:0.5em 1em 0.5em 1.5em;cursor:pointer;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;border:none;-webkit-transition:background 0.15s;transition:background 0.15s;position:relative;outline:none;height:100%;position:relative;margin:0 0.5em 0 0;font-weight:500}button.pn-page-nav-dropdown-button pn-icon{margin-left:0.5em}button.pn-page-nav-dropdown-button:hover,button.pn-page-nav-dropdown-button:focus{background:#263655}button.pn-page-nav-dropdown-button:focus{-webkit-box-shadow:inset 0 0 0 0.1em #005d92, inset 0 0 0 0.2em #d3cecb;box-shadow:inset 0 0 0 0.1em #005d92, inset 0 0 0 0.2em #d3cecb}button.pn-page-nav-dropdown-button.pn-page-nav-dropdown-active{background:#005d92}button.pn-page-nav-dropdown-button.pn-page-nav-dropdown-active:hover,button.pn-page-nav-dropdown-button.pn-page-nav-dropdown-active:focus{background:#0068a6}.pn-page-nav-divider{height:60%;background:#d3cecb;width:0.1em;position:absolute;right:0;-webkit-transform:translateX(50%);transform:translateX(50%)}ul.pn-page-nav-dropdown{position:absolute;left:0;top:110%;background:#0d234b;border-radius:0.5em;margin:0;padding:0;list-style-type:none;-webkit-box-shadow:0px 6.4000000954px 14.3999996185px 0px #00000021, 0px 1.2000000477px 3.5999999046px 0px #0000001a;box-shadow:0px 6.4000000954px 14.3999996185px 0px #00000021, 0px 1.2000000477px 3.5999999046px 0px #0000001a;font-size:inherit;display:none}ul.pn-page-nav-dropdown.pn-page-nav-dropdown-open{display:block}";

const PnPageNav$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.navchange = createEvent(this, "navchange", 7);
    this.showScrollArrows = false;
    this.showLeftArrow = false;
    this.showRightArrow = false;
    this.dropdownOpen = false;
    this.navItems = [];
    this.scrollRegistered = false;
    //TO DO ADD BUTTON TEXT
    /** Pass a string which will be the text on the dropdown button.
     *  Keep in mind that the dropdown items are passed as slots
     * (<pn-page-nav-dropdown-item />). */
    this.dropdown = false;
    this.dropdownLinks = [];
    this.dropdownActive = false;
    this.eventHandler = this.keyboardEvents.bind(this);
    this.globalEventHandler = this.globalEvents.bind(this);
  }
  changeHandler({ target }) {
    this.currentSelection = target.closest('pn-page-nav-item');
    if (target.value)
      this.value = target.value;
    if (this.dropdownOpen)
      this.dropdownOpen = false;
  }
  handleResize() {
    this.rerender();
  }
  valueHandler() {
    if (!this.value)
      this.currentSelection = null;
    this.calcHighlight(this.currentSelection, this.activeBg);
    this.navchange.emit(this.value);
    if (!this.dropdownActive)
      return;
    this.isDropdownItemActive();
  }
  /* ---------------------------------------LIFECYCLE--------------------------------------- */
  componentWillLoad() {
    if (!this.dropdown)
      return;
    this.dropdownEls = Array.from(this.hostElement.querySelectorAll('pn-page-nav-dropdown-item'));
    if (this.dropdownEls.length) {
      this.dropdownActive = true;
      this.initiateDropdown();
    }
  }
  componentDidLoad() {
    if (this.mo)
      this.mo.disconnect();
    const mo = (this.mo = new MutationObserver(() => {
      forceUpdate(this.hostElement);
      this.setActiveNavItem();
      this.rerender();
    }));
    mo.observe(this.hostElement, { childList: true });
    this.navWrapper = this.hostElement.querySelector('.pn-page-nav');
    this.navContainer = this.hostElement.querySelector('.pn-page-nav-items');
    this.activeBg = this.hostElement.querySelector('.pn-pn-active');
    this.hoverBg = this.hostElement.querySelector('.pn-pn-hover');
    this.hostElement.addEventListener('mouseover', ({ target }) => this.calcHighlight(target, this.hoverBg));
    this.setActiveNavItem();
    this.rerender();
  }
  /* ---------------------------------------/LIFECYCLE--------------------------------------- */
  setActiveNavItem() {
    this.navItems = Array.from(this.hostElement.querySelectorAll('pn-page-nav-item'));
    this.navItems.forEach(navItemEl => {
      if (this.value === navItemEl.value) {
        this.currentSelection = navItemEl;
      }
      else {
        navItemEl.removeAttribute('selected');
      }
      navItemEl
        .querySelector('a')
        .addEventListener('focus', ({ target }) => this.calcHighlight(target, this.hoverBg));
    });
    /* -----------------dropdown------------------ */
    if (!this.dropdownActive)
      return;
    this.dropdownItems = Array.from(this.hostElement.querySelectorAll('.pn-page-nav-dropdown-item'));
    //Check active state on each item
    this.isDropdownItemActive();
    //Store all values to check if dropdown button should be active
    this.dropdownLinks = this.dropdownItems.map((el, i) => {
      el.setAttribute('data-index', `${i}`);
      return el.closest('pn-page-nav-dropdown-item').value;
    });
    /* -----------------/dropdown------------------ */
  }
  rerender() {
    requestAnimationFrame(() => {
      this.calcHighlight(this.currentSelection, this.activeBg);
      this.scrollArrowRender();
    });
  }
  /*---------------------------------------HIGHLIGHT LOGIC-------------------------------------------*/
  calcHighlight(el, bgEl) {
    if (!(el === null || el === void 0 ? void 0 : el.closest('pn-page-nav-item'))) {
      bgEl === null || bgEl === void 0 ? void 0 : bgEl.classList.add('hidden');
      return;
    }
    if (bgEl)
      bgEl.classList.remove('hidden');
    const elRect = el.closest('pn-page-nav-item').getBoundingClientRect();
    const { left: hostLeft } = this.navContainer.getBoundingClientRect();
    const { left: navLeft, height: navHeight, width: navWidth } = elRect;
    const offset = navLeft - hostLeft + this.navContainer.scrollLeft;
    bgEl.style.setProperty('transform', `translate(${offset}px, -50%`);
    bgEl.style.setProperty('width', `${navWidth}px`);
    bgEl.style.setProperty('height', `${navHeight}px`);
  }
  /*---------------------------------------/HIGHLIGHT LOGIC-------------------------------------------*/
  /*---------------------------------------SCROLL ARROW LOGIC-------------------------------------------*/
  scrollArrowRender() {
    if (!this.navWrapper)
      return;
    if (this.navWrapper.scrollWidth > this.navWrapper.clientWidth) {
      this.showScrollArrows = true;
      if (!this.scrollRegistered) {
        this.navWrapper.addEventListener('scroll', this.scrollArrowRender.bind(this));
        this.scrollRegistered = true;
      }
      const amountScrolled = Math.round(this.navWrapper.scrollWidth - this.navWrapper.scrollLeft);
      const distanceToEnd = amountScrolled - this.navWrapper.clientWidth;
      const distanceToStart = this.navWrapper.scrollLeft;
      this.showLeftArrow = distanceToStart > 0;
      this.showRightArrow = distanceToEnd > 0;
      return;
    }
    else {
      this.showLeftArrow = false;
      this.showRightArrow = false;
      this.showScrollArrows = false;
    }
  }
  scroll(val) {
    let amount = this.navWrapper.scrollLeft + val;
    this.navWrapper.scroll({
      left: amount,
      behavior: 'smooth',
    });
  }
  scrollArrowClasses() {
    let classNames = 'pn-pn-arrows ';
    if (this.showLeftArrow)
      classNames += 'pn-pn-left-visible ';
    if (this.showRightArrow)
      classNames += 'pn-pn-right-visible ';
    return classNames;
  }
  initiateDropdown() {
    requestAnimationFrame(() => {
      this.dropdownButton = this.hostElement.querySelector('.pn-page-nav-dropdown-button');
      this.dropdownEl = this.hostElement.querySelector('.pn-page-nav-dropdown');
      this.addDropdownEventListeners();
    });
  }
  toggleDropdown() {
    this.dropdownOpen = !this.dropdownOpen;
  }
  isDropdownItemActive() {
    this.dropdownEls.forEach(el => {
      if (el.value && this.value === el.value) {
        el.setAttribute('active', true);
        return;
      }
      el.removeAttribute('active');
    });
  }
  dropdownHandler() {
    if (this.dropdownOpen) {
      requestAnimationFrame(() => {
        this.addGlobalEventListeners();
      });
      return;
    }
    this.removeGlobalEventListeners();
  }
  /* -----------------events------------------ */
  /* -----------------temporary events------------------ */
  addDropdownEventListeners() {
    this.hostElement.addEventListener('keydown', this.eventHandler);
    this.hostElement.addEventListener('click', this.eventHandler);
  }
  addGlobalEventListeners() {
    const root = this.hostElement.getRootNode();
    root.addEventListener('focusin', this.globalEventHandler);
    root.addEventListener('keydown', this.globalEventHandler);
    root.addEventListener('click', this.globalEventHandler);
  }
  removeGlobalEventListeners() {
    const root = this.hostElement.getRootNode();
    root.removeEventListener('focusin', this.globalEventHandler);
    root.removeEventListener('keydown', this.globalEventHandler);
    root.removeEventListener('click', this.globalEventHandler);
  }
  /* -----------------/temporary events------------------ */
  /* -----------------Open dropdown with keyboard------------------ */
  keyboardEvents(e) {
    const target = e.composedPath()[0];
    // As long as the dropdown is closed, we only want it to react to keyboard input
    // is the user has focus on the button
    if (e.type === 'keydown') {
      if (!this.dropdownOpen && target === this.dropdownButton && ['ArrowUp', 'ArrowDown'].includes(e.code)) {
        this.dropdownOpen = true;
        requestAnimationFrame(() => {
          this.focusNextDropdownItem();
        });
      }
    }
  }
  /* -----------------/Open dropdown with keyboard------------------ */
  globalEvents(e) {
    const target = e.composedPath()[0];
    if (e.type === 'keydown' && e.code === 'Escape') {
      this.dropdownOpen = false;
      this.dropdownButton.focus();
    }
    if (e.code === 'ArrowDown')
      this.focusNextDropdownItem();
    if (e.code === 'ArrowUp')
      this.focusPrevDropdownItem();
    if ((e.type === 'click' || e.type === 'focusin') && !this.dropdownEl.contains(target)) {
      this.dropdownOpen = false;
    }
  }
  /* -----------------/events------------------ */
  /* -----------------focusing------------------ */
  focusNextDropdownItem() {
    const { activeElement } = this.hostElement.getRootNode();
    if (!activeElement.classList.contains('pn-page-nav-dropdown-item')) {
      this.dropdownItems[0].focus();
      return;
    }
    // focus next item
    const index = parseInt(activeElement.getAttribute('data-index'));
    if (index < this.dropdownItems.length - 1) {
      this.dropdownItems[index + 1].focus();
      return;
    }
  }
  focusPrevDropdownItem() {
    const { activeElement } = this.hostElement.getRootNode();
    if (!activeElement.classList.contains('dropdown-item')) {
      this.dropdownItems[this.dropdownItems.length - 1].focus();
    }
    // focus previous item
    const index = parseInt(activeElement.getAttribute('data-index'));
    if (index > 0) {
      this.dropdownItems[index - 1].focus();
      return;
    }
    this.dropdownButton.focus();
  }
  /* -----------------/focusing------------------ */
  dropdownButtonClasses() {
    let classList = 'pn-page-nav-dropdown-button ';
    if (this.dropdownLinks.includes(this.value))
      classList += 'pn-page-nav-dropdown-active ';
    return classList;
  }
  dropdownClasses() {
    let classList = 'pn-page-nav-dropdown ';
    if (this.dropdownOpen)
      classList += 'pn-page-nav-dropdown-open ';
    return classList;
  }
  /* ---------------------------------------/DROPDOWN LOGIC--------------------------------------- */
  render() {
    return (h(Host, null, h("div", { class: "pn-page-nav-wrapper" }, h("nav", { class: "pn-page-nav" }, this.dropdownActive && (h("button", { type: "button", class: this.dropdownButtonClasses(), onClick: () => this.toggleDropdown(), "aria-controls": "page-nav-dropdown", "aria-expanded": `${this.dropdownOpen}` }, this.dropdown, h("pn-icon", { symbol: "angle-down", color: "white", small: true }), h("div", { class: "pn-page-nav-divider" }))), h("ul", { class: "pn-page-nav-items" }, h("slot", null), h("div", { class: "pn-pn-bg pn-pn-active" }), h("div", { class: "pn-pn-bg pn-pn-hover" }))), this.showScrollArrows && (h("div", { class: this.scrollArrowClasses() }, h("button", { class: "pn-pn-arrow-left", onClick: () => this.scroll(-120), tabindex: "-1" }, h("pn-icon", { symbol: "arrow-left", color: "white" })), h("button", { class: "pn-pn-arrow-right", onClick: () => this.scroll(120), tabindex: "-1" }, h("pn-icon", { symbol: "arrow-right", color: "blue700" }))))), this.dropdownActive && (h("ul", { class: this.dropdownClasses(), id: "page-nav-dropdown", "aria-hidden": `${!this.dropdownOpen}` }, h("slot", { name: "dropdown-item" })))));
  }
  get hostElement() { return this; }
  static get watchers() { return {
    "value": ["valueHandler"],
    "dropdownOpen": ["dropdownHandler"]
  }; }
  static get style() { return pnPageNavCss; }
}, [4, "pn-page-nav", {
    "value": [1025],
    "dropdown": [8],
    "currentSelection": [32],
    "showScrollArrows": [32],
    "showLeftArrow": [32],
    "showRightArrow": [32],
    "dropdownOpen": [32],
    "dropdownLinks": [32],
    "dropdownActive": [32]
  }, [[0, "itemselection", "changeHandler"], [9, "resize", "handleResize"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["pn-page-nav", "pn-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "pn-page-nav":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, PnPageNav$1);
      }
      break;
    case "pn-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const PnPageNav = PnPageNav$1;
const defineCustomElement = defineCustomElement$1;

export { PnPageNav, defineCustomElement };
