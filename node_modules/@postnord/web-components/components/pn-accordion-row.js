import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';

const pnAccordionRowCss = "pn-accordion-row{position:relative;color:black;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-webkit-transition:-webkit-transform 0.3s cubic-bezier(0.7, 0, 0.3, 1);transition:-webkit-transform 0.3s cubic-bezier(0.7, 0, 0.3, 1);transition:transform 0.3s cubic-bezier(0.7, 0, 0.3, 1);transition:transform 0.3s cubic-bezier(0.7, 0, 0.3, 1), -webkit-transform 0.3s cubic-bezier(0.7, 0, 0.3, 1)}pn-accordion-row+pn-accordion-row{border-top:0.1rem solid #D3CECB;margin-top:0.4rem}pn-accordion-row[data-flipping]{-webkit-transform:translateY(calc(-1px * var(--dy)));transform:translateY(calc(-1px * var(--dy)));-webkit-transition:none;transition:none}pn-accordion-row .accordion-title{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;z-index:0;width:100%;font-weight:400;padding:1em;-webkit-transition:background 0.2s, -webkit-box-shadow 0.1s cubic-bezier(0.7, 0, 0.3, 1);transition:background 0.2s, -webkit-box-shadow 0.1s cubic-bezier(0.7, 0, 0.3, 1);transition:background 0.2s, box-shadow 0.1s cubic-bezier(0.7, 0, 0.3, 1);transition:background 0.2s, box-shadow 0.1s cubic-bezier(0.7, 0, 0.3, 1), -webkit-box-shadow 0.1s cubic-bezier(0.7, 0, 0.3, 1);border-radius:0.8rem;overflow:hidden;position:relative;background:#ffffff;border:none;outline:none;cursor:pointer;font-size:1em;}pn-accordion-row .accordion-title:hover{background:#e0f8ff}pn-accordion-row .accordion-title:focus{-webkit-box-shadow:0 0 0 0.2rem white, 0 0 0 0.4rem #005d92;box-shadow:0 0 0 0.2rem white, 0 0 0 0.4rem #005d92}pn-accordion-row .accordion-title>svg{margin-left:auto;-webkit-transition:-webkit-transform 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.25s;transition:-webkit-transform 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.25s;transition:transform 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.25s;transition:transform 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.25s, -webkit-transform 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.25s}pn-accordion-row .accordion-title>svg path{fill:#005D92}pn-accordion-row .accordion-title .pn-ripple{-webkit-animation:ripple 0.4s cubic-bezier(0.7, 0, 0.3, 1) forwards;animation:ripple 0.4s cubic-bezier(0.7, 0, 0.3, 1) forwards;position:absolute;border-radius:50%;background:#005d92;-webkit-transform:translate(-50%, -50%) scale(0);transform:translate(-50%, -50%) scale(0);opacity:0.05;pointer-events:none}@-webkit-keyframes ripple{to{-webkit-transform:translate(-50%, -50%) scale(1);transform:translate(-50%, -50%) scale(1);opacity:0}}@keyframes ripple{to{-webkit-transform:translate(-50%, -50%) scale(1);transform:translate(-50%, -50%) scale(1);opacity:0}}pn-accordion-row .accordion-content{z-index:2;top:0;left:0;width:100%;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}pn-accordion-row .accordion-content .content{position:absolute;left:0;right:0;width:100%;top:100%;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;pointer-events:none;opacity:0;-webkit-transition:opacity 0.3s;transition:opacity 0.3s;padding:1em}pn-accordion-row[data-state=open] .accordion-content .content{position:relative;pointer-events:unset;opacity:1;-webkit-transition-delay:0.2s;transition-delay:0.2s}pn-accordion-row[data-state=open] .accordion-title svg{-webkit-transform:rotate(-180deg);transform:rotate(-180deg);-webkit-transition-delay:0s;transition-delay:0s}";

const PnaccordionItem = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.togglerow = createEvent(this, "togglerow", 7);
    /** The label/title of the accordion row, you can also pass a slot with the name "label" if you want to put custom content in there */
    this.label = null;
    this.rippleContainer = null;
  }
  componentWillLoad() {
    const slottedLabel = this.hostElement.querySelector('[slot="label"]');
    this.label = slottedLabel ? null : this.label;
  }
  componentDidLoad() {
    this.rippleContainer = this.hostElement.querySelector('.accordion-title');
  }
  toggleHandler() {
    this.togglerow.emit(this.hostElement);
  }
  clickHandler(e) {
    this.togglerow.emit(this.hostElement);
    const elRect = this.rippleContainer.getBoundingClientRect();
    const elLeft = elRect.left;
    const elTop = elRect.top;
    const rippleEl = document.createElement('div');
    const elSize = elRect.width > elRect.height ? elRect.width : elRect.height;
    rippleEl.classList.add('pn-ripple');
    this.rippleContainer.appendChild(rippleEl);
    rippleEl.style.height = `${elSize * 2}px`;
    rippleEl.style.width = `${elSize * 2}px`;
    rippleEl.style.left = e.clientX > 0 ? `${e.clientX - elLeft}px` : `50%`;
    rippleEl.style.top = e.clientY > 0 ? `${e.clientY - elTop}px` : `50%`;
    setTimeout(() => rippleEl.remove(), 400);
  }
  /*---------------------------------------/UTILS-------------------------------------------*/
  render() {
    return (h(Host, { "data-state": "collapsed" }, h("div", { class: "accordion-content" }, h("button", { type: "button", class: "accordion-title", onClick: (e) => this.clickHandler(e) }, this.label ? this.label : '', h("slot", { name: "label" }), h("svg", { width: "18", height: "10", viewBox: "0 0 18 10", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M9.70711 9.70711C9.31658 10.0976 8.68342 10.0976 8.29289 9.70711L0.292892 1.70711C-0.0976315 1.31658 -0.0976315 0.683417 0.292892 0.292893C0.683418 -0.0976315 1.31658 -0.0976315 1.70711 0.292893L9 7.58579L16.2929 0.292893C16.6834 -0.0976315 17.3166 -0.0976315 17.7071 0.292893C18.0976 0.683417 18.0976 1.31658 17.7071 1.70711L9.70711 9.70711Z", fill: "#232228" }))), h("div", { class: "content" }, h("slot", null)))));
  }
  get hostElement() { return this; }
  static get style() { return pnAccordionRowCss; }
}, [4, "pn-accordion-row", {
    "label": [1025]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["pn-accordion-row"];
  components.forEach(tagName => { switch (tagName) {
    case "pn-accordion-row":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, PnaccordionItem);
      }
      break;
  } });
}

const PnAccordionRow = PnaccordionItem;
const defineCustomElement = defineCustomElement$1;

export { PnAccordionRow, defineCustomElement };
