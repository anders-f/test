import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';

const pnProgressIndicatorCss = ".pn-progress-indicator{display:-ms-flexbox;display:flex;padding:2.8em 1em 0}";

const PnProgressIndicator$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.progresschange = createEvent(this, "progresschange", 7);
    /** Takes the index of the active step */
    this.activeStep = 0;
  }
  setActiveStepHandler({ detail }) {
    this.activeStep = detail;
    this.progresschange.emit(this.activeStep);
  }
  componentWillLoad() {
    this.passPropsToChildren();
  }
  componentDidUpdate() {
    this.passPropsToChildren();
  }
  passPropsToChildren() {
    let children = Array.from(this.hostElement.querySelectorAll('pn-progress-indicator-step'));
    children.forEach((child, i) => {
      child.activeStep = this.activeStep;
      child.index = i;
    });
  }
  render() {
    return (h("div", { class: "pn-progress-indicator" }, h("slot", null)));
  }
  get hostElement() { return this; }
  static get style() { return pnProgressIndicatorCss; }
}, [4, "pn-progress-indicator", {
    "activeStep": [1026, "active-step"]
  }, [[0, "setactivestep", "setActiveStepHandler"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["pn-progress-indicator"];
  components.forEach(tagName => { switch (tagName) {
    case "pn-progress-indicator":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, PnProgressIndicator$1);
      }
      break;
  } });
}

const PnProgressIndicator = PnProgressIndicator$1;
const defineCustomElement = defineCustomElement$1;

export { PnProgressIndicator, defineCustomElement };
