import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$2 } from './pn-icon2.js';
import { d as defineCustomElement$1 } from './pn-spinner2.js';

const pnButtonCss = "pn-button{display:inline-block}pn-button button,pn-button a{color:#fff;cursor:pointer;padding:0.75em 1.2em;width:100%;border:none;border-radius:3em;outline:none;position:relative;font-size:1em;min-height:3em;min-width:5.5em;font-weight:500;background:transparent;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;-webkit-transition:color 0.3s;transition:color 0.3s;-webkit-tap-highlight-color:transparent;}pn-button button pn-icon,pn-button a pn-icon{-ms-flex-negative:0;flex-shrink:0;margin:0 0 0 0.5em}pn-button button pn-icon svg path,pn-button a pn-icon svg path{fill:#fff;-webkit-transition:fill 0.3s;transition:fill 0.3s}pn-button button .pn-button-content,pn-button a .pn-button-content{z-index:2;-webkit-transition:opacity 0.1s, -webkit-transform 0.2s;transition:opacity 0.1s, -webkit-transform 0.2s;transition:opacity 0.1s, transform 0.2s;transition:opacity 0.1s, transform 0.2s, -webkit-transform 0.2s;-webkit-transition-delay:0.2s;transition-delay:0.2s;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center}pn-button button .pn-button-bg,pn-button a .pn-button-bg{position:absolute;width:100%;height:100%;top:0;left:50%;border-radius:3em;border:0.065em solid transparent;background:#005d92;-webkit-transform:translateX(-50%);transform:translateX(-50%);-webkit-transition:width 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.2s, background 0.1s, -webkit-box-shadow 0.1s;transition:width 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.2s, background 0.1s, -webkit-box-shadow 0.1s;transition:width 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.2s, background 0.1s, box-shadow 0.1s;transition:width 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.2s, background 0.1s, box-shadow 0.1s, -webkit-box-shadow 0.1s;overflow:hidden}pn-button button .pn-button-bg::after,pn-button a .pn-button-bg::after{content:\"\";position:absolute;will-change:transform;-webkit-transition:-webkit-transform 0.2s cubic-bezier(0.7, 0, 0.3, 1);transition:-webkit-transform 0.2s cubic-bezier(0.7, 0, 0.3, 1);transition:transform 0.2s cubic-bezier(0.7, 0, 0.3, 1);transition:transform 0.2s cubic-bezier(0.7, 0, 0.3, 1), -webkit-transform 0.2s cubic-bezier(0.7, 0, 0.3, 1);width:100%;height:100%;background:#0d234b;border-radius:inherit;left:0;-webkit-transform:translateX(-103%);transform:translateX(-103%);opacity:0.5}pn-button button.pn-button-light,pn-button a.pn-button-light{color:#005d92}pn-button button.pn-button-light pn-icon svg path,pn-button a.pn-button-light pn-icon svg path{fill:#005d92}pn-button button.pn-button-light pn-spinner .circle,pn-button a.pn-button-light pn-spinner .circle{stroke:#005d92}pn-button button.pn-button-light pn-spinner .dot,pn-button a.pn-button-light pn-spinner .dot{fill:#005d92}pn-button button.pn-button-light .pn-button-bg,pn-button a.pn-button-light .pn-button-bg{border:0.065em solid #005d92;background:#fff}pn-button button.pn-button-light .pn-button-bg:after,pn-button a.pn-button-light .pn-button-bg:after{background:#e0f8ff;opacity:1}pn-button button.pn-button-light .pn-button-bg .pn-ripple,pn-button a.pn-button-light .pn-button-bg .pn-ripple{background:#005d92}pn-button button.pn-button-warning,pn-button a.pn-button-warning{color:#a70707}pn-button button.pn-button-warning pn-icon svg path,pn-button a.pn-button-warning pn-icon svg path{fill:#a70707}pn-button button.pn-button-warning pn-spinner .circle,pn-button a.pn-button-warning pn-spinner .circle{stroke:#a70707}pn-button button.pn-button-warning pn-spinner .dot,pn-button a.pn-button-warning pn-spinner .dot{fill:#a70707}pn-button button.pn-button-warning .pn-button-bg,pn-button a.pn-button-warning .pn-button-bg{border:0.065em solid #a70707;background:#fdefee}pn-button button.pn-button-warning .pn-button-bg:after,pn-button a.pn-button-warning .pn-button-bg:after{background:#a70707;opacity:1}pn-button button.pn-button-variation-borderless .pn-button-bg,pn-button a.pn-button-variation-borderless .pn-button-bg{border:0.065em solid transparent;background:transparent}pn-button button.pn-button-variation-borderless.pn-button-dark .pn-button-bg:after,pn-button a.pn-button-variation-borderless.pn-button-dark .pn-button-bg:after{background:white;opacity:0.1}pn-button button.pn-button-variation-outlined .pn-button-bg,pn-button a.pn-button-variation-outlined .pn-button-bg{background:transparent}pn-button button.pn-button-variation-outlined.pn-button-dark .pn-button-bg,pn-button a.pn-button-variation-outlined.pn-button-dark .pn-button-bg{border-color:#ffffff}pn-button button.pn-button-variation-outlined.pn-button-dark .pn-button-bg::after,pn-button a.pn-button-variation-outlined.pn-button-dark .pn-button-bg::after{background:white;opacity:0.1}pn-button button.pn-button-variation-outlined.pn-button-light .pn-button-bg::after,pn-button a.pn-button-variation-outlined.pn-button-light .pn-button-bg::after{background:#00a0d6;opacity:0.1}pn-button button.pn-button-left-icon .pn-button-content,pn-button a.pn-button-left-icon .pn-button-content{-ms-flex-direction:row-reverse;flex-direction:row-reverse}pn-button button.pn-button-left-icon .pn-button-content pn-icon,pn-button a.pn-button-left-icon .pn-button-content pn-icon{margin:0 0.5em 0 0}pn-button button.icon-only,pn-button a.icon-only{width:3em;min-width:0}pn-button button.icon-only pn-icon,pn-button a.icon-only pn-icon{margin:0}pn-button button.icon-only.pn-button-small,pn-button a.icon-only.pn-button-small{width:2.286em;min-width:0;padding:0}pn-button button.pn-button-small,pn-button a.pn-button-small{font-size:0.875em;padding:0.5em 1em;font-weight:normal;min-height:2.286em;min-width:none}pn-button button.pn-button-small pn-icon svg,pn-button a.pn-button-small pn-icon svg{height:1.28em;width:1.28em}a:focus>pn-button button .pn-button-bg,pn-button button:focus .pn-button-bg,pn-button a:focus .pn-button-bg{-webkit-box-shadow:0 0 0 0.2rem #fff, 0 0 0 0.4rem #005d92;box-shadow:0 0 0 0.2rem #fff, 0 0 0 0.4rem #005d92}a:focus>pn-button button .pn-button-bg:after,pn-button button:hover .pn-button-bg:after,pn-button button:focus .pn-button-bg:after,pn-button a:hover .pn-button-bg:after,pn-button a:focus .pn-button-bg:after{-webkit-transform:translateX(0);transform:translateX(0)}a:focus>pn-button button.pn-button-warning,pn-button button.pn-button-warning:hover,pn-button a.pn-button-warning:hover,pn-button button.pn-button-warning:focus,pn-button a.pn-button-warning:focus{color:#fff}a:focus>pn-button button.pn-button-warning pn-icon svg path,pn-button button.pn-button-warning:hover pn-icon svg path,pn-button a.pn-button-warning:hover pn-icon svg path,pn-button button.pn-button-warning:focus pn-icon svg path,pn-button a.pn-button-warning:focus pn-icon svg path{fill:#fff}a:focus>pn-button button.pn-button-warning pn-spinner .circle,pn-button button.pn-button-warning:hover pn-spinner .circle,pn-button a.pn-button-warning:hover pn-spinner .circle,pn-button button.pn-button-warning:focus pn-spinner .circle,pn-button a.pn-button-warning:focus pn-spinner .circle{stroke:#fff}a:focus>pn-button button.pn-button-warning pn-spinner .dot,pn-button button.pn-button-warning:hover pn-spinner .dot,pn-button a.pn-button-warning:hover pn-spinner .dot,pn-button button.pn-button-warning:focus pn-spinner .dot,pn-button a.pn-button-warning:focus pn-spinner .dot{fill:#fff}a:focus>pn-button button.pn-button-warning .pn-button-bg,pn-button button.pn-button-warning:focus .pn-button-bg,pn-button a.pn-button-warning:focus .pn-button-bg{-webkit-box-shadow:0 0 0 0.2rem #fff, 0 0 0 0.4rem #a70707;box-shadow:0 0 0 0.2rem #fff, 0 0 0 0.4rem #a70707}pn-button .pn-ripple{-webkit-animation:ripple 0.4s cubic-bezier(0.7, 0, 0.3, 1);animation:ripple 0.4s cubic-bezier(0.7, 0, 0.3, 1);position:absolute;border-radius:50%;background:#fff;-webkit-transform:translate(-50%, -50%) scale(0);transform:translate(-50%, -50%) scale(0);opacity:0.1;pointer-events:none;z-index:3}@-webkit-keyframes ripple{to{-webkit-transform:translate(-50%, -50%) scale(1);transform:translate(-50%, -50%) scale(1);opacity:0}}@keyframes ripple{to{-webkit-transform:translate(-50%, -50%) scale(1);transform:translate(-50%, -50%) scale(1);opacity:0}}pn-button pn-spinner{position:absolute;-webkit-transform:scale(0);transform:scale(0)}pn-button[data-loading] pn-spinner{-webkit-transform:scale(1);transform:scale(1);-webkit-transition:-webkit-transform 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.3s;transition:-webkit-transform 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.3s;transition:transform 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.3s;transition:transform 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.3s, -webkit-transform 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.3s}pn-button[data-loading] .pn-button-content{opacity:0;-webkit-transition-delay:0s;transition-delay:0s;-webkit-transform:translateY(100%);transform:translateY(100%)}pn-button[data-loading] .pn-button-bg{width:3em}pn-button[data-loading] button.pn-button-small .pn-button-bg,pn-button[data-loading] a.pn-button-small .pn-button-bg{width:2.286em}pn-button button .button-tooltip,pn-button a .button-tooltip{position:absolute;top:calc(100% + 0.35em);left:50%;background:#0a406e;color:#ffffff;padding:0.25em 0.75em;font-size:0.875em;font-weight:300;border-radius:1em;-webkit-box-shadow:0 1.2px 3.6px rgba(0, 0, 0, 0.1), 0 6.4px 14.4px rgba(0, 0, 0, 0.13);box-shadow:0 1.2px 3.6px rgba(0, 0, 0, 0.1), 0 6.4px 14.4px rgba(0, 0, 0, 0.13);z-index:5;max-width:min(95vw, 40em);-webkit-transition:opacity 0.25s cubic-bezier(0.7, 0, 0.3, 1);transition:opacity 0.25s cubic-bezier(0.7, 0, 0.3, 1);-webkit-transform:translateX(-50%);transform:translateX(-50%);width:-webkit-max-content;width:-moz-max-content;width:max-content;opacity:0;pointer-events:none}pn-button button[data-tooltip-open] .button-tooltip,pn-button a[data-tooltip-open] .button-tooltip{opacity:1;-webkit-transition-delay:5s;transition-delay:5s}pn-button button.button-tooltip-upwards .button-tooltip,pn-button a.button-tooltip-upwards .button-tooltip{top:auto;bottom:calc(100% + 0.35em)}pn-button button.pn-button-warning .button-tooltip,pn-button a.pn-button-warning .button-tooltip{background:#a70707;color:#ffffff}pn-button a{text-decoration:none}pn-button a:hover{color:#ffffff}pn-button a:hover.pn-button-light{color:#005d92}";

const PnButton = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    /** small, bool */
    this.small = false;
    /** Button type, dark(blue background), light(white background), warning(destructive actions) */
    this.appearance = 'primary ';
    /** Altering the button style, options are: 'outlined' (bordered button with no background) or 'borderless' (borderless button with no background, mostly used for links) */
    this.variant = '';
    /** Loading indicator */
    this.loading = false;
    /** Icon on the left side instead of on the right */
    this.leftIcon = false;
    this.icon = null;
    this.type = 'button';
    /** If you're using a button with only an icon, button text is still REQUIRED for the tooltip */
    this.iconOnly = false;
    this.ariaLabel = null;
    this.ariaLabelledby = null;
    this.ariaControls = null;
    this.ariaPressed = null;
    /** Pass an href to make the button into link (a-tag) */
    this.href = null;
    this.rel = null;
    this.target = null;
    this.download = null;
    this.form = null;
    /*---------------------------------------TOOLTIP LOGIC-------------------------------------------*/
    this.tooltipOpen = false;
    this.ripple = function (e, el) {
      const elRect = el.getBoundingClientRect();
      const elLeft = elRect.left;
      const elTop = elRect.top;
      const rippleEl = document.createElement('div');
      const elSize = elRect.width > elRect.height ? elRect.width : elRect.height;
      rippleEl.classList.add('pn-ripple');
      el.querySelector('.pn-button-bg').appendChild(rippleEl);
      rippleEl.style.height = `${elSize * 2}px`;
      rippleEl.style.width = `${elSize * 2}px`;
      rippleEl.style.left = e.clientX > 0 ? `${e.clientX - elLeft}px` : `50%`;
      rippleEl.style.top = e.clientY > 0 ? `${e.clientY - elTop}px` : `50%`;
      setTimeout(() => rippleEl.remove(), 400);
    };
  }
  componentDidLoad() {
    this.checkIfLink();
    if (this.iconOnly)
      this.initTooltip();
  }
  openHandler() {
    if (this.tooltipOpen) {
      this.checkTooltipPosition();
      return;
    }
    this.setTooltipOffset();
  }
  initTooltip() {
    this.tooltipEl = this.hostElement.querySelector('.button-tooltip');
    const buttonEl = this.hostElement.querySelector('.pn-button');
    const tooltipAnchor = this.linkEl ? this.linkEl : buttonEl;
    const openEvents = ['mouseover', 'focus'];
    const closeEvents = ['mouseleave', 'blur'];
    const eventListeners = [...openEvents, ...closeEvents];
    eventListeners.forEach(e => {
      tooltipAnchor.addEventListener(e, event => {
        // Should open?
        if (openEvents.includes(event.type)) {
          this.tooltipOpen = true;
          return;
        }
        // Should close?
        if (closeEvents.includes(event.type)) {
          this.tooltipOpen = false;
        }
      });
    });
  }
  setTooltipOffset() {
    this.tooltipEl.style.transform = `translateX(-50%) translateX(${this.tooltipDx}px)`;
  }
  checkTooltipPosition() {
    this.tooltipEl.style.transition = 'none';
    this.tooltipEl.style.transform = 'translateX(-50%)';
    this.tooltipUpwards = false;
    requestAnimationFrame(() => {
      const { x, y, right, height } = this.tooltipEl.getBoundingClientRect();
      const extraMargin = 8;
      this.tooltipDx = '0';
      this.tooltipUpwards = y + height > window.innerHeight;
      this.tooltipEl.style.transform = '';
      if (x < 0)
        this.tooltipDx = `${x * -1 + extraMargin}`;
      if (right > window.innerWidth)
        this.tooltipDx = `${window.innerWidth - right - extraMargin}`;
      requestAnimationFrame(() => {
        this.tooltipEl.style.transition = '';
        this.setTooltipOffset();
      });
    });
  }
  /*---------------------------------------/TOOLTIP LOGIC-------------------------------------------*/
  checkIfLink() {
    var _a;
    if (((_a = this.hostElement.parentElement) === null || _a === void 0 ? void 0 : _a.nodeName) === 'A') {
      this.linkEl = this.hostElement.parentElement;
      this.hostElement.parentElement.style.setProperty('outline', 'none');
      this.hostElement.querySelector('button').setAttribute('tabindex', '-1');
    }
  }
  getClassNames() {
    let classNames = 'pn-button ';
    const dark = ['primary', 'dark'];
    const light = ['secondary', 'light'];
    const variations = ['borderless', 'outlined'];
    if (this.small)
      classNames += 'pn-button-small ';
    if (this.leftIcon)
      classNames += 'pn-button-left-icon ';
    if (variations.includes(this.variant))
      classNames += `pn-button-variation-${this.variant} `;
    if (this.iconOnly)
      classNames += 'icon-only ';
    if (this.tooltipUpwards)
      classNames += 'button-tooltip-upwards ';
    if (dark.includes(this.appearance)) {
      classNames += 'pn-button-dark ';
    }
    else if (light.includes(this.appearance)) {
      classNames += 'pn-button-light ';
    }
    else if (this.appearance === 'warning') {
      classNames += 'pn-button-warning ';
    }
    else {
      classNames += 'pn-button-dark ';
    }
    // Loading state
    if (this.loading) {
      this.hostElement.dataset.loading = 'true';
    }
    else {
      if (this.hostElement.dataset.loading)
        delete this.hostElement.dataset.loading;
    }
    return classNames;
  }
  getAttributes() {
    var _a, _b;
    const btnAttrs = {
      type: this.type,
    };
    const linkAttrs = {
      href: this.href,
      rel: !this.rel && this.target === '_blank' ? 'noopener' : this.rel,
      target: (_a = this.target) !== null && _a !== void 0 ? _a : null,
      download: (_b = this.download) !== null && _b !== void 0 ? _b : null,
    };
    return this.href ? linkAttrs : btnAttrs;
  }
  getTagName() {
    return this.href ? 'a' : 'button';
  }
  render() {
    const TagName = this.getTagName();
    return (h(Host, { class: "pn-button" }, h(TagName, Object.assign({ class: this.getClassNames(), "data-loading": this.loading, onClick: e => this.ripple(e, this.hostElement), "aria-label": this.ariaLabel, "aria-labelledby": this.ariaLabelledby, "data-tooltip-open": this.tooltipOpen, "aria-controls": this.ariaControls, "aria-pressed": this.ariaPressed, disabled: this.loading, form: this.form }, this.getAttributes()), h("div", { class: "pn-button-bg" }), h("div", { class: "pn-button-content" }, !this.iconOnly && h("slot", null), this.icon && h("pn-icon", { symbol: this.icon })), h("pn-spinner", { light: true }), this.iconOnly && (h("div", { class: "button-tooltip" }, h("slot", null))))));
  }
  get hostElement() { return this; }
  static get watchers() { return {
    "tooltipOpen": ["openHandler"]
  }; }
  static get style() { return pnButtonCss; }
}, [4, "pn-button", {
    "small": [4],
    "appearance": [1],
    "variant": [1],
    "loading": [516],
    "leftIcon": [4, "left-icon"],
    "icon": [1],
    "type": [1],
    "iconOnly": [4, "icon-only"],
    "ariaLabel": [1, "aria-label"],
    "ariaLabelledby": [1, "aria-labelledby"],
    "ariaControls": [1, "aria-controls"],
    "ariaPressed": [1, "aria-pressed"],
    "href": [1],
    "rel": [1],
    "target": [1],
    "download": [4],
    "form": [1],
    "tooltipOpen": [32],
    "tooltipUpwards": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["pn-button", "pn-icon", "pn-spinner"];
  components.forEach(tagName => { switch (tagName) {
    case "pn-button":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, PnButton);
      }
      break;
    case "pn-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "pn-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { PnButton as P, defineCustomElement as d };
