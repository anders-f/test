import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';

const pnSpinnerCss = "pn-spinner{height:1.5em;width:1.5em;height:var(--size);width:var(--size);display:block}pn-spinner svg{-webkit-animation:rotate 1s infinite;animation:rotate 1s infinite;display:block}pn-spinner svg .circle{stroke:#005d92;-webkit-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(-310deg);transform:rotate(-310deg);stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:64;-webkit-animation:loading 2s infinite;animation:loading 2s infinite}pn-spinner svg .dot{fill:#005d92}pn-spinner.light .circle{stroke:#fff}pn-spinner.light .dot{fill:#fff}pn-spinner svg,pn-spinner svg .circle{-webkit-animation-timing-function:cubic-bezier(0.5, 0, 0.5, 1);animation-timing-function:cubic-bezier(0.5, 0, 0.5, 1)}@-webkit-keyframes loading{0%{stroke-dashoffset:55}50%{stroke-dashoffset:12}100%{stroke-dashoffset:55}}@keyframes loading{0%{stroke-dashoffset:55}50%{stroke-dashoffset:12}100%{stroke-dashoffset:55}}@-webkit-keyframes rotate{from{-webkit-transform:rotate(-180deg) scaleX(-1);transform:rotate(-180deg) scaleX(-1)}to{-webkit-transform:rotate(180deg) scaleX(-1);transform:rotate(180deg) scaleX(-1)}}@keyframes rotate{from{-webkit-transform:rotate(-180deg) scaleX(-1);transform:rotate(-180deg) scaleX(-1)}to{-webkit-transform:rotate(180deg) scaleX(-1);transform:rotate(180deg) scaleX(-1)}}";

const PnSpinner = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    /** Light version of the spinner */
    this.light = false;
    /** Size in em */
    this.size = '1.5';
  }
  render() {
    return (h(Host, { class: this.light ? 'light' : '', style: { '--size': this.size + 'em' } }, h("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "none" }, h("circle", { class: "circle", cx: "12", cy: "12", r: "10", "stroke-width": "3" }), h("circle", { class: "dot", cx: "21.3", cy: "16", r: "1.48" }))));
  }
  get hostElement() { return this; }
  static get style() { return pnSpinnerCss; }
}, [0, "pn-spinner", {
    "light": [4],
    "size": [1]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["pn-spinner"];
  components.forEach(tagName => { switch (tagName) {
    case "pn-spinner":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, PnSpinner);
      }
      break;
  } });
}

export { PnSpinner as P, defineCustomElement as d };
