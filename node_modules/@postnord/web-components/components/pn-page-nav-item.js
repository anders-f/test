import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$2 } from './pn-icon2.js';

const pnPageNavItemCss = "pn-page-nav-item{position:relative;color:#ffffff;margin-right:0.5em;z-index:2;white-space:nowrap;scroll-snap-align:center;outline:none;-webkit-tap-highlight-color:transparent;-webkit-transform:translateZ(0);transform:translateZ(0)}pn-page-nav-item:last-of-type{margin-right:0}pn-page-nav-item a{text-decoration:none;color:white;height:100%;width:100%;padding:0.5em;font-weight:500;border-radius:3em;border:0.1rem solid transparent;display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center;cursor:pointer;outline:none;-webkit-transition:-webkit-box-shadow 0.15s;transition:-webkit-box-shadow 0.15s;transition:box-shadow 0.15s;transition:box-shadow 0.15s, -webkit-box-shadow 0.15s}pn-page-nav-item a:focus{-webkit-box-shadow:0 0 0 0.1em #d3cecb;box-shadow:0 0 0 0.1em #d3cecb}pn-page-nav-item a>pn-icon{margin-right:0.5em}";

const PnPageNavItem$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.itemselection = createEvent(this, "itemselection", 7);
    this.select = e => {
      if (this.value && !this.href)
        e.preventDefault();
      this.itemselection.emit(this.value);
    };
  }
  setClassnames() {
    let classes = 'pn-page-nav-item ';
    return classes;
  }
  render() {
    return (h(Host, null, h("li", null, h("a", { href: this.href || '#', class: this.setClassnames(), onClick: this.select }, this.icon && h("pn-icon", { symbol: this.icon, color: "white" }), h("slot", null)))));
  }
  get hostElement() { return this; }
  static get style() { return pnPageNavItemCss; }
}, [4, "pn-page-nav-item", {
    "value": [1],
    "icon": [1],
    "href": [1]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["pn-page-nav-item", "pn-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "pn-page-nav-item":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, PnPageNavItem$1);
      }
      break;
    case "pn-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const PnPageNavItem = PnPageNavItem$1;
const defineCustomElement = defineCustomElement$1;

export { PnPageNavItem, defineCustomElement };
