import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$2 } from './pn-icon2.js';

const pnInputCss = "pn-input{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-direction:column;flex-direction:column}pn-input input{padding:0.75em;font-size:1em;font-weight:500;-webkit-font-smoothing:antialiased;outline:none;border-radius:0.5em;border:0.065em solid #5e554a;-webkit-transition:border 0.15s, -webkit-box-shadow 0.15s;transition:border 0.15s, -webkit-box-shadow 0.15s;transition:box-shadow 0.15s, border 0.15s;transition:box-shadow 0.15s, border 0.15s, -webkit-box-shadow 0.15s;color:#000000;width:100%}pn-input input::-webkit-input-placeholder{color:#969087;font-weight:normal}pn-input input::-moz-placeholder{color:#969087;font-weight:normal}pn-input input:-ms-input-placeholder{color:#969087;font-weight:normal}pn-input input::-ms-input-placeholder{color:#969087;font-weight:normal}pn-input input::placeholder{color:#969087;font-weight:normal}pn-input input:focus{border:0.065em solid #005d92;-webkit-box-shadow:0 0 0 0.125em #fff, 0 0 0 0.25em #005d92;box-shadow:0 0 0 0.125em #fff, 0 0 0 0.25em #005d92}pn-input input:hover{border:0.065em solid #00a0d6}pn-input input:disabled{background:#f3f2f2;border:none}pn-input>.input-container{position:relative}pn-input>.input-container>button{position:absolute;right:0.75em;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);background:none;border:none;cursor:pointer;color:#005d92;padding:0.5em;border-radius:0.5em;outline:none;-webkit-transition:border 0.1s, background 0.2s, color 0.1s;transition:border 0.1s, background 0.2s, color 0.1s;border:0.065em solid transparent}pn-input>.input-container>button:focus{border:0.065em solid #005d92}pn-input>.input-container>button:hover{background:#e0f8ff}pn-input>.input-container>button:active{background:#005d92;color:white}pn-input>.input-container>svg{position:absolute;right:0.75em;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);height:1.5em;width:1.5em;pointer-events:none}pn-input>.input-container>svg polyline{stroke-linecap:round;-webkit-transition:stroke-dashoffset 0.2s cubic-bezier(0.79, 0.14, 0.15, 0.86);transition:stroke-dashoffset 0.2s cubic-bezier(0.79, 0.14, 0.15, 0.86)}pn-input>.input-container>svg.pn-input-checkmark polyline{stroke:#005e41;stroke-dashoffset:23;stroke-dasharray:23}pn-input .label-container{margin-bottom:0.5em;color:#5e554a;font-size:0.875em;display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:end;align-items:flex-end}pn-input .label-container label{cursor:pointer;-webkit-transition:color 0.2s;transition:color 0.2s}.label-container label.char-count{-ms-flex-negative:0;flex-shrink:0;padding-left:0.5em}pn-input small{font-size:0.75em;-webkit-transition:-webkit-transform 0.2s cubic-bezier(0.79, 0.14, 0.15, 0.86);transition:-webkit-transform 0.2s cubic-bezier(0.79, 0.14, 0.15, 0.86);transition:transform 0.2s cubic-bezier(0.79, 0.14, 0.15, 0.86);transition:transform 0.2s cubic-bezier(0.79, 0.14, 0.15, 0.86), -webkit-transform 0.2s cubic-bezier(0.79, 0.14, 0.15, 0.86);margin-top:0.5em;color:#5e554a}pn-input.error{color:#a70707}pn-input.error label{color:#a70707}pn-input.error small{color:#a70707}pn-input.error small>pn-icon{margin-right:0.25em}pn-input.error input{border:0.065em solid #a70707}pn-input.error input:focus{border:0.065em solid #a70707;-webkit-box-shadow:0 0 0 0.125em #fff, 0 0 0 0.25em #a70707;box-shadow:0 0 0 0.125em #fff, 0 0 0 0.25em #a70707}pn-input.error input:hover{border:0.065em solid #f06365}pn-input.valid{color:#005e41}pn-input.valid .input-container>svg.pn-input-checkmark polyline{stroke-dashoffset:0}pn-input.valid label{color:#005e41}pn-input.valid input{border:0.065em solid #005e41}pn-input.valid input:focus{border:0.065em solid #005e41;-webkit-box-shadow:0 0 0 0.125em #fff, 0 0 0 0.25em #005e41;box-shadow:0 0 0 0.125em #fff, 0 0 0 0.25em #005e41}pn-input.valid input:hover{border:0.065em solid #5ec584}pn-input.password input{padding-right:4em}pn-input.icon input{padding-right:2.3em}";

const Pninput = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.disabled = false;
    /** Error message; will take precedence over helpertext if both are provided (applies invalid styles automatically) */
    this.error = '';
    /** Error state without message (If you want to control the error messaging on your own) */
    this.invalid = false;
    /** Text message placed underneath the input field */
    this.helpertext = '';
    /** Text label placed above the input field */
    this.label = '';
    this.placeholder = '';
    this.inputid = `${Math.random()}`;
    this.name = '';
    this.required = null;
    this.type = 'text';
    this.autocomplete = null;
    this.valid = null;
    this.value = '';
    /** The maximum number of characters the user should be able to add, also adds a visible counter */
    this.maxlength = '';
    this.min = null;
    this.max = null;
    this.ariaLabel = null;
    this.showText = false;
  }
  getTextMessage() {
    if (this.error)
      return this.error;
    if (this.helpertext)
      return this.helpertext;
    return null;
  }
  toggleTextVisibility() {
    this.showText = !this.showText;
  }
  getInputType() {
    let types = ['text', 'password', 'url', 'tel', 'search', 'number', 'email'];
    return types.includes(this.type) && !this.showText ? this.type : 'text';
  }
  setVal(e) {
    var _a;
    const target = (_a = e.composedPath) === null || _a === void 0 ? void 0 : _a.call(e)[0];
    this.value = target.value;
  }
  getClassNames() {
    let classNames = 'pn-input ';
    if (this.error.length > 0 || this.invalid)
      classNames += 'error ';
    if (this.valid)
      classNames += 'valid ';
    if (this.type === 'password')
      classNames += 'password ';
    if (this.error || this.invalid || this.valid)
      classNames += 'icon ';
    return classNames;
  }
  render() {
    return (h(Host, { class: this.getClassNames() }, (this.label || this.maxlength) && (h("div", { class: "label-container" }, this.label && h("label", { htmlFor: this.inputid }, this.label), parseInt(this.maxlength) > 0 && (h("label", { class: "char-count", htmlFor: this.inputid }, `${this.value.length}/${this.maxlength}`)))), h("div", { class: "input-container" }, h("input", { type: this.getInputType(), value: this.value, id: this.inputid, name: this.name, placeholder: this.placeholder, disabled: this.disabled, autocomplete: this.autocomplete, onInput: e => this.setVal(e), maxlength: this.maxlength, min: this.min, max: this.max, "aria-lavel": this.ariaLabel }), h("svg", { class: "pn-input-checkmark", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "none" }, h("polyline", { class: "checkmark-path", points: "4,12 9,17 20,6", "stroke-width": "3" })), this.type === 'password' && !this.disabled && (h("button", { onClick: () => this.toggleTextVisibility() }, "Show"))), this.getTextMessage() && (h("small", null, this.error && h("pn-icon", { symbol: "alert-exclamation-circle", small: true, color: "warning" }), this.getTextMessage()))));
  }
  static get style() { return pnInputCss; }
}, [0, "pn-input", {
    "disabled": [4],
    "error": [1],
    "invalid": [4],
    "helpertext": [1],
    "label": [1],
    "placeholder": [1],
    "inputid": [1],
    "name": [1],
    "required": [4],
    "type": [1025],
    "autocomplete": [1],
    "valid": [4],
    "value": [1],
    "maxlength": [1],
    "min": [2],
    "max": [2],
    "ariaLabel": [1, "aria-label"],
    "showText": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["pn-input", "pn-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "pn-input":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, Pninput);
      }
      break;
    case "pn-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const PnInput = Pninput;
const defineCustomElement = defineCustomElement$1;

export { PnInput, defineCustomElement };
