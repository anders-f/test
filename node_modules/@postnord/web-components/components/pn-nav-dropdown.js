import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$2 } from './pn-icon2.js';

const pnNavDropdownCss = "pn-nav-dropdown{display:inline-block;position:relative}pn-nav-dropdown>button{background:none;outline:none;border-radius:0.8rem;border:none;cursor:pointer;padding:0.25em;font-size:1em;-webkit-transition:background 0.15s, -webkit-box-shadow 0.15s;transition:background 0.15s, -webkit-box-shadow 0.15s;transition:box-shadow 0.15s, background 0.15s;transition:box-shadow 0.15s, background 0.15s, -webkit-box-shadow 0.15s;position:relative;overflow:hidden;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;color:#005d92;font-weight:normal}pn-nav-dropdown>button:focus{-webkit-box-shadow:0 0 0 0.2rem #fff, 0 0 0 0.4rem #005d92;box-shadow:0 0 0 0.2rem #fff, 0 0 0 0.4rem #005d92}pn-nav-dropdown>button:hover,pn-nav-dropdown>button:focus{background:#effbff}.pn-nav-dropdown-label>pn-icon{margin-left:0.4em}.nav-dropdown-content-container{position:absolute;top:130%;left:0;border-radius:1em;-webkit-box-shadow:0 0.2rem 1.6rem rgba(0, 0, 0, 0.2);box-shadow:0 0.2rem 1.6rem rgba(0, 0, 0, 0.2);-webkit-transform-origin:top left;transform-origin:top left;-webkit-transition:-webkit-transform 0.2s cubic-bezier(0.6, 0, 0.4, 1) 0.15s;transition:-webkit-transform 0.2s cubic-bezier(0.6, 0, 0.4, 1) 0.15s;transition:transform 0.2s cubic-bezier(0.6, 0, 0.4, 1) 0.15s;transition:transform 0.2s cubic-bezier(0.6, 0, 0.4, 1) 0.15s, -webkit-transform 0.2s cubic-bezier(0.6, 0, 0.4, 1) 0.15s;-webkit-transform:scale(0);transform:scale(0);overflow-y:auto;max-width:95vw;max-width:min(95vw, 40em);max-height:80vh;z-index:10;background:#ffffff}pn-nav-dropdown.nav-dropdown-right .nav-dropdown-content-container{left:unset;right:0;-webkit-transform-origin:top right;transform-origin:top right}.nav-dropdown-content{padding:1em;opacity:0;-webkit-transition:opacity 0.1s cubic-bezier(0.6, 0, 0.4, 1);transition:opacity 0.1s cubic-bezier(0.6, 0, 0.4, 1);-webkit-transition-delay:0s;transition-delay:0s;position:relative;width:-webkit-max-content;width:-moz-max-content;width:max-content;max-width:100%}pn-nav-dropdown[data-open=true] .nav-dropdown-content-container{-webkit-transition-delay:0s;transition-delay:0s}pn-nav-dropdown[data-open=true] .nav-dropdown-content{-webkit-transition-delay:0.3s;transition-delay:0.3s;-webkit-transition-duration:0.18s;transition-duration:0.18s;opacity:1}pn-nav-dropdown .pn-ripple{-webkit-animation:ripple 0.4s cubic-bezier(0.6, 0, 0.4, 1);animation:ripple 0.4s cubic-bezier(0.6, 0, 0.4, 1);position:absolute;border-radius:50%;background:#005d92;-webkit-transform:translate(-50%, -50%) scale(0);transform:translate(-50%, -50%) scale(0);opacity:0.1;pointer-events:none;z-index:3}@-webkit-keyframes ripple{to{-webkit-transform:translate(-50%, -50%) scale(1);transform:translate(-50%, -50%) scale(1);opacity:0}}@keyframes ripple{to{-webkit-transform:translate(-50%, -50%) scale(1);transform:translate(-50%, -50%) scale(1);opacity:0}}";

const PnnavDropdown = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    /** The label on the button */
    this.label = 'Dropdown';
    /** Optional icon in the button */
    this.icon = '';
    this.open = false;
    this.position = '';
    this.right = false;
    this.handleGlobalEvents = this.globalHandler.bind(this);
  }
  componentDidLoad() {
    const links = Array.from(this.hostElement.querySelectorAll('.nav-dropdown-content a'));
    const btns = Array.from(this.hostElement.querySelectorAll('.nav-dropdown-content button'));
    const inputs = Array.from(this.hostElement.querySelectorAll('.nav-dropdown-content input'));
    this.dropdown = this.hostElement.querySelector('.nav-dropdown-content-container');
    this.focusableElements = [...btns, ...links, ...inputs];
    this.toggleTabOrder();
  }
  openHandler() {
    this.toggleTabOrder();
    this.toggleDropdown();
    if (this.open) {
      document.addEventListener('click', this.handleGlobalEvents);
      document.addEventListener('keyup', this.handleGlobalEvents);
    }
    if (!this.open) {
      document.removeEventListener('click', this.handleGlobalEvents);
      document.removeEventListener('keyup', this.handleGlobalEvents);
    }
  }
  globalHandler(e) {
    // global events that we want to track to close the select, like "click outside" or tab out
    if ((!this.hostElement.contains(e.target) && e.type !== 'scroll') || (e === null || e === void 0 ? void 0 : e.key) === 'Escape') {
      this.open = false;
    }
    else if (e.type === 'scroll') {
      const top = this.hostElement.getBoundingClientRect().top;
      const bottom = window.innerHeight - this.hostElement.getBoundingClientRect().bottom;
      if (bottom <= 0 || top <= 0) {
        this.open = false;
      }
    }
  }
  toggleDropdown() {
    this.right = this.hostElement.offsetLeft > window.innerWidth / 2;
    requestAnimationFrame(() => {
      if (this.open) {
        this.dropdown.style.transition = 'none';
        this.dropdown.style.transform = 'none';
      }
      const dropdownEl = this.dropdown.getBoundingClientRect();
      let x;
      if (dropdownEl.right > window.innerWidth || dropdownEl.x < 0) {
        // 0.025 because the max width of the element is 95vw and we want the same margin on both sides
        x = dropdownEl.x + dropdownEl.width + window.innerWidth * 0.025 - window.innerWidth;
      }
      else {
        x = 0;
      }
      this.dropdown.style.transform = '';
      requestAnimationFrame(() => {
        this.dropdown.style.transition = '';
        this.dropdown.style.transform = this.open ? `scale(1) translateX(-${x}px)` : '';
        requestAnimationFrame(() => {
          this.hostElement.dataset.open = `${this.open}`;
        });
      });
    });
  }
  toggleTabOrder() {
    if (!this.focusableElements.length)
      return;
    const tabindex = this.open ? '0' : '-1';
    this.focusableElements.forEach((el) => {
      el.setAttribute('tabindex', tabindex);
    });
  }
  ripple(e) {
    const el = this.hostElement.querySelector('.pn-nav-dropdown-label');
    this.open = !this.open;
    const elRect = el.getBoundingClientRect();
    const elLeft = elRect.left;
    const elTop = elRect.top;
    const rippleEl = document.createElement('div');
    const elSize = elRect.width > elRect.height ? elRect.width : elRect.height;
    rippleEl.classList.add('pn-ripple');
    el.appendChild(rippleEl);
    rippleEl.style.height = `${elSize * 2}px`;
    rippleEl.style.width = `${elSize * 2}px`;
    rippleEl.style.left = e.clientX > 0 ? `${e.clientX - elLeft}px` : `50%`;
    rippleEl.style.top = e.clientY > 0 ? `${e.clientY - elTop}px` : `50%`;
    setTimeout(() => rippleEl.remove(), 400);
  }
  getClassNames() {
    let classNames = '';
    if (this.right)
      classNames += 'nav-dropdown-right ';
    return classNames;
  }
  render() {
    return (h(Host, { class: this.getClassNames() }, h("button", { class: "pn-nav-dropdown-label", type: "button", onClick: (e) => this.ripple(e) }, this.label, this.icon ? h("pn-icon", { symbol: this.icon, color: "blue700" }) : null), h("div", { class: "nav-dropdown-content-container" }, h("div", { class: "nav-dropdown-content" }, h("slot", null)))));
  }
  get hostElement() { return this; }
  static get watchers() { return {
    "open": ["openHandler"]
  }; }
  static get style() { return pnNavDropdownCss; }
}, [4, "pn-nav-dropdown", {
    "label": [1],
    "icon": [1],
    "open": [32],
    "position": [32],
    "right": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["pn-nav-dropdown", "pn-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "pn-nav-dropdown":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, PnnavDropdown);
      }
      break;
    case "pn-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const PnNavDropdown = PnnavDropdown;
const defineCustomElement = defineCustomElement$1;

export { PnNavDropdown, defineCustomElement };
