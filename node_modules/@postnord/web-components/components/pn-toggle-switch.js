import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$2 } from './pn-spinner2.js';

const pnToggleSwitchCss = "pn-toggle-switch{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center;position:relative;font-size:3rem}pn-toggle-switch .pn-toggle-switch{width:100%;height:100%;opacity:0;margin:0;position:absolute}.pn-toggle{width:1em;height:1em;padding:0.2em;position:relative;cursor:pointer;-webkit-box-sizing:content-box;box-sizing:content-box;margin-right:1.4em;-webkit-transition:-webkit-transform 0.2s cubic-bezier(0.5, 0, 0.5, 1);transition:-webkit-transform 0.2s cubic-bezier(0.5, 0, 0.5, 1);transition:transform 0.2s cubic-bezier(0.5, 0, 0.5, 1);transition:transform 0.2s cubic-bezier(0.5, 0, 0.5, 1), -webkit-transform 0.2s cubic-bezier(0.5, 0, 0.5, 1);-webkit-tap-highlight-color:transparent}.pn-toggle .bg{position:absolute;top:0;left:0;width:175%;height:100%;z-index:0;border-radius:2em;-webkit-transition:width 0.2s cubic-bezier(0.5, 0, 0.5, 1), background-color 0.2s cubic-bezier(0.5, 0, 0.5, 1), opacity 0.1s, -webkit-box-shadow 0.1s;transition:width 0.2s cubic-bezier(0.5, 0, 0.5, 1), background-color 0.2s cubic-bezier(0.5, 0, 0.5, 1), opacity 0.1s, -webkit-box-shadow 0.1s;transition:width 0.2s cubic-bezier(0.5, 0, 0.5, 1), box-shadow 0.1s, background-color 0.2s cubic-bezier(0.5, 0, 0.5, 1), opacity 0.1s;transition:width 0.2s cubic-bezier(0.5, 0, 0.5, 1), box-shadow 0.1s, background-color 0.2s cubic-bezier(0.5, 0, 0.5, 1), opacity 0.1s, -webkit-box-shadow 0.1s}.pn-toggle>.circle{width:1em;height:1em;background:white;-webkit-box-shadow:0 0.25em 0.5em rgba(0, 0, 0, 0.1);box-shadow:0 0.25em 0.5em rgba(0, 0, 0, 0.1);border-radius:50%;-webkit-transition:inherit;transition:inherit;z-index:1;position:relative;padding:0.1em}.pn-toggle>.circle>svg{-webkit-transform:rotate(-90deg);transform:rotate(-90deg);margin:-0.1em}.pn-toggle pn-spinner{opacity:0;-webkit-transition:opacity 0.15s cubic-bezier(0.5, 0, 0.5, 1);transition:opacity 0.15s cubic-bezier(0.5, 0, 0.5, 1);width:100%;height:100%}pn-toggle-switch .pn-toggle-switch{}pn-toggle-switch .pn-toggle-switch+.pn-toggle .bg{background:#969087}pn-toggle-switch .pn-toggle-switch:focus+.pn-toggle .bg,pn-toggle-switch .pn-toggle-switch:active+.pn-toggle .bg{-webkit-box-shadow:0 0 0 0.3rem white, 0 0 0 0.6rem #005d92;box-shadow:0 0 0 0.3rem white, 0 0 0 0.6rem #005d92}pn-toggle-switch .pn-toggle-switch:hover+.pn-toggle .bg{background:#5e554a}pn-toggle-switch .pn-toggle-switch:hover:checked+.pn-toggle .bg{background:#0d234b;opacity:1}pn-toggle-switch .pn-toggle-switch:indeterminate+.pn-toggle{-webkit-transform:translateX(50%);transform:translateX(50%)}pn-toggle-switch .pn-toggle-switch:indeterminate+.pn-toggle .bg{width:100%}pn-toggle-switch .pn-toggle-switch:indeterminate+.pn-toggle pn-spinner{opacity:1;-webkit-transition-delay:0.3s;transition-delay:0.3s}pn-toggle-switch .pn-toggle-switch:checked+.pn-toggle .bg{background:#005d92}pn-toggle-switch .pn-toggle-switch:checked+.pn-toggle>.circle{-webkit-transform:translateX(100%);transform:translateX(100%)}pn-toggle-switch .pn-toggle-switch:disabled+.pn-toggle{cursor:not-allowed}pn-toggle-switch .pn-toggle-switch:disabled+.pn-toggle .bg{-webkit-box-shadow:none;box-shadow:none;opacity:0.5}pn-toggle-switch .pn-toggle-switch:disabled:hover+.pn-toggle .bg{opacity:0.5;background:#969087}pn-toggle-switch .pn-toggle-switch:disabled:hover:checked+.pn-toggle .bg{background:#005d92}";

const PnToggleSwitch$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.checked = false;
    this.disabled = false;
    /** Loading state */
    this.indeterminate = false;
    this.name = null;
  }
  componentDidUpdate() {
    this.checkIndeterminateState();
  }
  componentDidLoad() {
    this.checkIndeterminateState();
  }
  checkIndeterminateState() {
    const toggleSwitch = this.hostElement.querySelector(`#${this.toggleid}`);
    if (toggleSwitch)
      toggleSwitch.indeterminate = this.indeterminate;
  }
  render() {
    return (h(Host, null, h("input", { id: this.toggleid, name: this.name || this.toggleid, type: "checkbox", checked: this.checked, class: "pn-toggle-switch", disabled: this.disabled }), h("label", { htmlFor: this.toggleid, class: "pn-toggle" }, h("div", { class: "bg" }), h("div", { class: "circle" }, h("pn-spinner", null)))));
  }
  get hostElement() { return this; }
  static get style() { return pnToggleSwitchCss; }
}, [0, "pn-toggle-switch", {
    "checked": [1028],
    "disabled": [4],
    "indeterminate": [4],
    "toggleid": [1],
    "name": [1]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["pn-toggle-switch", "pn-spinner"];
  components.forEach(tagName => { switch (tagName) {
    case "pn-toggle-switch":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, PnToggleSwitch$1);
      }
      break;
    case "pn-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const PnToggleSwitch = PnToggleSwitch$1;
const defineCustomElement = defineCustomElement$1;

export { PnToggleSwitch, defineCustomElement };
