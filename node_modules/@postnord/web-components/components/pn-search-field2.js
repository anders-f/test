import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$3 } from './pn-button2.js';
import { d as defineCustomElement$2 } from './pn-icon2.js';
import { d as defineCustomElement$1 } from './pn-spinner2.js';

const pnSearchFieldCss = "pn-search-field{display:-ms-inline-flexbox;display:inline-flex}pn-search-field>pn-button{margin-left:0.35em}pn-search-field>pn-button button .pn-button-bg{-webkit-transition:width 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.2s, background 0.1s, left 0.2s, -webkit-box-shadow 0.1s, -webkit-transform 0.2s;transition:width 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.2s, background 0.1s, left 0.2s, -webkit-box-shadow 0.1s, -webkit-transform 0.2s;transition:width 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.2s, background 0.1s, box-shadow 0.1s, left 0.2s, transform 0.2s;transition:width 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.2s, background 0.1s, box-shadow 0.1s, left 0.2s, transform 0.2s, -webkit-box-shadow 0.1s, -webkit-transform 0.2s}pn-search-field>pn-button[data-loading=true] .pn-button-bg{left:0;-webkit-transform:translateX(0);transform:translateX(0);-webkit-transition:width 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.2s, background 0.1s, -webkit-box-shadow 0.1s;transition:width 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.2s, background 0.1s, -webkit-box-shadow 0.1s;transition:width 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.2s, background 0.1s, box-shadow 0.1s;transition:width 0.2s cubic-bezier(0.7, 0, 0.3, 1) 0.2s, background 0.1s, box-shadow 0.1s, -webkit-box-shadow 0.1s}pn-search-field>pn-button[data-loading=true] pn-spinner{left:0.75em}pn-search-field input{padding:0.75em;min-height:3em;font-size:1em;height:100%;font-weight:500;-webkit-font-smoothing:antialiased;outline:none;border-radius:3em;border:0.1rem solid #5e554a;-webkit-transition:border 0.15s, -webkit-box-shadow 0.15s;transition:border 0.15s, -webkit-box-shadow 0.15s;transition:box-shadow 0.15s, border 0.15s;transition:box-shadow 0.15s, border 0.15s, -webkit-box-shadow 0.15s;color:#000000;width:100%}pn-search-field input::-webkit-search-cancel-button{display:none}pn-search-field input::-webkit-input-placeholder{color:#969087;font-weight:normal}pn-search-field input::-moz-placeholder{color:#969087;font-weight:normal}pn-search-field input:-ms-input-placeholder{color:#969087;font-weight:normal}pn-search-field input::-ms-input-placeholder{color:#969087;font-weight:normal}pn-search-field input::placeholder{color:#969087;font-weight:normal}pn-search-field input:focus{border:0.1rem solid #005d92;-webkit-box-shadow:0 0 0 0.2rem #fff, 0 0 0 0.4rem #005d92;box-shadow:0 0 0 0.2rem #fff, 0 0 0 0.4rem #005d92}pn-search-field input:hover{border:0.1rem solid #00a0d6}pn-search-field input:disabled{background:#f3f2f2;border:none}pn-search-field>.input-container{width:100%;position:relative}pn-search-field>.input-container .button-container{position:absolute;top:0;right:0;background:transparent;width:3em;height:100%;overflow:hidden;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}pn-search-field>.input-container button{position:absolute;left:50%;top:50%;-webkit-transform:translate(100%, -50%);transform:translate(100%, -50%);background:none;border:none;color:#005d92;padding:0.3rem;margin:0;font-size:0.875em;border-radius:50%;outline:none;-webkit-transition:border 0.1s, background 0.2s, opacity 0.2s, -webkit-box-shadow 0.1s, -webkit-transform cubic-bezier(0.7, 0, 0.3, 1) 0.2s;transition:border 0.1s, background 0.2s, opacity 0.2s, -webkit-box-shadow 0.1s, -webkit-transform cubic-bezier(0.7, 0, 0.3, 1) 0.2s;transition:border 0.1s, background 0.2s, box-shadow 0.1s, transform cubic-bezier(0.7, 0, 0.3, 1) 0.2s, opacity 0.2s;transition:border 0.1s, background 0.2s, box-shadow 0.1s, transform cubic-bezier(0.7, 0, 0.3, 1) 0.2s, opacity 0.2s, -webkit-box-shadow 0.1s, -webkit-transform cubic-bezier(0.7, 0, 0.3, 1) 0.2s;border:0.1rem solid transparent;-webkit-tap-highlight-color:transparent}pn-search-field>.input-container button.clear,pn-search-field>.input-container button.search{cursor:pointer}pn-search-field>.input-container button:focus{-webkit-box-shadow:0 0 0 0.2rem #fff, 0 0 0 0.4rem #005d92;box-shadow:0 0 0 0.2rem #fff, 0 0 0 0.4rem #005d92}pn-search-field>.input-container button:hover,pn-search-field>.input-container button:focus{background:#e0f8ff}pn-search-field>.input-container button:active{background:#005d92}pn-search-field>.input-container button:active pn-icon svg,pn-search-field>.input-container button:active pn-icon svg path{fill:white}pn-search-field.searching button.search{-webkit-transform:translate(150%, -50%);transform:translate(150%, -50%)}pn-search-field.searching button.clear{-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%)}pn-search-field.button-none input,pn-search-field.button-icon-inline input{padding-right:3.3em}pn-search-field.button-none pn-spinner,pn-search-field.button-icon-inline pn-spinner{position:absolute;left:50%;top:50%;-webkit-transform:translate(100%, -50%);transform:translate(100%, -50%);-webkit-transition:-webkit-transform cubic-bezier(0.7, 0, 0.3, 1) 0.2s;transition:-webkit-transform cubic-bezier(0.7, 0, 0.3, 1) 0.2s;transition:transform cubic-bezier(0.7, 0, 0.3, 1) 0.2s;transition:transform cubic-bezier(0.7, 0, 0.3, 1) 0.2s, -webkit-transform cubic-bezier(0.7, 0, 0.3, 1) 0.2s}pn-search-field.button-none button.search,pn-search-field.button-icon-inline button.search{-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%)}pn-search-field.button-none.loading button,pn-search-field.button-icon-inline.loading button{-webkit-transform:translate(100%, -50%);transform:translate(100%, -50%)}pn-search-field.button-none.loading pn-spinner,pn-search-field.button-icon-inline.loading pn-spinner{-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%)}pn-search-field.button-none.searching button.search{-webkit-transform:translate(100%, -50%);transform:translate(100%, -50%)}pn-search-field.button-icon>pn-button[data-loading=true] .pn-button-bg{left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%)}";

const PnSearchField = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.search = createEvent(this, "search", 7);
    this.update = createEvent(this, "update", 7);
    this.disabled = false;
    this.placeholder = null;
    this.inputid = null;
    this.name = null;
    this.autocomplete = null;
    this.list = null;
    this.value = null;
    /** Label for the button */
    this.label = null;
    /** Loading animation */
    this.loading = false;
    /** Button type, options are 'none' for no button, 'icon' for a labelless button with just a search icon and 'icon-inline' for a search button inside of the search field (this last option disables the clear field button) */
    this.button = '';
    /** Light instead of dark search button */
    this.light = false;
    this.ariaLabel = null;
  }
  inputHandler() {
    this.update.emit(this.value);
  }
  emitSearch(e) {
    if (e.type === 'click' || (e.type === 'keydown' && e.key === 'Enter')) {
      // We prevent the native search event since it's not supported in IE and FF, then we emit our own instead
      e.preventDefault();
      this.search.emit(this.value);
    }
  }
  setVal(e) {
    this.value = e.target.value;
  }
  clearInput() {
    this.value = '';
    this.update.emit(this.value);
    this.hostElement.querySelector('input').focus();
  }
  getClassNames() {
    let classNames = '';
    const buttonTypes = ['none', 'icon', 'icon-inline'];
    if (this.value)
      classNames += 'searching ';
    if (this.loading)
      classNames += 'loading ';
    if (buttonTypes.includes(this.button))
      classNames += `button-${this.button} `;
    return classNames;
  }
  render() {
    return (h(Host, { class: this.getClassNames() }, h("div", { class: "input-container" }, h("input", { type: "search", value: this.value, id: this.inputid, name: this.name, placeholder: this.placeholder, disabled: this.disabled, autocomplete: this.autocomplete, list: this.list, onKeyDown: e => this.emitSearch(e), onInput: e => this.setVal(e), "aria-label": this.ariaLabel }), h("div", { class: "button-container" }, (this.button === 'none' || this.button === 'icon-inline') && (h("button", { class: "search", tabindex: this.button === 'icon-inline' ? '0' : '-1', onClick: e => this.emitSearch(e), "aria-label": "search", title: "search", type: "button" }, h("pn-icon", { symbol: "search", color: "blue700" }))), this.button !== 'icon-inline' && (h("button", { class: "clear", "aria-label": "clear", title: "clear search field", tabindex: this.value && (!this.loading || this.button !== 'none') ? '0' : '-1', onClick: () => this.clearInput(), type: "button" }, h("pn-icon", { symbol: "close-small", color: "blue700" }))), this.button === 'none' || (this.button === 'icon-inline' && h("pn-spinner", null)))), this.button !== 'none' && this.button !== 'icon-inline' && (h("pn-button", { onClick: e => this.emitSearch(e), loading: this.loading, icon: "search", appearance: this.light ? 'light' : 'dark', "icon-only": this.button === 'icon' }, this.label))));
  }
  get hostElement() { return this; }
  static get style() { return pnSearchFieldCss; }
}, [0, "pn-search-field", {
    "disabled": [4],
    "placeholder": [1],
    "inputid": [1],
    "name": [1],
    "autocomplete": [1],
    "list": [1],
    "value": [1],
    "label": [1],
    "loading": [4],
    "button": [1],
    "light": [4],
    "ariaLabel": [1, "aria-label"]
  }, [[0, "input", "inputHandler"]]]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["pn-search-field", "pn-button", "pn-icon", "pn-spinner"];
  components.forEach(tagName => { switch (tagName) {
    case "pn-search-field":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, PnSearchField);
      }
      break;
    case "pn-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "pn-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "pn-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { PnSearchField as P, defineCustomElement as d };
