import {
  UserManager
} from "./chunk-WPXXM27C.js";
import {
  require_react
} from "./chunk-6CE3F7YD.js";
import {
  __toESM
} from "./chunk-TFWDKVI3.js";

// node_modules/react-oidc-context/dist/esm/react-oidc-context.js
var import_react = __toESM(require_react());
var import_react2 = __toESM(require_react());
var import_react3 = __toESM(require_react());
var import_react4 = __toESM(require_react());
var AuthContext = import_react.default.createContext(void 0);
AuthContext.displayName = "AuthContext";
var initialAuthState = {
  isLoading: true,
  isAuthenticated: false
};
var reducer = (state, action) => {
  switch (action.type) {
    case "INITIALISED":
    case "USER_LOADED":
      return {
        ...state,
        user: action.user,
        isLoading: false,
        isAuthenticated: action.user ? !action.user.expired : false,
        error: void 0
      };
    case "USER_UNLOADED":
      return {
        ...state,
        user: void 0,
        isAuthenticated: false
      };
    case "NAVIGATOR_INIT":
      return {
        ...state,
        isLoading: true,
        activeNavigator: action.method
      };
    case "NAVIGATOR_CLOSE":
      return {
        ...state,
        isLoading: false,
        activeNavigator: void 0
      };
    case "ERROR":
      return {
        ...state,
        isLoading: false,
        error: action.error
      };
    default:
      return {
        ...state,
        isLoading: false,
        error: new Error(`unknown type ${action["type"]}`)
      };
  }
};
var hasAuthParams = (location = window.location) => {
  let searchParams = new URLSearchParams(location.search);
  if ((searchParams.get("code") || searchParams.get("error")) && searchParams.get("state")) {
    return true;
  }
  searchParams = new URLSearchParams(location.hash.replace("#", "?"));
  if ((searchParams.get("code") || searchParams.get("error")) && searchParams.get("state")) {
    return true;
  }
  return false;
};
var normalizeErrorFn = (fallbackMessage) => (error) => {
  if (error instanceof Error) {
    return error;
  }
  return new Error(fallbackMessage);
};
var loginError = normalizeErrorFn("Login failed");
var userManagerContextKeys = [
  "clearStaleState",
  "querySessionStatus",
  "revokeTokens",
  "startSilentRenew",
  "stopSilentRenew"
];
var navigatorKeys = [
  "signinPopup",
  "signinSilent",
  "signinRedirect",
  "signoutPopup",
  "signoutRedirect",
  "signoutSilent"
];
var unsupportedEnvironment = (fnName) => () => {
  throw new Error(
    `UserManager#${fnName} was called from an unsupported context. If this is a server-rendered page, defer this call with useEffect() or pass a custom UserManager implementation.`
  );
};
var defaultUserManagerImpl = typeof window === "undefined" ? null : UserManager;
var AuthProvider = (props) => {
  const {
    children,
    onSigninCallback,
    skipSigninCallback,
    onRemoveUser,
    onSignoutRedirect,
    onSignoutPopup,
    implementation: UserManagerImpl = defaultUserManagerImpl,
    userManager: userManagerProp,
    ...userManagerSettings
  } = props;
  const [userManager] = (0, import_react2.useState)(() => {
    return userManagerProp != null ? userManagerProp : UserManagerImpl ? new UserManagerImpl(userManagerSettings) : { settings: userManagerSettings };
  });
  const [state, dispatch] = (0, import_react2.useReducer)(reducer, initialAuthState);
  const userManagerContext = (0, import_react2.useMemo)(
    () => Object.assign(
      {
        settings: userManager.settings,
        events: userManager.events
      },
      Object.fromEntries(
        userManagerContextKeys.map((key) => {
          var _a, _b;
          return [
            key,
            (_b = (_a = userManager[key]) == null ? void 0 : _a.bind(userManager)) != null ? _b : unsupportedEnvironment(key)
          ];
        })
      ),
      Object.fromEntries(
        navigatorKeys.map((key) => [
          key,
          userManager[key] ? async (...args) => {
            dispatch({
              type: "NAVIGATOR_INIT",
              method: key
            });
            try {
              return await userManager[key](...args);
            } finally {
              dispatch({ type: "NAVIGATOR_CLOSE" });
            }
          } : unsupportedEnvironment(key)
        ])
      )
    ),
    [userManager]
  );
  const didInitialize = (0, import_react2.useRef)(false);
  (0, import_react2.useEffect)(() => {
    if (!userManager || didInitialize.current) {
      return;
    }
    didInitialize.current = true;
    void (async () => {
      let user = null;
      try {
        if (hasAuthParams() && !skipSigninCallback) {
          user = await userManager.signinCallback();
          onSigninCallback && onSigninCallback(user);
        }
        user = !user ? await userManager.getUser() : user;
        dispatch({ type: "INITIALISED", user });
      } catch (error) {
        dispatch({ type: "ERROR", error: loginError(error) });
      }
    })();
  }, [userManager, skipSigninCallback, onSigninCallback]);
  (0, import_react2.useEffect)(() => {
    if (!userManager)
      return void 0;
    const handleUserLoaded = (user) => {
      dispatch({ type: "USER_LOADED", user });
    };
    userManager.events.addUserLoaded(handleUserLoaded);
    const handleUserUnloaded = () => {
      dispatch({ type: "USER_UNLOADED" });
    };
    userManager.events.addUserUnloaded(handleUserUnloaded);
    const handleSilentRenewError = (error) => {
      dispatch({ type: "ERROR", error });
    };
    userManager.events.addSilentRenewError(handleSilentRenewError);
    return () => {
      userManager.events.removeUserLoaded(handleUserLoaded);
      userManager.events.removeUserUnloaded(handleUserUnloaded);
      userManager.events.removeSilentRenewError(handleSilentRenewError);
    };
  }, [userManager]);
  const removeUser = (0, import_react2.useCallback)(
    userManager ? () => userManager.removeUser().then(onRemoveUser) : unsupportedEnvironment("removeUser"),
    [userManager, onRemoveUser]
  );
  const signoutRedirect = (0, import_react2.useCallback)(
    (args) => userManagerContext.signoutRedirect(args).then(onSignoutRedirect),
    [userManagerContext.signoutRedirect, onSignoutRedirect]
  );
  const signoutPopup = (0, import_react2.useCallback)(
    (args) => userManagerContext.signoutPopup(args).then(onSignoutPopup),
    [userManagerContext.signoutPopup, onSignoutPopup]
  );
  const signoutSilent = (0, import_react2.useCallback)(
    (args) => userManagerContext.signoutSilent(args),
    [userManagerContext.signoutSilent]
  );
  return import_react2.default.createElement(
    AuthContext.Provider,
    {
      value: {
        ...state,
        ...userManagerContext,
        removeUser,
        signoutRedirect,
        signoutPopup,
        signoutSilent
      }
    },
    children
  );
};
var useAuth = () => {
  const context = import_react3.default.useContext(AuthContext);
  if (!context) {
    throw new Error("AuthProvider context is undefined, please verify you are calling useAuth() as child of a <AuthProvider> component.");
  }
  return context;
};
function withAuth(Component) {
  const displayName = `withAuth(${Component.displayName || Component.name})`;
  const C = (props) => {
    const auth = useAuth();
    return import_react4.default.createElement(Component, { ...props, auth });
  };
  C.displayName = displayName;
  return C;
}
export {
  AuthContext,
  AuthProvider,
  hasAuthParams,
  useAuth,
  withAuth
};
//# sourceMappingURL=react-oidc-context.js.map
